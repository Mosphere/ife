!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=14)}([function(e,t,n){var r;r=function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=e,n.c=t,n.i=function(e){return e},n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/dist",n(n.s=6)}([function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e,t){var n=(0,o.default)(e),r=(0,o.default)(t),i=n.path;if(0===i.indexOf("/"))return e;var s=i.split("/"),a=r.path.split("/");a.pop();for(var c=0;c<s.length;c++){var p=s[c];switch(p){case"..":a.pop();break;case".":break;default:a.push(p)}}""!==a[0]&&a.unshift("");return a.join("/")+(n.queryString?"?"+n.queryString:"")};var r,i=n(1),o=(r=i)&&r.__esModule?r:{default:r}},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e){var t={hash:"",queryString:"",params:{},query:{},path:e},n=t.path.indexOf("#");n>=0&&(t.hash=t.path.slice(n+1),t.path=t.path.slice(0,n));var r=t.query,i=t.path.indexOf("?");i>=0&&(t.queryString=t.path.slice(i+1),t.path=t.path.slice(0,i),t.queryString.split("&").forEach(function(e){var t=e.indexOf("="),n="";t>0&&(n=e.slice(t+1),e=e.slice(0,t));var i=decodeURIComponent(e);n=decodeURIComponent(n),r.hasOwnProperty(i)?r[i]=[].concat(r[i],n):r[i]=n}));return t}},function(e,t,n){"use strict";t.__esModule=!0;var r=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return e.prototype.on=function(e,t){"function"==typeof t&&(this._eventListeners||(this._eventListeners={}),this._eventListeners[e]||(this._eventListeners[e]=[]),this._eventListeners[e].push(t))},e.prototype.un=function(e,t){if(this._eventListeners&&this._eventListeners[e])if(t)for(var n=this._eventListeners[e],r=n.length;r--;)n[r]===t&&n.splice(r,1);else this._eventListeners[e]=[]},e.prototype.fire=function(e,t){if(!e)throw new Error("No event type specified");var n=this._eventListeners&&this._eventListeners[e];if(n)for(var r=0;r<n.length;r++)n[r](t)},e}();t.default=r},function(e,t,n){"use strict";t.__esModule=!0;var r,i=n(6),o=n(0),s=(r=o)&&r.__esModule?r:{default:r};t.default={template:'<a href="{{href}}"\n        onclick="return false;"\n        on-click="clicker($event)"\n        target="{{target}}"\n        class="{{class}}"\n        style="{{style}}"\n        >\n        <slot></slot>\n    </a>',clicker:function(e){var t=this.data.get("href");"string"==typeof t&&i.router.locator.redirect(t.replace(/^#/,"")),e.preventDefault?e.preventDefault():e.returnValue=!1},computed:{href:function(){var e=this.data.get("to");if("string"==typeof e){var t=(0,s.default)(e,i.router.locator.current);return"hash"===i.router.mode&&(t="#"+t),t}}}}},function(e,t,n){"use strict";t.__esModule=!0;var r=o(n(2)),i=o(n(0));function o(e){return e&&e.__esModule?e:{default:e}}function s(){var e=location.href.indexOf("#");return e<0?"/":location.href.slice(e+1)||"/"}var a=function(e){function t(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.call(this));return n.current=s(),n.referrer="",n.hashChangeHandler=function(){n.redirect(s())},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.start=function(){window.addEventListener&&window.addEventListener("hashchange",this.hashChangeHandler,!1),window.attachEvent&&window.attachEvent("onhashchange",this.hashChangeHandler)},t.prototype.stop=function(){window.removeEventListener&&window.removeEventListener("hashchange",this.hashChangeHandler,!1),window.detachEvent&&window.detachEvent("onhashchange",this.hashChangeHandler)},t.prototype.redirect=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{force:!1};e=(0,i.default)(e,this.current);var n=this.current,r=e!==n;r?(this.referrer=n,this.current=e,location.hash=e):n=this.referrer,!r&&!t.force||t.silent||this.fire("redirect",{url:e,referrer:n})},t.prototype.reload=function(){this.redirect(this.current,{force:!0})},t}(r.default);t.default=a},function(e,t,n){"use strict";t.__esModule=!0;var r=o(n(2)),i=o(n(0));function o(e){return e&&e.__esModule?e:{default:e}}function s(){return location.pathname+location.search}var a=function(e){function t(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.call(this));return n.current=s(),n.referrer="",n.popstateHandler=function(){n.referrer=n.current,n.current=s(),n.fire("redirect",{url:n.current,referrer:n.referrer})},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.start=function(){window.addEventListener("popstate",this.popstateHandler)},t.prototype.stop=function(){window.removeEventListener("popstate",this.popstateHandler)},t.prototype.redirect=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{force:!1};e=(0,i.default)(e,this.current);var n=this.current,r=e!==n;r&&(this.referrer=n,this.current=e,history.pushState({},"",e)),!r&&!t.force||t.silent||this.fire("redirect",{url:e,referrer:n})},t.prototype.reload=function(){this.fire("redirect",{url:this.current,referrer:this.referrer})},t}(r.default);t.default=a,a.isSupport="pushState"in window.history},function(e,t,n){"use strict";t.__esModule=!0,t.Link=t.router=t.Router=t.version=void 0;var r=c(n(4)),i=c(n(5)),o=c(n(1)),s=c(n(3)),a=c(n(7));function c(e){return e&&e.__esModule?e:{default:e}}var p=365611;function l(e){return e.prototype&&(5===e.prototype.nodeType||"san-cmpt"===e.prototype._type)}t.version="1.2.0";var h=t.Router=function(){function e(){var t=this,n=(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}).mode,r=void 0===n?"hash":n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.routes=[],this.routeAlives=[],this.listeners=[],this.locatorRedirectHandler=function(e){for(var n=(0,o.default)(e.url),r=void 0,i=0;i<t.routes.length;i++){var s=t.routes[i],a=s.rule.exec(n.path);if(a){r=s;for(var c=s.keys||[],p=1;p<a.length;p++){var l=c[p]||p,h=a[p];n.query[l]=h,n.params[l]=h}n.referrer=e.referrer,n.config=s.config;break}}var u=0,f=1,d={hash:n.hash,queryString:n.queryString,query:n.query,path:n.path,referrer:n.referrer,config:n.config,resume:m,suspend:function(){f=0},stop:function(){f=-1}},v=function(){f>0&&(u<t.listeners.length?(t.listeners[u].call(t,d,n.config),f>0&&m()):y())};function m(){f=1,u++,v()}var y=function(){if(r)t.doRoute(r,n);else for(var e=t.routeAlives.length;e--;)t.routeAlives[e].component.dispose(),t.routeAlives.splice(e,1)};v()},this.setMode(r)}return e.prototype.listen=function(e){this.listeners.push(e)},e.prototype.unlisten=function(e){for(var t=this.listeners.length;t--;)this.listeners[t]===e&&this.listeners.splice(t,1)},e.prototype.doRoute=function(e,t){for(var n=this,r=!1,i=this.routeAlives.length;i--;){var o=this.routeAlives[i];o.id===e.id?(o.component.data.set("route",t),o.component._callHook("route"),r=!0):(o.component.dispose(),this.routeAlives.splice(i,1))}r||(e.Component?l(e.Component)?this.attachCmpt(e,t):e.Component().then(function(r){l(r)?e.Component=r:r.__esModule&&l(r.default)&&(e.Component=r.default),n.attachCmpt(e,t)}):e.handler.call(this,t))},e.prototype.attachCmpt=function(e,t){var n=new e.Component;n.data.set("route",t),n._callHook("route");var r=e.target,i=(0,a.default)(r);if(!i)throw new Error('[SAN-ROUTER ERROR] Attach failed, target element "'+e.target+'" is not found.');n.attach(i),this.routeAlives.push({component:n,id:e.id})},e.prototype.add=function(e){var t=e.rule,n=e.handler,r=e.target,i=void 0===r?"#main":r,o=e.Component,s=[""];if("string"==typeof t){var a=t.replace(/\/:([a-z0-9_-]+)(?=\/|$)/gi,function(e,t){return s.push(t),"/([^/\\s]+)"});t=new RegExp("^"+a+"$","i")}if(!(t instanceof RegExp))throw new Error("[SAN-ROUTER ERROR] Rule must be string or RegExp!");var c=(++p).toString();return this.routes.push({id:c,rule:t,handler:n,keys:s,target:i,Component:o,config:e}),this},e.prototype.start=function(){return this.isStarted||(this.isStarted=!0,this.locator.on("redirect",this.locatorRedirectHandler),this.locator.start(),this.locator.reload()),this},e.prototype.stop=function(){return this.locator.un("redirect",this.locatorRedirectHandler),this.locator.stop(),this.isStarted=!1,this},e.prototype.setMode=function(e){if(e=e.toLowerCase(),this.mode!==e){this.mode=e;var t=!1;switch(this.isStarted&&(this.stop(),t=!0),e){case"hash":this.locator=new r.default;break;case"html5":this.locator=new i.default}return t&&this.start(),this}},e}();t.router=new h;t.Link=s.default},function(e,t,n){"use strict";t.__esModule=!0;var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t.default=function(e){switch(void 0===e?"undefined":r(e)){case"object":return e;case"string":return document.querySelector?document.querySelector(e):document.getElementById(e.replace(/#/i,""))}}}])},e.exports=r()},function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){(function(t){!function(n){var r=1,i=(new Date).getTime().toString(16).slice(8);function o(){return"_"+i+r++}function s(){}function a(e,t){for(var n in t)if(t.hasOwnProperty(n)){var r=t[n];void 0!==r&&(e[n]=r)}return e}function c(e,t){var n=e.prototype,r=new Function;r.prototype=t.prototype,e.prototype=new r,e.prototype.constructor=e,a(e.prototype,n)}function p(e,t){if(e&&e.length>0)for(var n=0,r=e.length;n<r&&!1!==t(e[n],n);n++);}function l(e,t){var n=Function.prototype.bind,r=Array.prototype.slice;if(n&&e.bind===n)return n.apply(e,r.call(arguments,1));var i=r.call(arguments,2);return function(){return e.apply(t,i.concat(r.call(arguments)))}}function h(e,t,n,r){e.addEventListener?e.addEventListener(t,n,r):e.attachEvent("on"+t,n)}function u(e){var t={};return p(e.split(","),function(e){t[e]=1}),t}var f=u("svg,g,defs,desc,metadata,symbol,use,image,path,rect,circle,line,ellipse,polyline,polygon,text,tspan,tref,textpath,marker,pattern,clippath,mask,filter,cursor,view,animate,font,font-face,glyph,missing-glyph");function d(e){return f[e]?document.createElementNS("http://www.w3.org/2000/svg",e):document.createElement(e)}function v(e){e&&e.parentNode&&e.parentNode.removeChild(e)}var m,y=[],g="function"==typeof Promise&&/native code/.test(Promise);function w(e,n){if(n&&(e=l(e,n)),y.push(e),!m)if(m=function(){var e=y.slice(0);y=[],m=null;for(var t=0,n=e.length;t<n;t++)e[t]()},"function"==typeof t)t(m);else if("function"==typeof MessageChannel){var r=new MessageChannel,i=r.port2;r.port1.onmessage=m,i.postMessage(1)}else g?Promise.resolve().then(m):setTimeout(m,0)}var x="undefined"!=typeof navigator&&navigator.userAgent.match(/msie\s*([0-9]+)/i),N=x?x[1]-0:0,b=N&&N<9;function E(e,t){var n=document.createEvent("HTMLEvents");n.initEvent(t,!0,!0),e.dispatchEvent(n)}9===N&&h(document,"selectionchange",function(){var e=document.activeElement;"TEXTAREA"!==e.tagName&&"INPUT"!==e.tagName||E(e,"input")});var C=u("area,base,br,col,embed,hr,img,input,keygen,param,source,track,wbr"),R="<<anonymous>>";function T(e){return e&&1===e.nodeType?"element":Object.prototype.toString.call(e).slice(8,-1).toLowerCase()}function _(e){var t=function(){};t.isRequired=s;var n=function(t,n,r,i,o){var s=n[r],a=T(s);if(i=i||R,null!=s)e(n,r,i,o);else if(t)throw new Error("[SAN ERROR] The `"+r+"` is marked as required in `"+i+"`, but its value is "+a)};return(t=l(n,null,!1)).isRequired=l(n,null,!0),t}function S(e){return _(function(t,n,r,i){var o=T(t[n]);if(o!==e)throw new Error("[SAN ERROR] Invalid "+r+" data `"+i+"` of type("+o+" supplied to "+r+", expected "+e+")")})}var A=(_(s),_(s),_(s),_(s),_(s),_(s),_(s));function O(e){this.source=e,this.len=this.source.length,this.index=0}function k(e){return(e=e||{}).textExpr||(e.directives=e.directives||{},e.props=e.props||[],e.events=e.events||[],e.children=e.children||[]),e}function I(e){return e.replace(/-([a-z])/g,function(e,t){return t.toUpperCase()})}A={any:_(s),array:S("array"),object:S("object"),func:S("function"),string:S("string"),number:S("number"),bool:S("boolean"),symbol:S("symbol"),arrayOf:function(e){return _(function(t,n,r,i){if("function"!=typeof e)throw new Error("[SAN ERROR] Data `"+n+"` of `"+r+"` has invalid DataType notation inside `arrayOf`, expected `function`");var o=t[n],s=T(o);if("array"!==s)throw new Error("[SAN ERROR] Invalid "+r+" data `"+i+"` of type("+s+" supplied to "+r+", expected array)");for(var a=0,c=o.length;a<c;a++)e(o,a,r,i+"["+a+"]")})},instanceOf:function(e){return _(function(t,n,r,i){var o=t[n];if(!(o instanceof e)){var s=o.constructor&&o.constructor.name?o.constructor.name:R,a=e.name||R;throw new Error("[SAN ERROR] Invalid "+r+" data `"+i+"` of type("+s+" supplied to "+r+", expected instance of "+a+")")}})},shape:function(e){return _(function(t,n,r,i){if("object"!==T(e))throw new Error("[SAN ERROR] Data `"+i+"` of `"+r+"` has invalid DataType notation inside `shape`, expected `object`");var o=t[n],s=T(o);if("object"!==s)throw new Error("[SAN ERROR] Invalid "+r+" data `"+i+"` of type("+s+" supplied to "+r+", expected object)");for(var a in e)if(e.hasOwnProperty(a)){var c=e[a];"function"==typeof c&&c(o,a,r,i+"."+a)}})},oneOf:function(e){return _(function(t,n,r,i){if("array"!==T(e))throw new Error("[SAN ERROR] Data `"+i+"` of `"+r+"` has invalid DataType notation inside `oneOf`, array is expected.");for(var o=t[n],s=0,a=e.length;s<a;s++)if(o===e[s])return;throw new Error("[SAN ERROR] Invalid "+r+" data `"+i+"` of value(`"+o+"` supplied to "+r+", expected one of "+e.join(",")+")")})},oneOfType:function(e){return _(function(t,n,r,i){if("array"!==T(e))throw new Error("[SAN ERROR] Data `"+n+"` of `"+r+"` has invalid DataType notation inside `oneOf`, array is expected.");for(var o=t[n],s=0,a=e.length;s<a;s++){var c=e[s];if("function"==typeof c)try{return void c(t,n,r,i)}catch(e){}}throw new Error("[SAN ERROR] Invalid "+r+" data `"+n+"` of value(`"+o+"` supplied to "+r+")")})},objectOf:function(e){return _(function(t,n,r,i){if("function"!=typeof e)throw new Error("[SAN ERROR] Data `"+n+"` of `"+r+"` has invalid DataType notation inside `objectOf`, expected function");var o=t[n],s=T(o);if("object"!==s)throw new Error("[SAN ERROR] Invalid "+r+" data `"+n+"` of type("+s+" supplied to "+r+", expected object)");for(var a in o)o.hasOwnProperty(a)&&e(o,a,r,i+"."+a)})},exact:function(e){return _(function(t,n,r,i,o){if("object"!==T(e))throw new Error("[SAN ERROR] Data `"+n+"` of `"+r+"` has invalid DataType notation inside `exact`");var s=t[n],c=T(s);if("object"!==c)throw new Error("[SAN ERROR] Invalid data `"+i+"` of type `"+c+"`(supplied to "+r+", expected `object`)");var p={};for(var l in a(p,e),a(p,s),p)if(p.hasOwnProperty(l)){var h=e[l];if(!h)throw new Error("[SAN ERROR] Invalid data `"+i+"` key `"+l+"` supplied to `"+r+"`. (`"+l+"` is not defined in `DataTypes.exact`)");if(!(l in s))throw new Error("[SAN ERROR] Invalid data `"+i+"` key `"+l+"` supplied to `"+r+"`. (`"+l+"` is marked `required` in `DataTypes.exact`)");h(s,l,r,i+"."+l,o)}})}},O.prototype.currentCode=function(){return this.charCode(this.index)},O.prototype.cut=function(e,t){return this.source.slice(e,t)},O.prototype.go=function(e){this.index+=e},O.prototype.nextCode=function(){return this.go(1),this.currentCode()},O.prototype.charCode=function(e){return this.source.charCodeAt(e)},O.prototype.goUntil=function(e){for(var t;this.index<this.len&&(t=this.currentCode());)switch(t){case 32:case 9:this.index++;break;default:return t===e?(this.index++,1):void 0}},O.prototype.match=function(e){e.lastIndex=this.index;var t=e.exec(this.source);return t&&(this.index=e.lastIndex),t};var L={STRING:1,NUMBER:2,BOOL:3,ACCESSOR:4,INTERP:5,CALL:6,TEXT:7,BINARY:8,UNARY:9,TERTIARY:10};function P(e){return{type:L.ACCESSOR,paths:e}}function j(e){return e.match(/\s*([\$0-9a-z_]+)/gi)[1]}function M(e){var t=function e(t){var n=function e(t){var n=function(e){var t=$(e);e.goUntil();var n=e.currentCode();switch(n){case 61:case 33:if(61===e.nextCode())return n+=61,61===e.nextCode()&&(n+=61,e.go(1)),{type:L.BINARY,operator:n,segs:[t,$(e)]};e.go(-1)}return t}(t);t.goUntil();if(38===t.currentCode()){if(38===t.nextCode())return t.go(1),{type:L.BINARY,operator:76,segs:[n,e(t)]};t.go(-1)}return n}(t);t.goUntil();if(124===t.currentCode()){if(124===t.nextCode())return t.go(1),{type:L.BINARY,operator:248,segs:[n,e(t)]};t.go(-1)}return n}(e);if(e.goUntil(),63===e.currentCode()){e.go(1);var n=M(e);if(e.goUntil(),58===e.currentCode())return e.go(1),{type:L.TERTIARY,segs:[t,n,M(e)]}}return t}function U(e){var t=j(e);switch(t){case"true":case"false":return{type:L.BOOL,value:"true"===t}}var n=P([{type:L.STRING,value:t}]);e:for(;;)switch(e.currentCode()){case 46:e.go(1),n.paths.push({type:L.STRING,value:j(e)});break;case 91:e.go(1),n.paths.push(M(e)),e.goUntil(93);break;default:break e}return n}function D(e){switch(e.goUntil(),e.currentCode()){case 33:return e.go(1),{type:L.UNARY,expr:D(e)};case 34:case 39:return function(e){var t,n=e.currentCode(),r=e.index;e:for(;t=e.nextCode();)switch(t){case 92:e.go(1);break;case n:e.go(1);break e}var i=e.cut(r,e.index);return{type:L.STRING,value:new Function("return "+i)()}}(e);case 45:case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:return function(e){var t=e.match(/\s*(-?[0-9]+(\.[0-9]+)?)/g);return{type:L.NUMBER,value:t[1]-0}}(e);case 40:return function(e){e.go(1);var t=M(e);return e.goUntil(41),t}(e)}return U(e)}function B(e){for(var t=D(e);;){e.goUntil();var n=e.currentCode();switch(n){case 37:case 42:case 47:e.go(1),t={type:L.BINARY,operator:n,segs:[t,D(e)]};continue}break}return t}function F(e){for(var t=B(e);;){e.goUntil();var n=e.currentCode();switch(n){case 43:case 45:e.go(1),t={type:L.BINARY,operator:n,segs:[t,B(e)]};continue}break}return t}function $(e){var t=F(e);e.goUntil();var n=e.currentCode();switch(n){case 60:case 62:return 61===e.nextCode()&&(n+=61,e.go(1)),{type:L.BINARY,operator:n,segs:[t,F(e)]}}return t}function q(e){if("object"==typeof e&&e.type)return e;var t=M(new O(e));return t.raw=e,t}function G(e,t){e.goUntil();var n=U(e),r=[];if(e.goUntil(40))for(;!e.goUntil(41);)r.push(M(e)),e.goUntil(44);else t&&(r=t);return{type:L.CALL,name:n,args:r}}function H(e,t){var n=G(new O(e),t);return n.raw=e,n}function Y(e){for(var t=new O(e),n={type:L.INTERP,expr:M(t),filters:[],raw:e};t.goUntil(124);){var r=G(t);switch(r.name.paths[0].value){case"html":break;case"raw":n.original=1;break;default:n.filters.push(r)}}return n}var z={lt:"<",gt:">",nbsp:" ",quot:'"',emsp:" ",ensp:" ",thinsp:" ",copy:"©",reg:"®",zwnj:"‌",zwj:"‍",amp:"&"};function X(e){return e.replace(/[\^\[\]\$\(\)\{\}\?\*\.\+\\]/g,function(e){return"\\"+e})}function W(e,t){t=t||["{{","}}"];var n,r=new RegExp(X(t[0])+"\\s*([\\s\\S]+?)\\s*"+X(t[1]),"ig"),i=new O(e),o=0,s={type:L.TEXT,segs:[]};function a(e){var t;e&&s.segs.push({type:L.STRING,literal:e,value:(t=e,t.replace(/&#([0-9]+);/g,function(e,t){return String.fromCharCode(+t)}).replace(/&#x([0-9a-f]+);/gi,function(e,t){return String.fromCharCode(parseInt(t,16))}).replace(/&([a-z]+);/gi,function(e,t){return z[t]||e}))})}for(;null!=(n=i.match(r));){a(i.cut(o,i.index-n[0].length));var c=Y(n[1]);s.original=s.original||c.original,s.segs.push(c),o=i.index}return a(i.cut(o)),1===s.segs.length&&s.segs[0].type===L.STRING&&(s.value=s.segs[0].value),s}var V={for:function(e){var t=new O(e),n=t.match(/^\s*([\$0-9a-z_]+)(\s*,\s*([\$0-9a-z_]+))?\s+in\s+/gi);if(n)return{item:q(n[1]),index:q(n[3]||"$index"),value:U(t)};throw new Error("[SAN FATAL] for syntax error: "+e)},ref:function(e,t){return{value:W(e,t.delimiters)}},if:function(e){return{value:q(e.replace(/(^\{\{|\}\}$)/g,""))}},elif:function(e){return{value:q(e.replace(/(^\{\{|\}\}$)/g,""))}},else:function(e){return{value:{}}},html:function(e){return{value:q(e.replace(/(^\{\{|\}\}$)/g,""))}},transition:function(e){return{value:H(e)}}};function J(e){var t=e.expr;if(t.type===L.TEXT)switch(t.segs.length){case 0:e.expr={type:L.BOOL,value:!0};break;case 1:(t=e.expr=t.segs[0]).type===L.INTERP&&0===t.filters.length&&(e.expr=t.expr)}}function K(e,t,n,r){var i,o,s=t.indexOf("-");switch(s>0&&(o=t.slice(0,s),i=t.slice(s+1)),o){case"on":var a,c={name:i,modifier:{}};for(e.events.push(c);(a=n.indexOf(":"))>0;){var p=n.slice(0,a);if(!/^[a-z]+$/i.test(p))break;c.modifier[p]=!0,n=n.slice(a+1)}c.expr=H(n,[P([{type:L.STRING,value:"$event"}])]);break;case"san":case"s":!function(e,t,n,r){"else-if"===t&&(t="elif");var i=V[t];i&&((e.directives[t]=i(n,r)).raw=n)}(e,i,n,r);break;case"prop":Q(e,i,n,r);break;case"var":e.vars||(e.vars=[]),i=I(i),e.vars.push({name:i,expr:q(n.replace(/(^\{\{|\}\}$)/g,""))});break;default:Q(e,t,n,r)}}function Q(e,t,n,r){var i=n.match(/^\{=\s*(.*?)\s*=\}$/);if(i)e.props.push({name:t,expr:q(i[1]),x:1,raw:n});else{var o={name:t,expr:W(n,r.delimiters),raw:n};switch(t){case"class":case"style":p(o.expr.segs,function(e){e.type===L.INTERP&&e.filters.push({type:L.CALL,name:P([{type:L.STRING,value:"_"+o.name}]),args:[]})});break;case"checked":"input"===e.tagName&&J(o)}e.props.push(o)}}function Z(e,t){for(var n=["ROOT"],r=1,i=e.length;r<i;r++)n.push(e[r].tagName);return t&&n.push(t),n.join(">")}function ee(e,t){(t=t||{}).trimWhitespace=t.trimWhitespace||"none";var n=k();if("string"!=typeof e)return n;for(var r,i=new O(e=e.replace(/<!--([\s\S]*?)-->/gm,"").replace(/(^\s+|\s+$)/g,"")),o=/<(\/)?([a-z0-9-]+)\s*/gi,s=/([-:0-9a-z\(\)\[\]]+)(\s*=\s*(['"])([^\3]*?)\3)?\s*/gi,a=n,c=[n],p=0,l=0;null!=(r=i.match(o));){var h=r[1],u=r[2].toLowerCase();if(N(e.slice(l,i.index-r[0].length)),h&&62===i.currentCode()){var f=p;if(C[u])throw new Error("[SAN ERROR] "+Z(c,u)+" is a `auto closed` tag, so it cannot be closed with </"+u+">");if(c[f].tagName!==u&&("table"!==u||"tbody"!==c[f].tagName))throw new Error("[SAN ERROR] "+Z(c)+" is closed with "+u);for(;f>0&&c[f].tagName!==u;)f--;f>0&&(a=c[p=f-1]),i.go(1)}else{if(h){if(60===i.currentCode())throw new Error("[SAN ERROR] "+Z(c)+"'s close tag not closed");throw new Error("[SAN ERROR] "+Z(c)+"'s close tag has attributes")}if(!h){for(var d=k({tagName:u}),v=C[u];;){var m=i.currentCode();if(62===m){i.go(1);break}if(47===m&&62===i.charCode(i.index+1)){i.go(2),v=1;break}if(60===m)throw new Error("[SAN ERROR] "+Z(c,u)+" is not closed");var y=i.match(s);if(y){if(61===i.charCode(y.index+y[1].length)&&!y[2])throw new Error("[SAN ERROR] "+Z(c,u)+" attribute `"+y[1]+'` is not wrapped with ""');K(d,y[1],y[2]?y[4]:"",t)}}if(d.directives.else||d.directives.elif)for(var g=a.children.length;g--;){var w=a.children[g];if(!w.textExpr){if(!w.directives.if)throw new Error("[SAN FATEL] else not match if.");w.elses=w.elses||[],w.elses.push(d);break}a.children.splice(g,1)}else{if("tr"===d.tagName&&"table"===a.tagName){var x=k({tagName:"tbody"});a.children.push(x),a=x,c[++p]=x}a.children.push(d)}v||(a=d,c[++p]=d)}}l=i.index}return N(i.cut(l)),n;function N(e){switch(t.trimWhitespace){case"blank":/^\s+$/.test(e)&&(e=null);break;case"all":e=e.replace(/(^\s+|\s+$)/g,"")}e&&a.children.push(k({textExpr:W(e,t.delimiters)}))}}var te={url:encodeURIComponent,_class:function(e){return e instanceof Array?e.join(" "):e},_style:function(e){if("object"==typeof e){var t="";for(var n in e)t+=n+":"+e[n]+";";return t}return e},_sep:function(e,t){return e?t+e:e}};function ne(e,t,n){if(null!=e.value)return e.value;var r=se.get(t,e);if(null==r){switch(e.type){case L.UNARY:r=!ne(e.expr,t,n);break;case L.BINARY:var i=ne(e.segs[0],t,n),o=ne(e.segs[1],t,n);switch(e.operator){case 37:r=i%o;break;case 43:r=i+o;break;case 45:r=i-o;break;case 42:r=i*o;break;case 47:r=i/o;break;case 60:r=i<o;break;case 62:r=i>o;break;case 76:r=i&&o;break;case 94:r=i!=o;break;case 121:r=i<=o;break;case 122:r=i==o;break;case 123:r=i>=o;break;case 155:r=i!==o;break;case 183:r=i===o;break;case 248:r=i||o}break;case L.TERTIARY:r=ne(e.segs[ne(e.segs[0],t,n)?1:2],t,n);break;case L.ACCESSOR:r=t.get(e);break;case L.INTERP:if(r=ne(e.expr,t,n),n)for(var s=0,a=e.filters.length;s<a;s++){var c=e.filters[s],p=c.name.paths[0].value;n.filters[p]?r=n.filters[p].apply(n,[r].concat(re(c.args,t,n))):te[p]&&(r=te[p](r,c.args[0]?c.args[0].value:""))}null==r&&(r="");break;case L.TEXT:var l="";for(s=0,a=e.segs.length;s<a;s++){var h=e.segs[s];l+=h.value||ne(h,t,n)}return l}se.set(t,e,r)}return r}function re(e,t,n){for(var r=[],i=0;i<e.length;i++)r.push(ne(e[i],t,n));return r}var ie={},oe=1,se={clear:function(){oe||(oe=1,ie={})},set:function(e,t,n){t.raw&&(oe=0,(ie[e.id]=ie[e.id]||{})[t.raw]=n)},get:function(e,t){if(t.raw&&ie[e.id])return ie[e.id][t.raw]}};function ae(e,t,n){for(var r=0,i=t.length;r<i;r++)if(ce(e,t[r],n))return 1;return 0}function ce(e,t,n){switch(t.type){case L.ACCESSOR:for(var r=t.paths,i=r.length,o=e.paths,s=o.length,a=1,c=0;c<i;c++){var l=r[c];if(l.type===L.ACCESSOR&&ce(e,l,n))return 1;a&&c<s&&(l.value||ne(l,n))!=(o[c].value||ne(o[c],n))&&(a=0)}return a&&(a=Math.max(1,s-i+2)),a;case L.UNARY:return ce(e,t.expr,n)?1:0;case L.TEXT:case L.BINARY:case L.TERTIARY:return ae(e,t.segs,n);case L.INTERP:var h;return ce(e,t.expr,n)?1:(p(t.filters,function(t){return!(h=ae(e,t.args,n))}),h?1:0)}return 0}var pe=1,le=2;function he(e){return this[e]}var ue={start:{},compiled:{is:he,compiled:!0},inited:{is:he,compiled:!0,inited:!0},painting:{is:he,compiled:!0,inited:!0,painting:!0},created:{is:he,compiled:!0,inited:!0,created:!0},attached:{is:he,compiled:!0,inited:!0,created:!0,attached:!0},leaving:{is:he,compiled:!0,inited:!0,created:!0,attached:!0,leaving:!0},detached:{is:he,compiled:!0,inited:!0,created:!0,detached:!0},disposed:{is:he,disposed:!0}},fe={TEXT:1,IF:2,FOR:3,ELEM:4,CMPT:5,SLOT:6,TPL:7};function de(e,t){var n=e.hotspot.props[t];if(null!=n)return e.props[n]}var ve={readonly:"readOnly",cellpadding:"cellPadding",cellspacing:"cellSpacing",colspan:"colSpan",rowspan:"rowSpan",valign:"vAlign",usemap:"useMap",frameborder:"frameBorder",for:"htmlFor"},me={prop:function(e,t,n,r){var i=ve[n]||n;i in e?e[i]=null==t?"":t:e.setAttribute(n,t)},output:function(e,t,n){n.set(t.expr,e.el[t.name],{target:{id:e.id,prop:t.name}})}},ye={prop:function(e,t,n){e.setAttribute(n,t)}},ge={prop:function(e,t,n,r,i){e[ve[n]||n]=!!(i&&""===i.raw||t&&"false"!==t&&"0"!==t)}},we={style:{prop:function(e,t){e.style.cssText=t}},class:{prop:function(e,t){e.className=t}},slot:{prop:s},readonly:ge,disabled:ge,autofocus:ge,required:ge,draggable:ge},xe={checkbox:function(e,t){var n=!1;return p(e,function(e){return!(n=e===t)}),n},radio:function(e,t){return e===t}};var Ne={input:{multiple:ge,checked:{prop:function(e,t,n,r){var i=function(e,t,n){var r=de(e.aNode,"value"),i=de(e.aNode,"type");if(r&&i){var o=ne(i.expr,e.scope,e.owner);if(xe[o]){var s=de(e.aNode,"checked");return s.hintExpr||(s.hintExpr=r.expr),!!xe[o](t,ne(r.expr,e.scope,e.owner))}}}(r,t);ge.prop(e,null!=i?i:t,"checked",r)},output:function(e,t,n){var r=e.el,i=de(e.aNode,"value"),o=de(e.aNode,"type")||{};if(i&&o)switch(o.raw){case"checkbox":return void n[r.checked?"push":"remove"](t.expr,r.value);case"radio":return void(r.checked&&n.set(t.expr,r.value,{target:{id:e.id,prop:t.name}}))}me.output(e,t,n)}}},option:{value:{prop:function(e,t,n,r){me.prop(e,t,n,r),function(e,t){var n=e.parent;for(;n&&"select"!==n.tagName;)n=n.parent;if(n){var r,i,o=null;if((r=de(n.aNode,"value"))&&(i=r.expr)&&(o=n.nodeType===fe.CMPT?ne(i,n.data,n):ne(i,n.scope,n.owner)||""),o===t)return 1}}(r,t)&&(e.selected=!0)}}},select:{value:{prop:function(e,t){e.value=t||""},output:me.output}}};function be(e,t){if(f[e])return ye;var n=Ne[e];n||(n=Ne[e]={});var r=n[t];return r||(r=we[t]||me,n[t]=r),r}function Ee(e,t,n){var r=e.option.target;return r&&r.id===t.id&&(!n||r.prop===n)}function Ce(e,t,n){for(var r=e,i=0;null!=r&&i<t.paths.length;i++)r=r[ne(t.paths[i],n)];return r}function Re(e,t){this.id=o(),this.parent=t,this.raw=e||{},this.listeners=[]}function Te(e,t,n,r){if(0===t.length)return n;var i,o=ne(t[0],r);if(e instanceof Array){var s=+o;return(i=e.slice(0))[isNaN(s)?o:s]=Te(e[s],t.slice(1),n,r),i}if("object"==typeof e){for(var a in i={},e)a!==o&&(i[a]=e[a]);return i[o]=Te(e[o]||{},t.slice(1),n,r),i}return e}function _e(e,t,n,r){var i=Ce(this,e.expr.name,n);if("function"==typeof i){var o=new Re({$event:t?r:r||window.event},n);i.apply(this,re(e.expr.args,o,this))}}Re.prototype.checkDataTypes=function(){this.typeChecker&&this.typeChecker(this.raw)},Re.prototype.setTypeChecker=function(e){this.typeChecker=e},Re.prototype.listen=function(e){"function"==typeof e&&this.listeners.push(e)},Re.prototype.unlisten=function(e){for(var t=this.listeners.length;t--;)e&&this.listeners[t]!==e||this.listeners.splice(t,1)},Re.prototype.fire=function(e){if(!(e.option.silent||e.option.silence||e.option.quiet))for(var t=0;t<this.listeners.length;t++)this.listeners[t].call(this,e)},Re.prototype.get=function(e,t){var n=this.raw;if(!e)return n;var r=(e=q(e)).paths;if(t=t||this,null==(n=n[r[0].value])&&this.parent)n=this.parent.get(e,t);else for(var i=1,o=r.length;null!=n&&i<o;i++)n=n[r[i].value||ne(r[i],t)];return n},Re.prototype.set=function(e,t,n){n=n||{};var r=e;if((e=q(e)).type!==L.ACCESSOR)throw new Error("[SAN ERROR] Invalid Expression in Data set: "+r);(this.get(e)!==t||n.force)&&(se.clear(),this.raw=Te(this.raw,e.paths,t,this),this.fire({type:pe,expr:e,value:t,option:n}),this.checkDataTypes())},Re.prototype.merge=function(e,t,n){n=n||{};var r=e;if((e=q(e)).type!==L.ACCESSOR)throw new Error("[SAN ERROR] Invalid Expression in Data merge: "+r);if("object"!=typeof this.get(e))throw new Error("[SAN ERROR] Merge Expects a Target of Type 'object'; got "+typeof oldValue);if("object"!=typeof t)throw new Error("[SAN ERROR] Merge Expects a Source of Type 'object'; got "+typeof t);for(var i in t)this.set(P(e.paths.concat([{type:L.STRING,value:i}])),t[i],n)},Re.prototype.apply=function(e,t,n){var r=e;if((e=q(e)).type!==L.ACCESSOR)throw new Error("[SAN ERROR] Invalid Expression in Data apply: "+r);var i=this.get(e);if("function"!=typeof t)throw new Error("[SAN ERROR] Invalid Argument's Type in Data apply: Expected Function but got "+typeof t);this.set(e,t(i),n)},Re.prototype.splice=function(e,t,n){n=n||{};var r=e;if((e=q(e)).type!==L.ACCESSOR)throw new Error("[SAN ERROR] Invalid Expression in Data splice: "+r);var i=this.get(e),o=[];if(i instanceof Array){var s=t[0];if(s<0||s>i.length)return;var a=i.slice(0);o=a.splice.apply(a,t),se.clear(),this.raw=Te(this.raw,e.paths,a,this),this.fire({expr:e,type:le,index:s,deleteCount:o.length,value:o,insertions:t.slice(2),option:n})}return this.checkDataTypes(),o},Re.prototype.push=function(e,t,n){var r=this.get(e);if(r instanceof Array)return this.splice(e,[r.length,0,t],n),r.length+1},Re.prototype.pop=function(e,t){var n=this.get(e);if(n instanceof Array){var r=n.length;if(r)return this.splice(e,[r-1,1],t)[0]}},Re.prototype.shift=function(e,t){return this.splice(e,[0,1],t)[0]},Re.prototype.unshift=function(e,t,n){var r=this.get(e);if(r instanceof Array)return this.splice(e,[0,0,t],n),r.length+1},Re.prototype.removeAt=function(e,t,n){this.splice(e,[t,1],n)},Re.prototype.remove=function(e,t,n){var r=this.get(e);if(r instanceof Array)for(var i=r.length;i--;)if(r[i]===t){this.splice(e,[i,1],n);break}};var Se=u("div,span,input,button,textarea,form,label,dl,dt,dd,ul,ol,li,a,b,u,h1,h2,h3,h4,h5,h6"),Ae="undefined"!=typeof window;function Oe(e,t,n){t&&(n?t.insertBefore(e,n):t.appendChild(e))}function ke(e){if("undefined"!=typeof window&&"undefined"!=typeof navigator&&window.document&&function(e){return/^(col|colgroup|frameset|style|table|tbody|tfoot|thead|tr|select)$/i.test(e.tagName)}(e)){var t='[SAN WARNING] set html for element "'+e.tagName+'" may cause an error in old IE';if("object"!=typeof console||!console.warn)throw new Error(t);console.warn(t)}}function Ie(e){for(var t=[],n=e;n;){switch(n.nodeType){case fe.ELEM:t.unshift(n.tagName);break;case fe.IF:t.unshift("if");break;case fe.FOR:t.unshift("for["+n.anode.directives.for.raw+"]");break;case fe.SLOT:t.unshift("slot["+(n.name||"default")+"]");break;case fe.TPL:t.unshift("template");break;case fe.CMPT:t.unshift("component["+(n.subTag||"root")+"]");break;case fe.TEXT:t.unshift("text")}n=n.parent}return t}function Le(e,t,n,r,i){if(this.aNode=e,this.owner=t,this.scope=n,this.parent=r,i){var o=i.current;if(o)switch(o.nodeType){case 8:if("s-text"===o.data)for(this.sel=o,o.data=this.id,i.goNext();;){if(!(o=i.current))throw new Error("[SAN REVERSE ERROR] Text end flag not found. \nPaths: "+Ie(this).join(" > "));if(a="text",8===(s=o).nodeType&&s.data==="/s-"+a){this.el=o,i.goNext(),o.data=this.id;break}i.goNext()}break;case 3:i.goNext(),this.aNode.textExpr.original||(this.el=o)}else this.el=document.createTextNode(""),Oe(this.el,i.target,i.current)}var s,a}Le.prototype.nodeType=fe.TEXT,Le.prototype.attach=function(e,t){if(this.content=ne(this.aNode.textExpr,this.scope,this.owner),this.aNode.textExpr.original){this.sel=document.createComment(this.id),Oe(this.sel,e,t),this.el=document.createComment(this.id),Oe(this.el,e,t);var n=document.createElement("script");e.insertBefore(n,this.el),n.insertAdjacentHTML("beforebegin",this.content),e.removeChild(n)}else this.el=document.createTextNode(this.content),Oe(this.el,e,t)},Le.prototype.dispose=function(){this._prev=null,this.el=null,this.sel=null};var Pe=Ae&&("string"==typeof document.createTextNode("").textContent?"textContent":"data");function je(e,t){for(var n=0;n<e.length;n++){var r=e[n];if(!r.overview){var i=r.expr.paths;r.overview=i[0].value,i.length>1&&(r.extOverview=i[0].value+"."+i[1].value,r.wildOverview=i[0].value+".*")}if(t[r.overview]||r.wildOverview&&t[r.wildOverview]||r.extOverview&&t[r.extOverview])return!0}}function Me(e){this.raw=[],this.index=0,this.target=e;for(var t,n=e.firstChild;n;){switch(t=n.nextSibling,n.nodeType){case 3:/^\s*$/.test(n.data||n.textContent)?v(n):this.raw.push(n);break;case 1:case 8:this.raw.push(n)}n=t}this.current=this.raw[this.index],this.next=this.raw[this.index+1]}function Ue(e,t,n,r,i){if(this.aNode=e,this.owner=t,this.scope=n,this.parent=r,this.lifeCycle=ue.start,this.children=[],this._elFns=[],this.parentComponent=r.nodeType===fe.CMPT?r:r.parentComponent,this.id=o(),xt(this),this._toPhase("inited"),i){var s=i.current;if(!s)throw new Error("[SAN REVERSE ERROR] Element not found. \nPaths: "+Ie(this).join(" > "));if(1!==s.nodeType)throw new Error("[SAN REVERSE ERROR] Element type not match, expect 1 but "+s.nodeType+".\nPaths: "+Ie(this).join(" > "));if(s.tagName.toLowerCase()!==this.tagName)throw new Error("[SAN REVERSE ERROR] Element tagName not match, expect "+this.tagName+" but meat "+s.tagName.toLowerCase()+".\nPaths: "+Ie(this).join(" > "));this.el=s,i.goNext(),tt(this),this._attached()}}function De(e){e.el=null,e.sel=null,e.owner=null,e.scope=null,e.aNode=null,e.parent=null,e.parentComponent=null,e.children=null,e._toPhase&&e._toPhase("disposed"),e._ondisposed&&e._ondisposed()}function Be(e,t,n,r){var i=n.nodeType===fe.CMPT,o=i?n:n.childOwner||n.owner;if(r=r||(i?n.data:n.childScope||n.scope),e.textExpr)return new Le(e,o,r,n,t);if(e.directives.if)return new Ze(e,o,r,n,t);if(e.directives.for)return new Ke(e,o,r,n,t);if(Se[e.tagName])return new Ue(e,o,r,n,t);switch(e.tagName){case"slot":return new Ye(e,o,r,n,t);case"template":return new et(e,o,r,n,t);default:var s=o.getComponentType(e);if(s)return new s({aNode:e,owner:o,scope:r,parent:n,subTag:e.tagName,reverseWalker:t})}return new Ue(e,o,r,n,t)}function Fe(e,t,n){for(var r=e.children,i=r&&r.length;i--;)r[i].dispose(t,n)}function $e(e,t){for(var n=0,r=e.children.length;n<r;n++)e.children[n]._update(t)}function qe(e){this.lifeCycle=ue[e]||this.lifeCycle}function Ge(e,t,n){var r=t.nodeType===fe.CMPT,i=r?t:t.childOwner||t.owner;if(n=n||(r?t.data:t.childScope||t.scope),e.textExpr)return new Le(e,i,n,t);if(e.directives.if)return new Ze(e,i,n,t);if(e.directives.for)return new Ke(e,i,n,t);if(Se[e.tagName])return new Ue(e,i,n,t);switch(e.tagName){case"slot":return new Ye(e,i,n,t);case"template":return new et(e,i,n,t);default:var o=i.getComponentType(e);if(o)return new o({aNode:e,owner:i,scope:n,parent:t,subTag:e.tagName})}return new Ue(e,i,n,t)}function He(e,t){this.sel=document.createComment(this.id),Oe(this.sel,e,t),function(e,t,n){t=t||e.el;for(var r=e.aNode.children,i=0;i<r.length;i++){var o=Ge(r[i],e);e.children.push(o),o.attach(t,n)}}(this,e,t),this.el=document.createComment(this.id),Oe(this.el,e,t),this._toPhase("attached")}function Ye(e,t,n,r,i){var s=k();this.aNode=s,this.owner=t,this.scope=n,this.parent=r,this.parentComponent=r.nodeType===fe.CMPT?r:r.parentComponent,this.id=o(),this.lifeCycle=ue.start,this.children=[],this.nameBind=de(e,"name"),this.nameBind&&(this.isNamed=!0,this.name=ne(this.nameBind.expr,this.scope,this.owner));var a,c=t.givenSlots;c&&(a=this.isNamed?c.named[this.name]:c.noname),a&&(this.isInserted=!0),s.children=a||e.children.slice(0);var l=this;s.vars=e.vars;var h={};p(s.vars,function(e){l.isScoped=!0,h[e.name]=ne(e.expr,n,t)}),this.isInserted&&(this.childOwner=t.owner,this.childScope=t.scope),this.isScoped&&(this.childScope=new Re(h,this.childScope||this.scope)),t.slotChildren.push(this),i&&(this.sel=document.createComment(this.id),Oe(this.sel,i.target,i.current),p(this.aNode.children,function(e){l.children.push(Be(e,i,l))}),this.el=document.createComment(this.id),Oe(this.el,i.target,i.current),this._toPhase("attached"))}function ze(e,t){var n={};for(var r in t=t||{},e)t[r]||(n[r]=e[r]);return n}function Xe(e){Fe(this,e,1),e||v(this.el),De(this)}function We(){this.el=this.el||document.createComment(this.id)}function Ve(e,t,n){this.id=o(),this.parent=e.scope,this.raw={},this.listeners=[],this.directive=e.aNode.directives.for,this.raw[this.directive.item.raw]=t,this.raw[this.directive.index.raw]=n}function Je(e,t,n){var r=new Ve(e,t,n);return Ge(e.itemANode,e,r)}function Ke(e,t,n,r,i){if(this.aNode=e,this.owner=t,this.scope=n,this.parent=r,this.parentComponent=r.nodeType===fe.CMPT?r:r.parentComponent,this.id=o(),this.children=[],this.itemANode=k({children:e.children,props:e.props,events:e.events,tagName:e.tagName,vars:e.vars,hotspot:e.hotspot,directives:ze(e.directives,{for:1})}),this.param=e.directives.for,i){var s=this;p(ne(this.param.value,this.scope,this.owner),function(e,t){var n=new Ve(s,e,t),r=Be(s.itemANode,i,s,n);s.children.push(r)}),this._create(),Oe(this.el,i.target,i.current)}}function Qe(e){return k({children:e.children,props:e.props,events:e.events,tagName:e.tagName,vars:e.vars,hotspot:e.hotspot,directives:ze(e.directives,{if:1,else:1,elif:1})})}function Ze(e,t,n,r,i){if(this.aNode=e,this.owner=t,this.scope=n,this.parent=r,this.parentComponent=r.nodeType===fe.CMPT?r:r.parentComponent,this.id=o(),this.children=[],this.cond=this.aNode.directives.if.value,i){if(ne(this.cond,this.scope,this.owner))this.elseIndex=-1,this.children[0]=Be(Qe(e),i,this);else{var s=this;p(e.elses,function(e,t){var n=e.directives.elif;if(!n||n&&ne(n.value,s.scope,s.owner))return s.elseIndex=t,s.children[0]=Be(Qe(e),i,s),!1})}this._create(),Oe(this.el,i.target,i.current)}}function et(e,t,n,r,i){if(this.aNode=e,this.owner=t,this.scope=n,this.parent=r,this.parentComponent=r.nodeType===fe.CMPT?r:r.parentComponent,this.id=o(),this.lifeCycle=ue.start,this.children=[],i){this.sel=document.createComment(this.id),Oe(this.sel,i.target,i.current);var s=this;p(this.aNode.children,function(e){s.children.push(Be(e,i,s))}),this.el=document.createComment(this.id),Oe(this.el,i.target,i.current),this._toPhase("attached")}}function tt(e){if(!e.aNode.directives.html){var t=new Me(e.el);p(e.aNode.children,function(n){e.children.push(Be(n,t,e))})}}function nt(e,t,n){var r=n.name;be(e.tagName,r).prop(e.el,t,r,e,n)}Le.prototype._update=function(e){if(!this.aNode.textExpr.value)for(var t=e?e.length:0;t--;)if(ce(e[t].expr,this.aNode.textExpr,this.scope)){var n=ne(this.aNode.textExpr,this.scope,this.owner);if(n!==this.content)if(this.content=n,this.aNode.textExpr.original){for(var r=this.sel.nextSibling,i=this.el.parentNode;r!==this.el;){var o=r;r=r.nextSibling,v(o)}ke(i);var s=document.createElement("script");i.insertBefore(s,this.el),s.insertAdjacentHTML("beforebegin",n),i.removeChild(s)}else this.el[Pe]=n;return}},Me.prototype.goNext=function(){this.current=this.raw[++this.index],this.next=this.raw[this.index+1]},Ue.prototype.nodeType=fe.ELEM,Ue.prototype.attach=at,Ue.prototype.detach=lt,Ue.prototype.dispose=ht,Ue.prototype._create=ot,Ue.prototype._toPhase=qe,Ue.prototype._onEl=ut,Ue.prototype._doneLeave=function(){this.leaveDispose?this.lifeCycle.disposed||wt(this,this.disposeNoDetach,this.disposeNoTransition):this.lifeCycle.attached&&(v(this.el),this._toPhase("detached"))},Ue.prototype._update=function(e){if(je(e,this.aNode.hotspot.data)){for(var t=this,n=this.aNode.hotspot.dynamicProps,r=0,i=n.length;r<i;r++)for(var o=n[r],s=0,a=e.length;s<a;s++){var c=e[s];if(!Ee(c,this,o.name)&&(ce(c.expr,o.expr,this.scope)||o.hintExpr&&ce(c.expr,o.hintExpr,this.scope))){nt(this,ne(o.expr,this.scope,this.owner),o);break}}var l=this.aNode.directives.html;l?p(e,function(e){if(ce(e.expr,l.value,t.scope))return ke(t.el),t.el.innerHTML=ne(l.value,t.scope,t.owner),!1}):$e(this,e)}},Ue.prototype._attached=gt,Ye.prototype.nodeType=fe.SLOT,Ye.prototype.dispose=function(e,t){this.childOwner=null,this.childScope=null,Fe(this,e,t),De(this)},Ye.prototype.attach=He,Ye.prototype._toPhase=qe,Ye.prototype._update=function(e,t){var n=this;if(this.nameBind&&ne(this.nameBind.expr,this.scope,this.owner)!==n.name)return this.owner._notifyNeedReload(),!1;if(t)this.isInserted&&$e(this,e);else if(this.isScoped){p(this.aNode.vars,function(e){n.childScope.set(e.name,ne(e.expr,n.scope,n.owner))});var r=[];p(e,function(e){n.isInserted||r.push(e),p(n.aNode.vars,function(t){var i=t.name,o=ce(e.expr,t.expr,n.scope);o<1||(e.type!==le?r.push({type:pe,expr:P([{type:L.STRING,value:i}]),value:n.childScope.get(i),option:e.option}):2===o&&r.push({expr:P([{type:L.STRING,value:i}]),type:le,index:e.index,deleteCount:e.deleteCount,value:e.value,insertions:e.insertions,option:e.option}))})}),$e(this,r)}else this.isInserted||$e(this,e)},Ve.prototype.exprResolve=function(e){var t=this.directive,n=this;function r(e){return e.type===L.ACCESSOR&&e.paths[0].value===t.item.paths[0].value?P(t.value.paths.concat({type:L.NUMBER,value:n.get(t.index)},e.paths.slice(1))):e}var i=[];return p((e=r(e)).paths,function(e){i.push(e.type===L.ACCESSOR&&e.paths[0].value===t.index.paths[0].value?{type:L.NUMBER,value:n.get(t.index)}:r(e))}),P(i)},c(Ve,Re),p(["set","remove","unshift","shift","push","pop","splice"],function(e){Ve.prototype["_"+e]=Re.prototype[e],Ve.prototype[e]=function(t){t=this.exprResolve(q(t)),se.clear(),this.parent[e].apply(this.parent,[t].concat(Array.prototype.slice.call(arguments,1)))}}),Ke.prototype.nodeType=fe.FOR,Ke.prototype._create=We,Ke.prototype.dispose=Xe,Ke.prototype.attach=function(e,t){this._create(),Oe(this.el,e,t);for(var n=this.el||e.firstChild,r=ne(this.param.value,this.scope,this.owner),i=r&&r.length||0,o=0;o<i;o++){var s=Je(this,r[o],o);this.children.push(s),s.attach(e,n)}},Ke.prototype.detach=function(){this.lifeCycle.attached&&(Fe(this),this.children=[],v(this.el),this.lifeCycle=ue.detached)},Ke.prototype._update=function(e){var t=this,n=this.aNode.directives.transition,r=this.children.length,i=new Array(r);function o(e){for(var t=0,n=i.length;t<n;t++)(i[t]=i[t]||[]).push(e)}for(var s,a=[],c=this.el.parentNode,p=c.firstChild,l=c.lastChild,h=r>0&&p===this.children[0].el&&(l===this.el||l===this.children[r-1].el)||0===r&&p===this.el&&l===this.el,u=ne(this.param.value,this.scope,this.owner),f=u&&u.length||0,d=0,v=e.length;d<v;d++){var m=e[d],y=ce(m.expr,this.param.value,this.scope);if(y){if(y>2){var g=m.expr.paths,w=this.param.value.paths.length,x=+ne(g[w],this.scope,this.owner);isNaN(x)?o(m):(m={type:m.type,expr:P(this.param.item.paths.concat(g.slice(w+1))),value:m.value,index:m.index,deleteCount:m.deleteCount,insertions:m.insertions,option:m.option},(i[x]=i[x]||[]).push(m),this.children[x]&&(m.type===le?this.children[x].scope._splice(m.expr,[].concat(m.index,m.deleteCount,m.insertions),{silent:1}):this.children[x].scope._set(m.expr,m.value,{silent:1})))}else if(m.type!==le){r>f&&(a=a.concat(this.children.slice(f)),i=i.slice(0,f),this.children=this.children.slice(0,f));for(var N=0;N<f;N++)(i[N]=i[N]||[]).push({type:pe,option:m.option,expr:P(this.param.item.paths.slice(0)),value:u[N]}),y<2&&i[N].push(m),this.children[N]?this.children[N].scope._set(this.param.item,u[N],{silent:1}):this.children[N]=0;s=1}else if(2===y&&m.type===le&&!s){var b=m.index,E=m.deleteCount,C=m.insertions.length,R=C-E;if(R){var T={type:pe,option:m.option,expr:this.param.index};for(N=b+E;N<this.children.length;N++)(i[N]=i[N]||[]).push(T),this.children[N]&&this.children[N].scope._set(T.expr,N-E+C,{silent:1})}for(var _=E;_--;){if(_<C)(i[N=b+_]=i[N]||[]).push({type:pe,option:m.option,expr:P(this.param.item.paths.slice(0)),value:m.insertions[_]}),this.children[N]&&this.children[N].scope._set(this.param.item,m.insertions[_],{silent:1})}if(R<0)a=a.concat(this.children.splice(b+C,-R)),i.splice(b+C,-R);else if(R>0){var S=[b+E,0].concat(new Array(R));this.children.splice.apply(this.children,S),i.splice.apply(i,S)}}}else o(m)}var A=this.children.length;if(A!==r){var O={type:pe,option:{},expr:P(this.param.value.paths.concat({type:L.STRING,value:"length"}))};je([O],this.aNode.hotspot.data)&&o(O)}this._doCreateAndUpdate=D;var k=!n&&h&&0===A,I=0;for(N=0;N<a.length;N++){var j=a[N];j?(j._ondisposed=U,j.dispose(k,k)):U()}if(k){var M=c.cloneNode(!1);c.parentNode.replaceChild(M,c),this.el=document.createComment(this.id),M.appendChild(this.el)}function U(){++I===a.length&&D===t._doCreateAndUpdate&&D()}function D(){if(t._doCreateAndUpdate=null,!k){var e=t.el;if(0===r&&h)for(var n=0;n<A;n++)t.children[n]=Je(t,u[n],n),t.children[n].attach(c,e);else{var o=-1;for(n=0;n<A;n++){var s=t.children[n];if(s)i[n]&&s._update(i[n]);else{if(o<n)for(o=n+1,e=null;o<A;){var a=t.children[o];if(a){e=a.sel||a.el;break}o++}t.children[n]=Je(t,u[n],n),t.children[n].attach(c,e||t.el)}}}}}0===a.length&&D()},Ze.prototype.nodeType=fe.IF,Ze.prototype._create=We,Ze.prototype.dispose=Xe,Ze.prototype.attach=function(e,t){var n,r,i=this;ne(this.cond,this.scope,this.owner)?(r=Ge(Qe(i.aNode),i),n=-1):p(i.aNode.elses,function(e,t){var o=e.directives.elif;if(!o||o&&ne(o.value,i.scope,i.owner))return r=Ge(Qe(e),i),n=t,!1}),r&&(i.children[0]=r,r.attach(e,t),i.elseIndex=n),this._create(),Oe(this.el,e,t)},Ze.prototype._update=function(e){var t,n=this,r=n.aNode;if(ne(this.cond,this.scope,this.owner)?t=-1:p(n.aNode.elses,function(e,i){var o=e.directives.elif;if(o&&ne(o.value,n.scope,n.owner)||!o)return t=i,r=e,!1}),t===n.elseIndex)$e(n,e);else{var i=n.children[0];n.children=[],i?(i._ondisposed=o,i.dispose()):o(),n.elseIndex=t}function o(){if(void 0!==t){var e=Ge(Qe(r),n);e.attach(n.el.parentNode,n.el),n.children[0]=e}}},et.prototype.nodeType=fe.TPL,et.prototype.attach=He,et.prototype.dispose=function(e,t){Fe(this,e,t),De(this)},et.prototype._toPhase=qe,et.prototype._update=function(e){$e(this,e)};var rt,it={class:1,style:1,id:1};function ot(){if(!this.lifeCycle.created){this.lifeCycle=ue.painting;var e=this.nodeType===fe.CMPT,t=this.aNode.hotspot.sourceNode,n=this.aNode.props;t?(this.el=t.cloneNode(),n=this.aNode.hotspot.dynamicProps):this.el=d(this.tagName);for(var r=0,i=n.length;r<i;r++){var o=n[r],s=e?ne(o.expr,this.data,this):ne(o.expr,this.scope,this.owner);!s&&it[o.name]||nt(this,s,o)}this._toPhase("created")}}function st(e,t,n){if(e._create(),Oe(e.el,t,n),!e._contentReady){var r=e.aNode.directives.html;if(r)e.el.innerHTML=ne(r.value,e.scope,e.owner);else for(var i=e.aNode.children,o=0;o<i.length;o++){var s=Ge(i[o],e);e.children.push(s),s.attach(e.el)}e._contentReady=1}}function at(e,t){this.lifeCycle.attached||(st(this,e,t),this._attached())}function ct(e){var t,n=e.nodeType===fe.CMPT?e.givenANode:e.aNode,r=n&&n.directives.transition,i=e.owner;return r&&i&&"function"==typeof(t=Ce(i,r.value.name))&&(t=t.apply(i,re(r.value.args,e.scope,i))),t||e.transition}function pt(e){if(!e.lifeCycle.leaving)if(e.disposeNoTransition)e._doneLeave();else{var t=ct(e);t&&t.leave?(e._toPhase("leaving"),t.leave(e.el,function(){e._doneLeave()})):e._doneLeave()}}function lt(){pt(this)}function ht(e,t){this.leaveDispose=1,this.disposeNoDetach=e,this.disposeNoTransition=t,pt(this)}function ut(e,t,n){"function"==typeof t&&(n=!!n,this._elFns.push([e,t,n]),h(this.el,e,t,n))}function ft(e,t){var n=!0,r=t;if(p(e.expr.name.paths,function(e){return!!e.value&&(r=r[e.value],n=!!r)}),!n){var i=[];p(e.expr.name.paths,function(e){i.push(e.value)});var o="[SAN WARNING] "+e.name+' listen fail,"'+i.join(".")+'" not exist';if("object"!=typeof console||!console.warn)throw new Error(o);console.warn(o)}}function dt(){this.composing&&(this.composing=0,E(this,"input"))}function vt(){this.composing=1}function mt(e,t){be(this.tagName,e.name).output(this,e,t)}function yt(e,t,n){var r=l(mt,e,t,n);return function(e){this.composing||r(e)}}function gt(){this._toPhase("created");for(var e=this.nodeType===fe.CMPT,t=e?this.data:this.scope,n=this.aNode.hotspot.xProps,r=0,i=n.length;r<i;r++){var o=n[r];switch(o.name){case"value":switch(this.tagName){case"input":case"textarea":Ae&&window.CompositionEvent&&(this._onEl("change",dt),this._onEl("compositionstart",vt),this._onEl("compositionend",dt)),this._onEl("oninput"in this.el?"input":"propertychange",yt(this,o,t));break;case"select":this._onEl("change",l(mt,this,o,t))}break;case"checked":switch(this.tagName){case"input":switch(this.el.type){case"checkbox":case"radio":this._onEl("click",l(mt,this,o,t))}}}}var a=e?this.aNode.events.concat(this.nativeEvents):this.aNode.events;for(r=0,i=a.length;r<i;r++){var c=a[r],p=e?this:this.owner;c.modifier.native&&(p=p.owner,t=this.scope||p.data),ft(c,p),this._onEl(c.name,l(_e,p,c,0,t),c.modifier.capture)}if(this._toPhase("attached"),this._isInitFromEl)this._isInitFromEl=!1;else{var h=ct(this);h&&h.enter&&h.enter(this.el,s)}}function wt(e){Fe(e,1,1);for(var t,n,r,i,o=e._elFns.length;o--;){var s=e._elFns[o];t=e.el,n=s[0],r=s[1],i=s[2],t.addEventListener?t.removeEventListener(n,r,i):t.detachEvent("on"+n,r)}e._elFns=null,e.disposeNoDetach&&e.parent||v(e.el),e._toPhase&&e._toPhase("detached"),De(e)}function xt(e){e.tagName=e.tagName||e.aNode.tagName||"div",b&&e.tagName.indexOf("-")>0&&(e.tagName="div")}function Nt(e,t){Ae&&rt&&rt.debug&&window.__san_devtool__&&window.__san_devtool__.emit(e,t)}function bt(e){e=e||{},this.lifeCycle=ue.start,this.children=[],this._elFns=[],this.listeners={},this.slotChildren=[];var t=this.constructor;this.filters=this.filters||t.filters||{},this.computed=this.computed||t.computed||{},this.messages=this.messages||t.messages||{},this.subTag=e.subTag,Ct(t),function(e){var t=[];function n(e,n){var r=t.length;p(t,function(t,i){n&&i===r-1||p(e,function(e){t.hotspot.data[e]=1})})}!function e(r){if(!r.hotspot){if(t.push(r),r.textExpr)r.hotspot={data:{}},n(Rt(r.textExpr));else{var i;for(var o in Ae&&r.tagName&&!/^(template|slot|select|input|option)$/i.test(r.tagName)&&(i=d(r.tagName)),r.hotspot={data:{},dynamicProps:[],xProps:[],props:{},sourceNode:i},p(r.vars,function(e){n(Rt(e.expr))}),p(r.props,function(e){n(Rt(e.expr))}),r.directives){var s=r.directives[o];n(Rt(s.value),"html"!==o)}if(p(r.elses,function(t){e(t)}),p(r.children,function(t){e(t)}),p(r.props,function(e,t){r.hotspot.props[e.name]=t,"id"===e.name?(e.id=!0,r.hotspot.idProp=e,r.hotspot.dynamicProps.push(e)):null!=e.expr.value?i&&be(r.tagName,e.name).prop(i,e.expr.value,e.name,r):(e.x&&r.hotspot.xProps.push(e),r.hotspot.dynamicProps.push(e))}),"option"===r.tagName&&!de(r,"value")&&r.children[0]){var a={name:"value",expr:r.children[0].textExpr};r.props.push(a),r.hotspot.dynamicProps.push(a),r.hotspot.props.value=r.props.length-1}}t.pop()}}(e.prototype.aNode)}(t);var n=this,r=t.prototype.aNode;n.givenANode=e.aNode,n.givenNamedSlotBinds=[],n.givenSlots={named:{}},this.owner=e.owner,this.scope=e.scope,this.el=e.el;var i,s,c=e.parent;if(c&&(this.parent=c,this.parentComponent=c.nodeType===fe.CMPT?c:c&&c.parentComponent),this.id=o(),this.el){var h=this.el.firstChild;if(3===h.nodeType&&(h=h.nextSibling),h&&8===h.nodeType){var u=h.data.match(/^\s*s-data:([\s\S]+)?$/);if(u){var f=u[1];e.data=new Function("return "+f.replace(/^[\s\n]*/,""))(),h.previousSibling&&v(h.previousSibling),v(h)}}}this.nativeEvents=[],this.givenANode&&(this._createGivenSlots(),p(this.givenANode.events,function(t){t.modifier.native?n.nativeEvents.push(t):(ft(t,e.owner),n.on(t.name,l(_e,e.owner,t,1,e.scope),t))}),this.tagName=r.tagName||n.givenANode.tagName,this.binds=(i=this.givenANode.props,s=[],p(i,function(e){s.push({name:I(e.name),expr:e.expr,x:e.x,raw:e.raw})}),s)),this._toPhase("compiled"),this.data=new Re(a("function"==typeof this.initData&&this.initData()||{},e.data)),xt(this),p(this.binds,function(e){if(J(e),n.scope){var t=ne(e.expr,n.scope,n.owner);void 0!==t&&n.data.set(e.name,t)}});var m=this.dataTypes||t.dataTypes;if(m){var y=function(e,t){return function(n){for(var r in e)if(e.hasOwnProperty(r)){var i=e[r];if("function"!=typeof i)throw new Error("[SAN ERROR] "+t+":"+r+" is invalid; it must be a function, usually from san.DataTypes");i(n,r,t,r)}}}(m,this.subTag||this.name||t.name);this.data.setTypeChecker(y),this.data.checkDataTypes()}for(var g in this.computedDeps={},this.computed)this.computedDeps[g]||this._calcComputed(g);this.dataChanger||(this.dataChanger=l(this._dataChanger,this),this.data.listen(this.dataChanger)),this._toPhase("inited"),this.el&&(tt(this),this._attached());var w=e.reverseWalker;if(w){var x=w.current;x&&1===x.nodeType&&(this.el=x,w.goNext()),tt(this),this._attached()}}function Et(e){if("function"==typeof e)return e;if("object"!=typeof e)throw new Error("[SAN FATAL] param must be a plain object.");function t(e){bt.call(this,e)}return t.prototype=e,c(t,bt),t}function Ct(e){var t=e.prototype;if(!t.hasOwnProperty("_cmptReady")){t.components=e.components||t.components||{};var n=t.components;for(var r in n){var i=n[r];"object"==typeof i?n[r]=Et(i):"self"===i&&(n[r]=e)}t._cmptReady=1}if(!t.hasOwnProperty("aNode")){t.aNode=k();var o=e.template||t.template;if(o){var s=ee(o,{trimWhitespace:t.trimWhitespace||e.trimWhitespace,delimiters:t.delimiters||e.delimiters}),a=s.children[0];if(1!==s.children.length||a.textExpr)throw new Error("[SAN FATAL] template must have a root element.");t.aNode=a,"template"===a.tagName&&(a.tagName=null);for(var c={class:{name:"class",expr:W('{{class | _class | _sep(" ")}}')},style:{name:"style",expr:W('{{style | _style | _sep(";")}}')},id:{name:"id",expr:W("{{id}}")}},p=a.props.length;p--;){var l=a.props[p],h=c[l.name];h&&(a.props.splice(p,1),c[l.name]=l,"id"!==l.name&&(l.expr.segs.push(h.expr.segs[0]),l.expr.value=null))}a.props.push(c.class,c.style,c.id)}}}function Rt(e){var t=[];function n(e){p(e,function(e){t=t.concat(Rt(e))})}switch(e.type){case L.ACCESSOR:var r=e.paths;t.push(r[0].value),r.length>1&&t.push(r[0].value+"."+(r[1].value||"*")),n(r.slice(1));break;case L.UNARY:return Rt(e.expr);case L.TEXT:case L.BINARY:case L.TERTIARY:n(e.segs);break;case L.INTERP:t=Rt(e.expr),p(e.filters,function(e){n(e.name.paths),n(e.args)})}return t}Nt.start=function(e){rt=e,Nt("san",e)},bt.prototype.getComponentType=function(e){return this.components[e.tagName]},bt.prototype._createGivenSlots=function(){var e=this;e.givenSlots.named={},e.givenANode&&e.scope&&p(e.givenANode.children,function(t){var n,r=!t.textExpr&&de(t,"slot");if(r){!e.givenSlotInited&&e.givenNamedSlotBinds.push(r);var i=ne(r.expr,e.scope,e.owner);(n=e.givenSlots.named[i])||(n=e.givenSlots.named[i]=[])}else e.givenSlotInited||(n=e.givenSlots.noname)||(n=e.givenSlots.noname=[]);n&&n.push(t)}),e.givenSlotInited=!0},bt.prototype.nodeType=fe.CMPT,bt.prototype.nextTick=w,bt.prototype._callHook=bt.prototype._toPhase=function(e){this.lifeCycle[e]||(this.lifeCycle=ue[e]||this.lifeCycle,"function"==typeof this[e]&&this[e](),Nt("comp-"+e,this))},bt.prototype.on=function(e,t,n){"function"==typeof t&&(this.listeners[e]||(this.listeners[e]=[]),this.listeners[e].push({fn:t,declaration:n}))},bt.prototype.un=function(e,t){for(var n=this.listeners[e],r=n&&n.length;r--;)t&&t!==n[r].fn||n.splice(r,1)},bt.prototype.fire=function(e,t){var n=this;p(this.listeners[e],function(e){e.fn.call(n,t)})},bt.prototype._calcComputed=function(e){var t=this.computedDeps[e];t||(t=this.computedDeps[e]={}),this.data.set(e,this.computed[e].call({data:{get:l(function(n){if(!n)throw new Error("[SAN ERROR] call get method in computed need argument");return t[n]||(t[n]=1,this.computed[n]&&this._calcComputed(n),this.watch(n,function(){this._calcComputed(e)})),this.data.get(n)},this)}}))},bt.prototype.dispatch=function(e,t){for(var n=this.parentComponent;n;){var r=n.messages[e]||n.messages["*"];if("function"==typeof r){r.call(n,{target:this,value:t,name:e});break}n=n.parentComponent}},bt.prototype.slot=function(e){var t=[],n=this;return function r(i){p(i,function(i){i.nodeType===fe.SLOT&&i.owner===n?(i.isNamed&&i.name===e||!i.isNamed&&!e)&&t.push(i):r(i.children)})}(this.children),t},bt.prototype.ref=function(e){var t,n=this;function r(i){p(i,function(i){return function(i){if(i.nodeType===fe.TEXT)return;if(i.owner===n){var o;switch(i.nodeType){case fe.ELEM:(o=i.aNode.directives.ref)&&ne(o.value,i.scope,n)===e&&(t=i.el);break;case fe.CMPT:(o=i.givenANode.directives.ref)&&ne(o.value,i.scope,n)===e&&(t=i)}!t&&r(i.slotChildren)}!t&&r(i.children)}(i),!t})}return r(this.children),t},bt.prototype._update=function(e){if(!this.lifeCycle.disposed){var t=this,n=!1;if(this._notifyNeedReload=function(){n=!0},e)if(p(e,function(e){var r=e.expr;p(t.binds,function(n){var i,o=n.name,s=n.expr;!Ee(e,t,o)&&(i=ce(r,s,t.scope))&&(i>2&&(o=P([{type:L.STRING,value:o}].concat(r.paths.slice(s.paths.length))),s=r),t.data.set(o,ne(s,t.scope,t.owner),{target:{id:t.owner.id}}))}),p(t.givenNamedSlotBinds,function(e){return!(n=n||ce(r,e.expr,t.scope))})}),n)this._createGivenSlots(),this._repaintChildren();else for(var r=this.slotChildren.length;r--;){var i=this.slotChildren[r];i.lifeCycle.disposed?this.slotChildren.splice(r,1):i.isInserted&&i._update(e,1)}var o=this.dataChanges;o&&(this.dataChanges=null,p(this.aNode.hotspot.dynamicProps,function(e){p(o,function(n){if(ce(n.expr,e.expr,t.data)||e.hintExpr&&ce(n.expr,e.hintExpr,t.data))return nt(t,ne(e.expr,t.data,t),e),!1})}),$e(this,o),n&&(this._createGivenSlots(),this._repaintChildren()),this._toPhase("updated"),this.owner&&(this._updateBindxOwner(o),this.owner._update())),this._notifyNeedReload=null}},bt.prototype._updateBindxOwner=function(e){var t=this;this.owner&&p(e,function(e){p(t.binds,function(n){var r=e.expr;if(n.x&&!Ee(e,t.owner)&&ce(r,q(n.name),t.data)){var i=n.expr;r.paths.length>1&&(i=P(n.expr.paths.concat(r.paths.slice(1)))),t.scope.set(i,ne(r,t.data,t),{target:{id:t.id,prop:n.name}})}})})},bt.prototype._repaintChildren=function(){Fe(this,0,1),this.children=[],this._contentReady=0,this.slotChildren=[],st(this)},bt.prototype._dataChanger=function(e){this.lifeCycle.painting||this.lifeCycle.created?(this.dataChanges||(w(this._update,this),this.dataChanges=[]),this.dataChanges.push(e)):this.lifeCycle.inited&&this.owner&&this._updateBindxOwner([e])},bt.prototype.watch=function(e,t){var n=q(e);this.data.listen(l(function(e){ce(e.expr,n,this.data)&&t.call(this,ne(n,this.data,this),e)},this))},bt.prototype.dispose=ht,bt.prototype._doneLeave=function(){this.leaveDispose?this.lifeCycle.disposed||(this.slotChildren=null,this.data.unlisten(),this.dataChanger=null,this.dataChanges=null,wt(this,this.disposeNoDetach,this.disposeNoTransition),this.listeners=null,this.givenANode=null,this.givenSlots=null,this.givenNamedSlotBinds=null):this.lifeCycle.attached&&(v(this.el),this._toPhase("detached"))},bt.prototype._attached=gt,bt.prototype.attach=at,bt.prototype.detach=lt,bt.prototype._create=ot,bt.prototype._onEl=ut;var Tt={version:"3.5.7",debug:!0,Component:bt,defineComponent:Et,compileComponent:Ct,parseTemplate:ee,parseExpr:q,ExprType:L,LifeCycle:ue,NodeType:fe,nextTick:w,Data:Re,evalExpr:ne,inherits:c,DataTypes:A};e.exports=Tt,Nt.start(Tt)}()}).call(this,n(13).setImmediate)},function(e,t,n){var r,i,o={};n(10),(r=n(5))&&r.__esModule&&Object.keys(r).length>1&&console.warn("[san-loader] src\\app.san: named exports in *.san files are ignored."),i=n(4);var s={};r&&(s=r.__esModule?r.default:r),i&&(s.template=i);var a=n(2).defineComponent(s);e.exports=a,e.exports.__esModule&&(e.exports=e.exports.default),a.computed||(a.computed={}),Object.keys(o).forEach(function(e){var t=o[e];a.computed[e]=function(){return t}})},function(e,t){e.exports='\n<div class="hello">{{msg}}</div>\n'},function(e,t,n){"use strict";n.r(t),t.default={initData:()=>({msg:"hello world"})}},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var i,o=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(o)?e:(i=0===o.indexOf("//")?o:0===o.indexOf("/")?n+o:r+o.replace(/^\.\//,""),"url("+JSON.stringify(i)+")")})}},function(e,t,n){var r,i,o={},s=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===i&&(i=r.apply(this,arguments)),i}),a=function(e){var t={};return function(e){if("function"==typeof e)return e();if(void 0===t[e]){var n=function(e){return document.querySelector(e)}.call(this,e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}}(),c=null,p=0,l=[],h=n(6);function u(e,t){for(var n=0;n<e.length;n++){var r=e[n],i=o[r.id];if(i){i.refs++;for(var s=0;s<i.parts.length;s++)i.parts[s](r.parts[s]);for(;s<r.parts.length;s++)i.parts.push(g(r.parts[s],t))}else{var a=[];for(s=0;s<r.parts.length;s++)a.push(g(r.parts[s],t));o[r.id]={id:r.id,refs:1,parts:a}}}}function f(e,t){for(var n=[],r={},i=0;i<e.length;i++){var o=e[i],s=t.base?o[0]+t.base:o[0],a={css:o[1],media:o[2],sourceMap:o[3]};r[s]?r[s].parts.push(a):n.push(r[s]={id:s,parts:[a]})}return n}function d(e,t){var n=a(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=l[l.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),l.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var i=a(e.insertInto+" "+e.insertAt.before);n.insertBefore(t,i)}}function v(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=l.indexOf(e);t>=0&&l.splice(t,1)}function m(e){var t=document.createElement("style");return void 0===e.attrs.type&&(e.attrs.type="text/css"),y(t,e.attrs),d(e,t),t}function y(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function g(e,t){var n,r,i,o;if(t.transform&&e.css){if(!(o=t.transform(e.css)))return function(){};e.css=o}if(t.singleton){var s=p++;n=c||(c=m(t)),r=N.bind(null,n,s,!1),i=N.bind(null,n,s,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",y(t,e.attrs),d(e,t),t}(t),r=function(e,t,n){var r=n.css,i=n.sourceMap,o=void 0===t.convertToAbsoluteUrls&&i;(t.convertToAbsoluteUrls||o)&&(r=h(r));i&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */");var s=new Blob([r],{type:"text/css"}),a=e.href;e.href=URL.createObjectURL(s),a&&URL.revokeObjectURL(a)}.bind(null,n,t),i=function(){v(n),n.href&&URL.revokeObjectURL(n.href)}):(n=m(t),r=function(e,t){var n=t.css,r=t.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),i=function(){v(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else i()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=s()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=f(e,t);return u(n,t),function(e){for(var r=[],i=0;i<n.length;i++){var s=n[i];(a=o[s.id]).refs--,r.push(a)}e&&u(f(e,t),t);for(i=0;i<r.length;i++){var a;if(0===(a=r[i]).refs){for(var c=0;c<a.parts.length;c++)a.parts[c]();delete o[a.id]}}}};var w,x=(w=[],function(e,t){return w[e]=t,w.filter(Boolean).join("\n")});function N(e,t,n,r){var i=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=x(t,i);else{var o=document.createTextNode(i),s=e.childNodes;s[t]&&e.removeChild(s[t]),s.length?e.insertBefore(o,s[t]):e.appendChild(o)}}},function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var i=(s=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(s))))+" */"),o=r.sources.map(function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"});return[n].concat(o).concat([i]).join("\n")}var s;return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},i=0;i<this.length;i++){var o=this[i][0];"number"==typeof o&&(r[o]=!0)}for(i=0;i<e.length;i++){var s=e[i];"number"==typeof s[0]&&r[s[0]]||(n&&!s[2]?s[2]=n:n&&(s[2]="("+s[2]+") and ("+n+")"),t.push(s))}},t}},function(e,t,n){(e.exports=n(8)(!0)).push([e.i,"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.hello {\n    color: blue;\n}\n","",{version:3,sources:["F:/ife/mvvm/src/app.san?7bd641ba"],names:[],mappings:";;;;;;;;;;;;;;;AAeA;IACA,YAAA;CACA",file:"app.san",sourcesContent:["<template>\r\n    <div class=\"hello\">{{msg}}</div>\r\n</template>\r\n\r\n<script>\r\n    export default {\r\n        initData () {\r\n            return {\r\n                msg: 'hello world'\r\n            };\r\n        }\r\n    }\r\n<\/script>\r\n\r\n<style>\r\n    .hello {\r\n        color: blue;\r\n    }\r\n</style>"],sourceRoot:""}])},function(e,t,n){var r=n(9);"string"==typeof r&&(r=[[e.i,r,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};n(7)(r,i);r.locals&&(e.exports=r.locals)},function(e,t){var n,r,i=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function a(e){if(n===setTimeout)return setTimeout(e,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(e){n=o}try{r="function"==typeof clearTimeout?clearTimeout:s}catch(e){r=s}}();var c,p=[],l=!1,h=-1;function u(){l&&c&&(l=!1,c.length?p=c.concat(p):h=-1,p.length&&f())}function f(){if(!l){var e=a(u);l=!0;for(var t=p.length;t;){for(c=p,p=[];++h<t;)c&&c[h].run();h=-1,t=p.length}c=null,l=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===s||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function d(e,t){this.fun=e,this.array=t}function v(){}i.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];p.push(new d(e,t)),1!==p.length||l||a(f)},d.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=v,i.addListener=v,i.once=v,i.off=v,i.removeListener=v,i.removeAllListeners=v,i.emit=v,i.prependListener=v,i.prependOnceListener=v,i.listeners=function(e){return[]},i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(e,t,n){(function(e,t){!function(e,n){"use strict";if(!e.setImmediate){var r,i,o,s,a,c=1,p={},l=!1,h=e.document,u=Object.getPrototypeOf&&Object.getPrototypeOf(e);u=u&&u.setTimeout?u:e,"[object process]"==={}.toString.call(e.process)?r=function(e){t.nextTick(function(){d(e)})}:!function(){if(e.postMessage&&!e.importScripts){var t=!0,n=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=n,t}}()?e.MessageChannel?((o=new MessageChannel).port1.onmessage=function(e){d(e.data)},r=function(e){o.port2.postMessage(e)}):h&&"onreadystatechange"in h.createElement("script")?(i=h.documentElement,r=function(e){var t=h.createElement("script");t.onreadystatechange=function(){d(e),t.onreadystatechange=null,i.removeChild(t),t=null},i.appendChild(t)}):r=function(e){setTimeout(d,0,e)}:(s="setImmediate$"+Math.random()+"$",a=function(t){t.source===e&&"string"==typeof t.data&&0===t.data.indexOf(s)&&d(+t.data.slice(s.length))},e.addEventListener?e.addEventListener("message",a,!1):e.attachEvent("onmessage",a),r=function(t){e.postMessage(s+t,"*")}),u.setImmediate=function(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),n=0;n<t.length;n++)t[n]=arguments[n+1];var i={callback:e,args:t};return p[c]=i,r(c),c++},u.clearImmediate=f}function f(e){delete p[e]}function d(e){if(l)setTimeout(d,0,e);else{var t=p[e];if(t){l=!0;try{!function(e){var t=e.callback,r=e.args;switch(r.length){case 0:t();break;case 1:t(r[0]);break;case 2:t(r[0],r[1]);break;case 3:t(r[0],r[1],r[2]);break;default:t.apply(n,r)}}(t)}finally{f(e),l=!1}}}}}("undefined"==typeof self?void 0===e?this:e:self)}).call(this,n(1),n(11))},function(e,t,n){(function(e){var r=void 0!==e&&e||"undefined"!=typeof self&&self||window,i=Function.prototype.apply;function o(e,t){this._id=e,this._clearFn=t}t.setTimeout=function(){return new o(i.call(setTimeout,r,arguments),clearTimeout)},t.setInterval=function(){return new o(i.call(setInterval,r,arguments),clearInterval)},t.clearTimeout=t.clearInterval=function(e){e&&e.close()},o.prototype.unref=o.prototype.ref=function(){},o.prototype.close=function(){this._clearFn.call(r,this._id)},t.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},t.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},t._unrefActive=t.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;t>=0&&(e._idleTimeoutId=setTimeout(function(){e._onTimeout&&e._onTimeout()},t))},n(12),t.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==e&&e.setImmediate||this&&this.setImmediate,t.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==e&&e.clearImmediate||this&&this.clearImmediate}).call(this,n(1))},function(e,t,n){"use strict";n.r(t);n(2);var r=n(0),i=n(3),o=n.n(i);console.log("hello webpack  San"),r.router.add({rule:"/",Component:o.a,target:"#app"}),r.router.start()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Nhbi1yb3V0ZXIvZGlzdC9zYW4tcm91dGVyLnNvdXJjZS5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zYW4vZGlzdC9zYW4uZGV2LmpzIiwid2VicGFjazovLy8uL3NyYy9hcHAuc2FuIiwid2VicGFjazovLy8uL3NyYy9hcHAuc2FuP2E0MDUiLCJ3ZWJwYWNrOi8vL2FwcC5zYW4iLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvdXJscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzIiwid2VicGFjazovLy8uL3NyYy9hcHAuc2FuP2UyMzEiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcC5zYW4/MTg3YSIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZXRpbW1lZGlhdGUvc2V0SW1tZWRpYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90aW1lcnMtYnJvd3NlcmlmeS9tYWluLmpzIiwid2VicGFjazovLy8uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJ2YWx1ZSIsIm4iLCJfX2VzTW9kdWxlIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiZmFjdG9yeSIsInNvdXJjZSIsImJhc2UiLCJzb3VyY2VMb2MiLCJfcGFyc2VVcmwyIiwiYmFzZUxvYyIsInNvdXJjZVBhdGgiLCJwYXRoIiwiaW5kZXhPZiIsInNvdXJjZVNlZ3MiLCJzcGxpdCIsImJhc2VTZWdzIiwicG9wIiwibGVuZ3RoIiwic2VnIiwicHVzaCIsInVuc2hpZnQiLCJqb2luIiwicXVlcnlTdHJpbmciLCJvYmoiLCJfcGFyc2VVcmwiLCJkZWZhdWx0IiwidXJsIiwicmVzdWx0IiwiaGFzaCIsInBhcmFtcyIsInF1ZXJ5IiwiaGFzaFN0YXJ0Iiwic2xpY2UiLCJxdWVyeVN0YXJ0IiwiZm9yRWFjaCIsInF1ZXJ5U2VnIiwiZXF1YWxJbmRleCIsImtleSIsImRlY29kZVVSSUNvbXBvbmVudCIsImNvbmNhdCIsIkV2ZW50VGFyZ2V0IiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIlR5cGVFcnJvciIsIl9jbGFzc0NhbGxDaGVjayIsInRoaXMiLCJvbiIsInR5cGUiLCJmbiIsIl9ldmVudExpc3RlbmVycyIsInVuIiwibGlzdGVuZXJzIiwibGVuIiwic3BsaWNlIiwiZmlyZSIsImFyZ3MiLCJFcnJvciIsIl9tYWluIiwiX3Jlc29sdmVVcmwiLCJfcmVzb2x2ZVVybDIiLCJ0ZW1wbGF0ZSIsImNsaWNrZXIiLCJlIiwiaHJlZiIsImRhdGEiLCJyb3V0ZXIiLCJsb2NhdG9yIiwicmVkaXJlY3QiLCJyZXBsYWNlIiwicHJldmVudERlZmF1bHQiLCJyZXR1cm5WYWx1ZSIsImNvbXB1dGVkIiwiY3VycmVudCIsIm1vZGUiLCJfZXZlbnRUYXJnZXQyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsImdldExvY2F0aW9uIiwiaW5kZXgiLCJsb2NhdGlvbiIsIkxvY2F0b3IiLCJfRXZlbnRUYXJnZXQiLCJfdGhpcyIsInNlbGYiLCJSZWZlcmVuY2VFcnJvciIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwicmVmZXJyZXIiLCJoYXNoQ2hhbmdlSGFuZGxlciIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsImNyZWF0ZSIsImNvbnN0cnVjdG9yIiwid3JpdGFibGUiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIl9pbmhlcml0cyIsInN0YXJ0Iiwid2luZG93IiwiYWRkRXZlbnRMaXN0ZW5lciIsImF0dGFjaEV2ZW50Iiwic3RvcCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJkZXRhY2hFdmVudCIsIm9wdGlvbnMiLCJhcmd1bWVudHMiLCJ1bmRlZmluZWQiLCJmb3JjZSIsImlzQ2hhbmdlZCIsInNpbGVudCIsInJlbG9hZCIsInBhdGhuYW1lIiwic2VhcmNoIiwicG9wc3RhdGVIYW5kbGVyIiwiaGlzdG9yeSIsInB1c2hTdGF0ZSIsImlzU3VwcG9ydCIsIkxpbmsiLCJSb3V0ZXIiLCJ2ZXJzaW9uIiwiX2hhc2gyIiwiX2h0bWwyIiwiX2xpbmsyIiwiX2VsZW1lbnRTZWxlY3RvcjIiLCJyb3V0ZUlEIiwiaXNDb21wb25lbnQiLCJDIiwibm9kZVR5cGUiLCJfdHlwZSIsIl9yZWYkbW9kZSIsInJvdXRlcyIsInJvdXRlQWxpdmVzIiwibG9jYXRvclJlZGlyZWN0SGFuZGxlciIsInJvdXRlSXRlbSIsIl9pIiwiaXRlbSIsIm1hdGNoIiwicnVsZSIsImV4ZWMiLCJrZXlzIiwiaiIsImNvbmZpZyIsInN0YXRlIiwibGlzdGVuZXJFdmVudCIsInJlc3VtZSIsIm5leHQiLCJzdXNwZW5kIiwiZG9OZXh0Iiwicm91dGVBY3Rpb24iLCJkb1JvdXRlIiwiY29tcG9uZW50IiwiZGlzcG9zZSIsInNldE1vZGUiLCJsaXN0ZW4iLCJsaXN0ZW5lciIsInVubGlzdGVuIiwiX3RoaXMyIiwiaXNVcGRhdGVBbGl2ZSIsInJvdXRlQWxpdmUiLCJpZCIsInNldCIsIl9jYWxsSG9vayIsIkNvbXBvbmVudCIsImF0dGFjaENtcHQiLCJ0aGVuIiwiQ21wdCIsImhhbmRsZXIiLCJ0YXJnZXQiLCJ0YXJnZXRFbCIsImF0dGFjaCIsImFkZCIsIl9jb25maWckdGFyZ2V0IiwicmVnVGV4dCIsIlJlZ0V4cCIsInRvU3RyaW5nIiwiaXNTdGFydGVkIiwidG9Mb3dlckNhc2UiLCJyZXN0YXJ0IiwiX3R5cGVvZiIsIlN5bWJvbCIsIml0ZXJhdG9yIiwic2VsZWN0b3IiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJnZXRFbGVtZW50QnlJZCIsImciLCJGdW5jdGlvbiIsImV2YWwiLCJzZXRJbW1lZGlhdGUiLCJyb290IiwiZ3VpZEluZGV4IiwiZ3VpZFByZWZpeCIsIkRhdGUiLCJnZXRUaW1lIiwiZ3VpZCIsImVtcHR5IiwiZXh0ZW5kIiwiaW5oZXJpdHMiLCJzdWJDbGFzc1Byb3RvIiwiRiIsImVhY2giLCJhcnJheSIsImJpbmQiLCJmdW5jIiwidGhpc0FyZyIsIm5hdGl2ZUJpbmQiLCJBcnJheSIsImFwcGx5IiwiZWwiLCJldmVudE5hbWUiLCJjYXB0dXJlIiwic3BsaXRTdHIyT2JqIiwic3ZnVGFncyIsImNyZWF0ZUVsIiwidGFnTmFtZSIsImNyZWF0ZUVsZW1lbnROUyIsImNyZWF0ZUVsZW1lbnQiLCJyZW1vdmVFbCIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsIm5leHRIYW5kbGVyIiwibmV4dFRhc2tzIiwiaXNOYXRpdmVQcm9taXNlIiwiUHJvbWlzZSIsInRlc3QiLCJuZXh0VGljayIsInRhc2tzIiwiTWVzc2FnZUNoYW5uZWwiLCJjaGFubmVsIiwicG9ydCIsInBvcnQyIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJwb3N0TWVzc2FnZSIsInJlc29sdmUiLCJzZXRUaW1lb3V0IiwiaWVWZXJzaW9uTWF0Y2giLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJpZSIsImllT2xkVGhhbjkiLCJ0cmlnZ2VyIiwiZXZlbnQiLCJjcmVhdGVFdmVudCIsImluaXRFdmVudCIsImRpc3BhdGNoRXZlbnQiLCJhY3RpdmVFbGVtZW50IiwiYXV0b0Nsb3NlVGFncyIsIkFOT05ZTU9VU19DTEFTU19OQU1FIiwiZ2V0RGF0YVR5cGUiLCJjcmVhdGVDaGFpbmFibGVDaGVja2VyIiwidmFsaWRhdGUiLCJjaGFpbmVkQ2hlY2tlciIsImlzUmVxdWlyZWQiLCJjaGVja1R5cGUiLCJkYXRhTmFtZSIsImNvbXBvbmVudE5hbWUiLCJmdWxsRGF0YU5hbWUiLCJkYXRhVmFsdWUiLCJkYXRhVHlwZSIsImNyZWF0ZVByaW1hcnlUeXBlQ2hlY2tlciIsIkRhdGFUeXBlcyIsIldhbGtlciIsImNyZWF0ZUFOb2RlIiwidGV4dEV4cHIiLCJkaXJlY3RpdmVzIiwicHJvcHMiLCJldmVudHMiLCJjaGlsZHJlbiIsImtlYmFiMmNhbWVsIiwiYWxwaGEiLCJ0b1VwcGVyQ2FzZSIsImFueSIsInN0cmluZyIsIm51bWJlciIsImJvb2wiLCJzeW1ib2wiLCJhcnJheU9mIiwiYXJyYXlJdGVtQ2hlY2tlciIsImluc3RhbmNlT2YiLCJleHBlY3RlZENsYXNzIiwiZGF0YVZhbHVlQ2xhc3NOYW1lIiwiZXhwZWN0ZWRDbGFzc05hbWUiLCJzaGFwZSIsInNoYXBlVHlwZXMiLCJzaGFwZUtleU5hbWUiLCJjaGVja2VyIiwib25lT2YiLCJleHBlY3RlZEVudW1WYWx1ZXMiLCJvbmVPZlR5cGUiLCJleHBlY3RlZEVudW1PZlR5cGVWYWx1ZXMiLCJvYmplY3RPZiIsInR5cGVDaGVja2VyIiwiZGF0YUtleU5hbWUiLCJleGFjdCIsInNlY3JldCIsImRhdGFWYWx1ZVR5cGUiLCJhbGxLZXlzIiwiY3VycmVudENvZGUiLCJjaGFyQ29kZSIsImN1dCIsImVuZCIsImdvIiwiZGlzdGFuY2UiLCJuZXh0Q29kZSIsImNoYXJDb2RlQXQiLCJnb1VudGlsIiwiY29kZSIsInJlZyIsImxhc3RJbmRleCIsIkV4cHJUeXBlIiwiU1RSSU5HIiwiTlVNQkVSIiwiQk9PTCIsIkFDQ0VTU09SIiwiSU5URVJQIiwiQ0FMTCIsIlRFWFQiLCJCSU5BUlkiLCJVTkFSWSIsIlRFUlRJQVJZIiwiY3JlYXRlQWNjZXNzb3IiLCJwYXRocyIsInJlYWRJZGVudCIsIndhbGtlciIsInJlYWRUZXJ0aWFyeUV4cHIiLCJjb25kaXRpb25hbCIsInJlYWRMb2dpY2FsT1JFeHByIiwiZXhwciIsInJlYWRMb2dpY2FsQU5ERXhwciIsInJlYWRSZWxhdGlvbmFsRXhwciIsIm9wZXJhdG9yIiwic2VncyIsInJlYWRFcXVhbGl0eUV4cHIiLCJ5ZXNFeHByIiwicmVhZEFjY2Vzc29yIiwiZmlyc3RTZWciLCJhY2Nlc3Nvckxvb3AiLCJyZWFkVW5hcnlFeHByIiwic3RhcnRDb2RlIiwic3RhcnRJbmRleCIsIndhbGtMb29wIiwibGl0ZXJhbCIsInJlYWRTdHJpbmciLCJyZWFkTnVtYmVyIiwicmVhZFBhcmVudGhlc2l6ZWRFeHByIiwicmVhZE11bHRpcGxpY2F0aXZlRXhwciIsInJlYWRBZGRpdGl2ZUV4cHIiLCJwYXJzZUV4cHIiLCJyYXciLCJyZWFkQ2FsbCIsImRlZmF1bHRBcmdzIiwiaWRlbnQiLCJwYXJzZUNhbGwiLCJwYXJzZUludGVycCIsImludGVycCIsImZpbHRlcnMiLCJjYWxsRXhwciIsIm9yaWdpbmFsIiwiRU5USVRZX0RFQ09ERV9NQVAiLCJsdCIsImd0IiwibmJzcCIsInF1b3QiLCJlbXNwIiwiZW5zcCIsInRoaW5zcCIsImNvcHkiLCJ6d25qIiwiendqIiwiYW1wIiwicmVnZXhwTGl0ZXJhbCIsInBhcnNlVGV4dCIsImRlbGltaXRlcnMiLCJleHByTWF0Y2giLCJleHByU3RhcnRSZWciLCJiZWZvcmVJbmRleCIsInB1c2hTdHJpbmdUb1NlZyIsInRleHQiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJwYXJzZUludCIsImRpcmVjdGl2ZVBhcnNlcnMiLCJmb3IiLCJyZWYiLCJpZiIsImVsaWYiLCJlbHNlIiwiaHRtbCIsInRyYW5zaXRpb24iLCJwb3N0UHJvcCIsInByb3AiLCJpbnRlZ3JhdGVBdHRyIiwiYU5vZGUiLCJyZWFsTmFtZSIsInByZWZpeCIsInByZWZpeEluZGV4IiwiY29sb25JbmRleCIsIm1vZGlmaWVyIiwicGFyc2VyIiwicGFyc2VEaXJlY3RpdmUiLCJpbnRlZ3JhdGVQcm9wIiwidmFycyIsInhNYXRjaCIsIngiLCJnZXRYUGF0aCIsInN0YWNrIiwiY3VycmVudFRhZ05hbWUiLCJwYXJzZVRlbXBsYXRlIiwidHJpbVdoaXRlc3BhY2UiLCJyb290Tm9kZSIsInRhZ01hdGNoIiwidGFnUmVnIiwiYXR0clJlZyIsImN1cnJlbnROb2RlIiwic3RhY2tJbmRleCIsImJlZm9yZUxhc3RJbmRleCIsInRhZ0VuZCIsInB1c2hUZXh0Tm9kZSIsImNsb3NlSW5kZXgiLCJhRWxlbWVudCIsInRhZ0Nsb3NlIiwibmV4dENoYXJDb2RlIiwiYXR0ck1hdGNoIiwicGFyZW50Q2hpbGRyZW5MZW4iLCJwYXJlbnRDaGlsZCIsImVsc2VzIiwidGJvZHlOb2RlIiwiREVGQVVMVF9GSUxURVJTIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiX2NsYXNzIiwiX3N0eWxlIiwiX3NlcCIsInNlcCIsImV2YWxFeHByIiwib3duZXIiLCJkYXRhQ2FjaGUiLCJsZWZ0VmFsdWUiLCJyaWdodFZhbHVlIiwiZmlsdGVyIiwiZmlsdGVyTmFtZSIsImV2YWxBcmdzIiwiYnVmIiwiZGF0YUNhY2hlU291cmNlIiwiZGF0YUNhY2hlQ2xlYXJseSIsImNsZWFyIiwiY2hhbmdlRXhwckNvbXBhcmVFeHBycyIsImNoYW5nZUV4cHIiLCJleHBycyIsImNoYW5nZUV4cHJDb21wYXJlIiwiY2hhbmdlUGF0aHMiLCJjaGFuZ2VMZW4iLCJwYXRoRXhwciIsIk1hdGgiLCJtYXgiLCJmaWx0ZXJSZXN1bHQiLCJEYXRhQ2hhbmdlVHlwZSIsImxpZmVDeWNsZU93bklzIiwiTGlmZUN5Y2xlIiwiY29tcGlsZWQiLCJpcyIsImluaXRlZCIsInBhaW50aW5nIiwiY3JlYXRlZCIsImF0dGFjaGVkIiwibGVhdmluZyIsImRldGFjaGVkIiwiZGlzcG9zZWQiLCJOb2RlVHlwZSIsIklGIiwiRk9SIiwiRUxFTSIsIkNNUFQiLCJTTE9UIiwiVFBMIiwiZ2V0QU5vZGVQcm9wIiwiaG90c3BvdCIsIkhUTUxfQVRUUl9QUk9QX01BUCIsInJlYWRvbmx5IiwiY2VsbHBhZGRpbmciLCJjZWxsc3BhY2luZyIsImNvbHNwYW4iLCJyb3dzcGFuIiwidmFsaWduIiwidXNlbWFwIiwiZnJhbWVib3JkZXIiLCJkZWZhdWx0RWxlbWVudFByb3BIYW5kbGVyIiwiZWxlbWVudCIsInByb3BOYW1lIiwic2V0QXR0cmlidXRlIiwib3V0cHV0IiwiYmluZEluZm8iLCJzdmdQcm9wSGFuZGxlciIsImJvb2xQcm9wSGFuZGxlciIsImRlZmF1bHRFbGVtZW50UHJvcEhhbmRsZXJzIiwic3R5bGUiLCJjc3NUZXh0IiwiY2xhc3MiLCJjbGFzc05hbWUiLCJzbG90IiwiZGlzYWJsZWQiLCJhdXRvZm9jdXMiLCJyZXF1aXJlZCIsImRyYWdnYWJsZSIsImFuYWxJbnB1dENoZWNrZXIiLCJjaGVja2JveCIsInJhZGlvIiwiYSIsImIiLCJlbGVtZW50UHJvcEhhbmRsZXJzIiwiaW5wdXQiLCJtdWx0aXBsZSIsImNoZWNrZWQiLCJvcGVyIiwiYmluZFZhbHVlIiwiYmluZFR5cGUiLCJzY29wZSIsImJpbmRDaGVja2VkIiwiaGludEV4cHIiLCJhbmFsSW5wdXRDaGVja2VkU3RhdGUiLCJvcHRpb24iLCJwYXJlbnRTZWxlY3QiLCJwYXJlbnQiLCJzZWxlY3RWYWx1ZSIsImlzT3B0aW9uU2VsZWN0ZWQiLCJzZWxlY3RlZCIsInNlbGVjdCIsImdldFByb3BIYW5kbGVyIiwiYXR0ck5hbWUiLCJ0YWdQcm9wSGFuZGxlcnMiLCJwcm9wSGFuZGxlciIsImlzRGF0YUNoYW5nZUJ5RWxlbWVudCIsImNoYW5nZSIsImNoYW5nZVRhcmdldCIsImZpbmRNZXRob2QiLCJuYW1lRXhwciIsIm1ldGhvZCIsIkRhdGEiLCJpbW11dGFibGVTZXQiLCJleHByUGF0aHMiLCJpc05hTiIsImV2ZW50RGVjbGFyYXRpb25MaXN0ZW5lciIsImV2ZW50QmluZCIsImlzQ29tcG9uZW50RXZlbnQiLCIkZXZlbnQiLCJjaGVja0RhdGFUeXBlcyIsInNldFR5cGVDaGVja2VyIiwic2lsZW5jZSIsInF1aWV0IiwiY2FsbGVlIiwiZXhwclJhdyIsIm1lcmdlIiwib2xkVmFsdWUiLCJuZXdBcnJheSIsImRlbGV0ZUNvdW50IiwiaW5zZXJ0aW9ucyIsInNoaWZ0IiwicmVtb3ZlQXQiLCJyZW1vdmUiLCJob3RUYWdzIiwiaXNCcm93c2VyIiwiaW5zZXJ0QmVmb3JlIiwicGFyZW50RWwiLCJiZWZvcmVFbCIsImFwcGVuZENoaWxkIiwid2FyblNldEhUTUwiLCJub1NldEhUTUwiLCJtZXNzYWdlIiwiY29uc29sZSIsIndhcm4iLCJnZXROb2RlUGF0aCIsIm5vZGUiLCJub2RlUGF0aHMiLCJub2RlUGFyZW50IiwiYW5vZGUiLCJzdWJUYWciLCJUZXh0Tm9kZSIsInJldmVyc2VXYWxrZXIiLCJzZWwiLCJnb05leHQiLCJjcmVhdGVUZXh0Tm9kZSIsImNvbnRlbnQiLCJjcmVhdGVDb21tZW50IiwidGVtcEZsYWciLCJpbnNlcnRBZGphY2VudEhUTUwiLCJfcHJldiIsInRleHRVcGRhdGVQcm9wIiwidGV4dENvbnRlbnQiLCJjaGFuZ2VzSXNJbkRhdGFSZWYiLCJjaGFuZ2VzIiwiZGF0YVJlZiIsIm92ZXJ2aWV3IiwiZXh0T3ZlcnZpZXciLCJ3aWxkT3ZlcnZpZXciLCJET01DaGlsZHJlbldhbGtlciIsImNoaWxkIiwiZmlyc3RDaGlsZCIsIm5leHRTaWJsaW5nIiwiRWxlbWVudCIsImxpZmVDeWNsZSIsIl9lbEZucyIsInBhcmVudENvbXBvbmVudCIsImVsZW1lbnRJbml0VGFnTmFtZSIsIl90b1BoYXNlIiwicmV2ZXJzZUVsZW1lbnRDaGlsZHJlbiIsIl9hdHRhY2hlZCIsIm5vZGVEaXNwb3NlIiwiX29uZGlzcG9zZWQiLCJjcmVhdGVSZXZlcnNlTm9kZSIsInBhcmVudElzQ29tcG9uZW50IiwiY2hpbGRPd25lciIsImNoaWxkU2NvcGUiLCJJZk5vZGUiLCJGb3JOb2RlIiwiU2xvdE5vZGUiLCJUZW1wbGF0ZU5vZGUiLCJDb21wb25lbnRUeXBlIiwiZ2V0Q29tcG9uZW50VHlwZSIsImVsZW1lbnREaXNwb3NlQ2hpbGRyZW4iLCJub0RldGFjaCIsIm5vVHJhbnNpdGlvbiIsImVsZW1lbnRVcGRhdGVDaGlsZHJlbiIsIl91cGRhdGUiLCJlbGVtZW50T3duVG9QaGFzZSIsImNyZWF0ZU5vZGUiLCJub2RlT3duT25seUNoaWxkcmVuQXR0YWNoIiwiYU5vZGVDaGlsZHJlbiIsImdlbkVsZW1lbnRDaGlsZHJlbiIsInJlYWxBTm9kZSIsIm5hbWVCaW5kIiwiaXNOYW1lZCIsImdpdmVuQ2hpbGRyZW4iLCJnaXZlblNsb3RzIiwibmFtZWQiLCJub25hbWUiLCJpc0luc2VydGVkIiwibWUiLCJpbml0RGF0YSIsInZhckl0ZW0iLCJpc1Njb3BlZCIsInNsb3RDaGlsZHJlbiIsImFOb2RlQ2hpbGQiLCJjbG9uZURpcmVjdGl2ZXMiLCJleGNsdWRlcyIsIm5vZGVPd25TaW1wbGVEaXNwb3NlIiwibm9kZU93bkNyZWF0ZVN0dW1wIiwiRm9ySXRlbURhdGEiLCJmb3JFbGVtZW50IiwiZGlyZWN0aXZlIiwiY3JlYXRlRm9yRGlyZWN0aXZlQ2hpbGQiLCJpdGVtU2NvcGUiLCJpdGVtQU5vZGUiLCJwYXJhbSIsIl9jcmVhdGUiLCJyaW5zZUNvbmRBTm9kZSIsImNvbmQiLCJlbHNlSW5kZXgiLCJlbHNlQU5vZGUiLCJoYW5kbGVQcm9wIiwic3RhcnRSZW1vdmVFbCIsInJlbW92ZVRhcmdldCIsImVsZW1lbnRPd25BdHRhY2giLCJkZXRhY2giLCJlbGVtZW50T3duRGV0YWNoIiwiZWxlbWVudE93bkRpc3Bvc2UiLCJlbGVtZW50T3duQ3JlYXRlIiwiX29uRWwiLCJlbGVtZW50T3duT25FbCIsIl9kb25lTGVhdmUiLCJsZWF2ZURpc3Bvc2UiLCJlbGVtZW50RGlzcG9zZSIsImRpc3Bvc2VOb0RldGFjaCIsImRpc3Bvc2VOb1RyYW5zaXRpb24iLCJkeW5hbWljUHJvcHMiLCJodG1sRGlyZWN0aXZlIiwiaW5uZXJIVE1MIiwiZWxlbWVudE93bkF0dGFjaGVkIiwiaXNGcm9tT3V0ZXIiLCJfbm90aWZ5TmVlZFJlbG9hZCIsInNjb3BlZENoYW5nZXMiLCJyZWxhdGlvbiIsImV4cHJSZXNvbHZlIiwicmVzb2x2ZUl0ZW0iLCJyZXNvbHZlZFBhdGhzIiwib3JpZ2luYWxVcGRhdGUiLCJvbGRDaGlsZHJlbkxlbiIsImNoaWxkcmVuQ2hhbmdlcyIsInB1c2hUb0NoaWxkcmVuQ2hhbmdlcyIsImlzQ2hpbGRyZW5SZWJ1aWxkIiwiZGlzcG9zZUNoaWxkcmVuIiwicGFyZW50Rmlyc3RDaGlsZCIsInBhcmVudExhc3RDaGlsZCIsImxhc3RDaGlsZCIsImlzT25seVBhcmVudENoaWxkIiwibmV3TGlzdCIsIm5ld0xlbiIsImNJbmRleCIsImNMZW4iLCJmb3JMZW4iLCJjaGFuZ2VJbmRleCIsIl9zcGxpY2UiLCJfc2V0IiwiY2hhbmdlU3RhcnQiLCJpbnNlcnRpb25zTGVuIiwibmV3Q291bnQiLCJpbmRleENoYW5nZSIsImRlbGV0ZUxlbiIsInNwbGljZUFyZ3MiLCJuZXdDaGlsZHJlbkxlbiIsImxlbmd0aENoYW5nZSIsIl9kb0NyZWF0ZUFuZFVwZGF0ZSIsImRvQ3JlYXRlQW5kVXBkYXRlIiwidmlvbGVudENsZWFyIiwiZGlzcG9zZWRDaGlsZENvdW50IiwiZGlzcG9zZUNoaWxkIiwiY2hpbGREaXNwb3NlZCIsInJlcGxhY2VOb2RlIiwiY2xvbmVOb2RlIiwicmVwbGFjZUNoaWxkIiwibmV4dENoaWxkIiwiY2hpbGRBTm9kZSIsIm5ld0NoaWxkIiwic2FuNGRldnRvb2wiLCJlbXB0eVByb3BXaGVuQ3JlYXRlIiwic291cmNlTm9kZSIsImVsZW1lbnRBdHRhY2giLCJfY29udGVudFJlYWR5IiwiZWxlbWVudEdldFRyYW5zaXRpb24iLCJnaXZlbkFOb2RlIiwiZWxlbWVudExlYXZlIiwibGVhdmUiLCJ3YXJuRXZlbnRMaXN0ZW5NZXRob2QiLCJ2YWxpZCIsImlucHV0T25Db21wb3NpdGlvbkVuZCIsImNvbXBvc2luZyIsImlucHV0T25Db21wb3NpdGlvblN0YXJ0IiwieFByb3BPdXRwdXRlciIsInhQcm9wIiwiaW5wdXRYUHJvcE91dHB1dGVyIiwib3V0cHV0ZXIiLCJ4UHJvcHMiLCJDb21wb3NpdGlvbkV2ZW50IiwibmF0aXZlRXZlbnRzIiwibmF0aXZlIiwiX2lzSW5pdEZyb21FbCIsImVudGVyIiwiZW1pdERldnRvb2wiLCJhcmciLCJkZWJ1ZyIsIl9fc2FuX2RldnRvb2xfXyIsImVtaXQiLCJjbGF6eiIsIm1lc3NhZ2VzIiwiY29tcGlsZUNvbXBvbmVudCIsIkNvbXBvbmVudENsYXNzIiwicmVjb3JkSG90c3BvdERhdGEiLCJyZWZzIiwibm90Q29udGVudERhdGEiLCJhbmFseXNlQU5vZGVIb3RzcG90IiwiYW5hbHlzZUV4cHJEYXRhSG90c3BvdCIsImlkUHJvcCIsInZhbHVlUHJvcCIsImNvbXBvbmVudFByZWhlYXQiLCJwcm90b0FOb2RlIiwiZ2l2ZW5OYW1lZFNsb3RCaW5kcyIsImJpbmRzIiwiZmlyc3RDb21tZW50Tm9kZSIsInN0dW1wTWF0Y2giLCJzdHVtcFRleHQiLCJwcmV2aW91c1NpYmxpbmciLCJfY3JlYXRlR2l2ZW5TbG90cyIsImRhdGFUeXBlcyIsImRhdGFUeXBlQ2hlY2tlciIsImRhdGFUeXBlTmFtZSIsImNyZWF0ZURhdGFUeXBlc0NoZWNrZXIiLCJjb21wdXRlZERlcHMiLCJfY2FsY0NvbXB1dGVkIiwiZGF0YUNoYW5nZXIiLCJfZGF0YUNoYW5nZXIiLCJkZWZpbmVDb21wb25lbnQiLCJwcm90byIsImNvbXBvbmVudHMiLCJjb21wb25lbnRDbGFzcyIsIl9jbXB0UmVhZHkiLCJ0cGwiLCJjb21wb25lbnRQcm9wRXh0cmEiLCJleHRyYSIsImFuYWx5c2VFeHBycyIsIm1haW4iLCJzbG90QmluZCIsImdpdmVuU2xvdEluaXRlZCIsInNsb3ROYW1lIiwiZGVjbGFyYXRpb24iLCJuYW1lTGlzdGVuZXJzIiwiY29tcHV0ZWRFeHByIiwid2F0Y2giLCJkaXNwYXRjaCIsInJlY2VpdmVyIiwiY2hpbGRyZW5UcmF2ZXJzYWwiLCJyZWZUYXJnZXQiLCJlbGVtZW50VHJhdmVyc2FsIiwibmVlZFJlbG9hZEZvclNsb3QiLCJiaW5kSXRlbSIsInNldEV4cHIiLCJ1cGRhdGVFeHByIiwiX3JlcGFpbnRDaGlsZHJlbiIsInNsb3RDaGlsZHJlbkxlbiIsInNsb3RDaGlsZCIsImRhdGFDaGFuZ2VzIiwiX3VwZGF0ZUJpbmR4T3duZXIiLCJ1cGRhdGVTY29wZUV4cHIiLCJkYXRhRXhwciIsInNhbiIsIl9fc2FuX3NjcmlwdF9fIiwiX19zYW5fdGVtcGxhdGVfXyIsIl9fc2FuX3N0eWxlc19fIiwiX19zYW5fcHJvdG9fXyIsIl9fc2FuX2V4cG9ydHNfXyIsIl9fd2VicGFja19leHBvcnRzX18iLCJtc2ciLCJjc3MiLCJiYXNlVXJsIiwicHJvdG9jb2wiLCJob3N0IiwiY3VycmVudERpciIsImZ1bGxNYXRjaCIsIm9yaWdVcmwiLCJuZXdVcmwiLCJ1bnF1b3RlZE9yaWdVcmwiLCJ0cmltIiwiJDEiLCJKU09OIiwic3RyaW5naWZ5IiwibWVtbyIsInN0eWxlc0luRG9tIiwiaXNPbGRJRSIsImFsbCIsImF0b2IiLCJnZXRFbGVtZW50Iiwic3R5bGVUYXJnZXQiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJzaW5nbGV0b24iLCJzaW5nbGV0b25Db3VudGVyIiwic3R5bGVzSW5zZXJ0ZWRBdFRvcCIsImZpeFVybHMiLCJhZGRTdHlsZXNUb0RvbSIsInN0eWxlcyIsImRvbVN0eWxlIiwicGFydHMiLCJhZGRTdHlsZSIsImxpc3RUb1N0eWxlcyIsImxpc3QiLCJuZXdTdHlsZXMiLCJwYXJ0IiwibWVkaWEiLCJzb3VyY2VNYXAiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJpbnNlcnRJbnRvIiwibGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AiLCJpbnNlcnRBdCIsImJlZm9yZSIsInJlbW92ZVN0eWxlRWxlbWVudCIsImlkeCIsImNyZWF0ZVN0eWxlRWxlbWVudCIsImF0dHJzIiwiYWRkQXR0cnMiLCJ1cGRhdGUiLCJ0cmFuc2Zvcm0iLCJzdHlsZUluZGV4IiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsIlVSTCIsImNyZWF0ZU9iamVjdFVSTCIsInJldm9rZU9iamVjdFVSTCIsIkJsb2IiLCJidG9hIiwibGluayIsInJlbCIsImNyZWF0ZUxpbmtFbGVtZW50IiwiYXV0b0ZpeFVybHMiLCJjb252ZXJ0VG9BYnNvbHV0ZVVybHMiLCJ1bmVzY2FwZSIsImJsb2IiLCJvbGRTcmMiLCJzdHlsZVNoZWV0IiwibmV3T2JqIiwiREVCVUciLCJtYXlSZW1vdmUiLCJ0ZXh0U3RvcmUiLCJyZXBsYWNlVGV4dCIsInJlcGxhY2VtZW50IiwiQm9vbGVhbiIsImNzc05vZGUiLCJjaGlsZE5vZGVzIiwidXNlU291cmNlTWFwIiwibWFwIiwiY3NzTWFwcGluZyIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZVJvb3QiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibWVkaWFRdWVyeSIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJuYW1lcyIsIm1hcHBpbmdzIiwiZmlsZSIsInNvdXJjZXNDb250ZW50IiwiaG1yIiwibG9jYWxzIiwiY2FjaGVkU2V0VGltZW91dCIsImNhY2hlZENsZWFyVGltZW91dCIsInByb2Nlc3MiLCJkZWZhdWx0U2V0VGltb3V0IiwiZGVmYXVsdENsZWFyVGltZW91dCIsInJ1blRpbWVvdXQiLCJmdW4iLCJjbGVhclRpbWVvdXQiLCJjdXJyZW50UXVldWUiLCJxdWV1ZSIsImRyYWluaW5nIiwicXVldWVJbmRleCIsImNsZWFuVXBOZXh0VGljayIsImRyYWluUXVldWUiLCJ0aW1lb3V0IiwicnVuIiwibWFya2VyIiwicnVuQ2xlYXJUaW1lb3V0IiwiSXRlbSIsIm5vb3AiLCJ0aXRsZSIsImJyb3dzZXIiLCJlbnYiLCJhcmd2IiwidmVyc2lvbnMiLCJhZGRMaXN0ZW5lciIsIm9uY2UiLCJvZmYiLCJyZW1vdmVMaXN0ZW5lciIsInJlbW92ZUFsbExpc3RlbmVycyIsInByZXBlbmRMaXN0ZW5lciIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJiaW5kaW5nIiwiY3dkIiwiY2hkaXIiLCJkaXIiLCJ1bWFzayIsImdsb2JhbCIsInJlZ2lzdGVySW1tZWRpYXRlIiwibWVzc2FnZVByZWZpeCIsIm9uR2xvYmFsTWVzc2FnZSIsIm5leHRIYW5kbGUiLCJ0YXNrc0J5SGFuZGxlIiwiY3VycmVudGx5UnVubmluZ0FUYXNrIiwiZG9jIiwiYXR0YWNoVG8iLCJnZXRQcm90b3R5cGVPZiIsImhhbmRsZSIsInJ1bklmUHJlc2VudCIsImltcG9ydFNjcmlwdHMiLCJwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzIiwib2xkT25NZXNzYWdlIiwiY2FuVXNlUG9zdE1lc3NhZ2UiLCJkb2N1bWVudEVsZW1lbnQiLCJzY3JpcHQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyYW5kb20iLCJjYWxsYmFjayIsInRhc2siLCJjbGVhckltbWVkaWF0ZSIsIlRpbWVvdXQiLCJjbGVhckZuIiwiX2lkIiwiX2NsZWFyRm4iLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJjbG9zZSIsInVucmVmIiwiZW5yb2xsIiwibXNlY3MiLCJfaWRsZVRpbWVvdXRJZCIsIl9pZGxlVGltZW91dCIsInVuZW5yb2xsIiwiX3VucmVmQWN0aXZlIiwiYWN0aXZlIiwiX29uVGltZW91dCIsIl9hcHBfc2FuX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18iLCJfYXBwX3Nhbl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fX2RlZmF1bHQiLCJsb2ciLCJzYW5fcm91dGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18iXSwibWFwcGluZ3MiOiJhQUNBLElBQUFBLEtBR0EsU0FBQUMsRUFBQUMsR0FHQSxHQUFBRixFQUFBRSxHQUNBLE9BQUFGLEVBQUFFLEdBQUFDLFFBR0EsSUFBQUMsRUFBQUosRUFBQUUsSUFDQUcsRUFBQUgsRUFDQUksR0FBQSxFQUNBSCxZQVVBLE9BTkFJLEVBQUFMLEdBQUFNLEtBQUFKLEVBQUFELFFBQUFDLElBQUFELFFBQUFGLEdBR0FHLEVBQUFFLEdBQUEsRUFHQUYsRUFBQUQsUUFLQUYs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QUFBd0csbUJBQ0EsSUFBQXd2QixLQUFBeHZCLGNBQ0E3SSxXQUFBNkksYUFDQWpOLEVBQUErOUIsZUFBQSxvQkFBQXQzQixXQUFBczNCLHFCQUNBLElBQUF0QixLQUFBc0IsZ0JBQ0EzNUIsV0FBQTI1QixzRkM5REFpQixFQUFBbC9CLEVBQUEsR0FBQW0vQixFQUFBbi9CLEVBQUFxQixFQUFBNjlCLEdBc0JBbmEsUUFBQXFhLElBQUEsc0JBR0FDLEVBQUEsT0FBQXB6QixLQUFZakMsS0FBQSxJQUFBeUIsVUFBQTB6QixFQUFBamUsRUFBQXBWLE9BQUEsU0FHWnV6QixFQUFBLE9BQUE3M0IiLCJmaWxlIjoiYXBwLmJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbiBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4gXHRcdFx0XHRnZXQ6IGdldHRlclxuIFx0XHRcdH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMTQpO1xuIiwiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoXCJzYW4tcm91dGVyXCIsIFtdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcInNhbi1yb3V0ZXJcIl0gPSBmYWN0b3J5KCk7XG5cdGVsc2Vcblx0XHRyb290W1wic2FuLXJvdXRlclwiXSA9IGZhY3RvcnkoKTtcbn0pKHRoaXMsIGZ1bmN0aW9uKCkge1xucmV0dXJuIC8qKioqKiovIChmdW5jdGlvbihtb2R1bGVzKSB7IC8vIHdlYnBhY2tCb290c3RyYXBcbi8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4vKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4vKioqKioqLyBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKVxuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG5cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdGk6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0bDogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRleHBvcnRzOiB7fVxuLyoqKioqKi8gXHRcdH07XG5cbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuLyoqKioqKi8gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbi8qKioqKiovIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbi8qKioqKiovIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0fVxuXG5cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4vKioqKioqLyBcdC8vIGlkZW50aXR5IGZ1bmN0aW9uIGZvciBjYWxsaW5nIGhhcm1vbnkgaW1wb3J0cyB3aXRoIHRoZSBjb3JyZWN0IGNvbnRleHRcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5pID0gZnVuY3Rpb24odmFsdWUpIHsgcmV0dXJuIHZhbHVlOyB9O1xuXG4vKioqKioqLyBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbi8qKioqKiovIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4vKioqKioqLyBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuLyoqKioqKi8gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuLyoqKioqKi8gXHRcdFx0XHRnZXQ6IGdldHRlclxuLyoqKioqKi8gXHRcdFx0fSk7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHR9O1xuXG4vKioqKioqLyBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuLyoqKioqKi8gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuLyoqKioqKi8gXHRcdHJldHVybiBnZXR0ZXI7XG4vKioqKioqLyBcdH07XG5cbi8qKioqKiovIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuLyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIi9kaXN0XCI7XG5cbi8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vKioqKioqLyBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDYpO1xuLyoqKioqKi8gfSlcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyAoW1xuLyogMCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzWydkZWZhdWx0J10gPSByZXNvbHZlVVJMO1xuXG52YXIgX3BhcnNlVXJsID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblxudmFyIF9wYXJzZVVybDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wYXJzZVVybCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxuLyoqXG4gKiDlsIYgVVJMIOS4reebuOWvuei3r+W+hOmDqOWIhuWxleW8gFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzb3VyY2Ug6KaB5bGV5byA55qEdXJsXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZSDlvZPliY3miYDlsZ7njq/looPnmoR1cmxcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZVVSTChzb3VyY2UsIGJhc2UpIHtcbiAgICB2YXIgc291cmNlTG9jID0gKDAsIF9wYXJzZVVybDJbJ2RlZmF1bHQnXSkoc291cmNlKTtcbiAgICB2YXIgYmFzZUxvYyA9ICgwLCBfcGFyc2VVcmwyWydkZWZhdWx0J10pKGJhc2UpO1xuXG4gICAgdmFyIHNvdXJjZVBhdGggPSBzb3VyY2VMb2MucGF0aDtcbiAgICBpZiAoc291cmNlUGF0aC5pbmRleE9mKCcvJykgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZTtcbiAgICB9XG5cbiAgICB2YXIgc291cmNlU2VncyA9IHNvdXJjZVBhdGguc3BsaXQoJy8nKTtcbiAgICB2YXIgYmFzZVNlZ3MgPSBiYXNlTG9jLnBhdGguc3BsaXQoJy8nKTtcbiAgICBiYXNlU2Vncy5wb3AoKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc291cmNlU2Vncy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgc2VnID0gc291cmNlU2Vnc1tpXTtcbiAgICAgICAgc3dpdGNoIChzZWcpIHtcbiAgICAgICAgICAgIGNhc2UgJy4uJzpcbiAgICAgICAgICAgICAgICBiYXNlU2Vncy5wb3AoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJy4nOlxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBiYXNlU2Vncy5wdXNoKHNlZyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoYmFzZVNlZ3NbMF0gIT09ICcnKSB7XG4gICAgICAgIGJhc2VTZWdzLnVuc2hpZnQoJycpO1xuICAgIH1cblxuICAgIHJldHVybiBiYXNlU2Vncy5qb2luKCcvJykgKyAoc291cmNlTG9jLnF1ZXJ5U3RyaW5nID8gJz8nICsgc291cmNlTG9jLnF1ZXJ5U3RyaW5nIDogJycpO1xufSAvKipcbiAgICogc2FuLXJvdXRlclxuICAgKiBDb3B5cmlnaHQgMjAxNyBCYWlkdSBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gICAqXG4gICAqIEBmaWxlIOWwhiBVUkwg5Lit55u45a+56Lev5b6E6YOo5YiG5bGV5byAXG4gICAqIEBhdXRob3IgZXJyb3JyaWtcbiAgICovXG5cbi8qKiovIH0sXG4vKiAxICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IHBhcnNlVVJMO1xuLyoqXG4gKiBzYW4tcm91dGVyXG4gKiBDb3B5cmlnaHQgMjAxNyBCYWlkdSBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogQGZpbGUg6Kej5p6QVVJMXG4gKiBAYXV0aG9yIGVycm9ycmlrXG4gKi9cblxuLyoqXG4gKiDop6PmnpBVUkzvvIzov5Tlm57ljIXlkKtwYXRo44CBcXVlcnnjgIFxdWVyeVN0cmluZ+eahOWvueixoVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwg6KaB6Kej5p6Q55qEdXJsXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cbmZ1bmN0aW9uIHBhcnNlVVJMKHVybCkge1xuICAgIHZhciByZXN1bHQgPSB7XG4gICAgICAgIGhhc2g6ICcnLFxuICAgICAgICBxdWVyeVN0cmluZzogJycsXG4gICAgICAgIHBhcmFtczoge30sXG4gICAgICAgIHF1ZXJ5OiB7fSxcbiAgICAgICAgcGF0aDogdXJsXG4gICAgfTtcblxuICAgIC8vIHBhcnNlIGhhc2hcbiAgICB2YXIgaGFzaFN0YXJ0ID0gcmVzdWx0LnBhdGguaW5kZXhPZignIycpO1xuICAgIGlmIChoYXNoU3RhcnQgPj0gMCkge1xuICAgICAgICByZXN1bHQuaGFzaCA9IHJlc3VsdC5wYXRoLnNsaWNlKGhhc2hTdGFydCArIDEpO1xuICAgICAgICByZXN1bHQucGF0aCA9IHJlc3VsdC5wYXRoLnNsaWNlKDAsIGhhc2hTdGFydCk7XG4gICAgfVxuXG4gICAgLy8gcGFyc2UgcXVlcnlcbiAgICB2YXIgcXVlcnkgPSByZXN1bHQucXVlcnk7XG4gICAgdmFyIHF1ZXJ5U3RhcnQgPSByZXN1bHQucGF0aC5pbmRleE9mKCc/Jyk7XG4gICAgaWYgKHF1ZXJ5U3RhcnQgPj0gMCkge1xuICAgICAgICByZXN1bHQucXVlcnlTdHJpbmcgPSByZXN1bHQucGF0aC5zbGljZShxdWVyeVN0YXJ0ICsgMSk7XG4gICAgICAgIHJlc3VsdC5wYXRoID0gcmVzdWx0LnBhdGguc2xpY2UoMCwgcXVlcnlTdGFydCk7XG5cbiAgICAgICAgcmVzdWx0LnF1ZXJ5U3RyaW5nLnNwbGl0KCcmJykuZm9yRWFjaChmdW5jdGlvbiAocXVlcnlTZWcpIHtcbiAgICAgICAgICAgIC8vIOiAg+iZkeWIsOacieWPr+iDveWboOS4uuacquWkhOeQhui9rOS5iemXrumimO+8jFxuICAgICAgICAgICAgLy8g5a+86Ie0dmFsdWXkuK3lrZjlnKgqKj0qKuWtl+espu+8jOWboOatpOS4jeS9v+eUqGBzcGxpdGDlh73mlbBcbiAgICAgICAgICAgIHZhciBlcXVhbEluZGV4ID0gcXVlcnlTZWcuaW5kZXhPZignPScpO1xuICAgICAgICAgICAgdmFyIHZhbHVlID0gJyc7XG4gICAgICAgICAgICBpZiAoZXF1YWxJbmRleCA+IDApIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHF1ZXJ5U2VnLnNsaWNlKGVxdWFsSW5kZXggKyAxKTtcbiAgICAgICAgICAgICAgICBxdWVyeVNlZyA9IHF1ZXJ5U2VnLnNsaWNlKDAsIGVxdWFsSW5kZXgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIga2V5ID0gZGVjb2RlVVJJQ29tcG9uZW50KHF1ZXJ5U2VnKTtcbiAgICAgICAgICAgIHZhbHVlID0gZGVjb2RlVVJJQ29tcG9uZW50KHZhbHVlKTtcblxuICAgICAgICAgICAgLy8g5bey57uP5a2Y5Zyo6L+Z5Liq5Y+C5pWw77yM5LiU5paw55qE5YC85LiN5Li656m65pe277yM5oqK5Y6f5p2l55qE5YC85Y+Y5oiQ5pWw57uEXG4gICAgICAgICAgICBpZiAocXVlcnkuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgICAgIC8qIGVzbGludC1kaXNhYmxlICovXG4gICAgICAgICAgICAgICAgcXVlcnlba2V5XSA9IFtdLmNvbmNhdChxdWVyeVtrZXldLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgLyogZXNsaW50LWRpc2FibGUgKi9cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcXVlcnlba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKioqLyB9LFxuLyogMiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbi8qKlxuICogc2FuLXJvdXRlclxuICogQ29weXJpZ2h0IDIwMTcgQmFpZHUgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIEBmaWxlIOaPkOS+m+S6i+S7tuebuOWFs+aTjeS9nOeahOWfuuexu1xuICogQGF1dGhvciBvdGFrdXN0YXksIGVycm9ycmlrXG4gKi9cblxudmFyIEV2ZW50VGFyZ2V0ID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEV2ZW50VGFyZ2V0KCkge1xuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRXZlbnRUYXJnZXQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOazqOWGjOS4gOS4quS6i+S7tuWkhOeQhuWHveaVsFxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUg5LqL5Lu255qE57G75Z6LXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbiB8IGJvb2xlYW59IGZuIOS6i+S7tueahOWkhOeQhuWHveaVsFxuICAgICAqL1xuICAgIEV2ZW50VGFyZ2V0LnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uIG9uKHR5cGUsIGZuKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy5fZXZlbnRMaXN0ZW5lcnMpIHtcbiAgICAgICAgICAgIHRoaXMuX2V2ZW50TGlzdGVuZXJzID0ge307XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMuX2V2ZW50TGlzdGVuZXJzW3R5cGVdKSB7XG4gICAgICAgICAgICB0aGlzLl9ldmVudExpc3RlbmVyc1t0eXBlXSA9IFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fZXZlbnRMaXN0ZW5lcnNbdHlwZV0ucHVzaChmbik7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIOazqOmUgOS4gOS4quS6i+S7tuWkhOeQhuWHveaVsFxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUg5LqL5Lu255qE57G75Z6L77yM5aaC5p6c5YC85Li6YCpg5LuF5Lya5rOo6ZSA6YCa6L+HYCpg5Li657G75Z6L5rOo5YaM55qE5LqL5Lu277yM5bm25LiN5Lya5bCG5omA5pyJ5LqL5Lu25rOo6ZSAXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2ZuXSDkuovku7bnmoTlpITnkIblh73mlbDvvIzml6DmraTlj4LmlbDliJnms6jplIBgdHlwZWDmjIflrprnsbvlnovnmoTmiYDmnInkuovku7blpITnkIblh73mlbBcbiAgICAgKi9cblxuXG4gICAgRXZlbnRUYXJnZXQucHJvdG90eXBlLnVuID0gZnVuY3Rpb24gdW4odHlwZSwgZm4pIHtcbiAgICAgICAgaWYgKCF0aGlzLl9ldmVudExpc3RlbmVycyB8fCAhdGhpcy5fZXZlbnRMaXN0ZW5lcnNbdHlwZV0pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghZm4pIHtcbiAgICAgICAgICAgIHRoaXMuX2V2ZW50TGlzdGVuZXJzW3R5cGVdID0gW107XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgbGlzdGVuZXJzID0gdGhpcy5fZXZlbnRMaXN0ZW5lcnNbdHlwZV07XG4gICAgICAgICAgICB2YXIgbGVuID0gbGlzdGVuZXJzLmxlbmd0aDtcblxuICAgICAgICAgICAgd2hpbGUgKGxlbi0tKSB7XG4gICAgICAgICAgICAgICAgaWYgKGxpc3RlbmVyc1tsZW5dID09PSBmbikge1xuICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lcnMuc3BsaWNlKGxlbiwgMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIOinpuWPkeaMh+Wumuexu+Wei+eahOS6i+S7tlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUg5LqL5Lu257G75Z6LXG4gICAgICogQHBhcmFtIHsqfSBbYXJnc10g5LqL5Lu25a+56LGhXG4gICAgICovXG5cblxuICAgIEV2ZW50VGFyZ2V0LnByb3RvdHlwZS5maXJlID0gZnVuY3Rpb24gZmlyZSh0eXBlLCBhcmdzKSB7XG4gICAgICAgIGlmICghdHlwZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBldmVudCB0eXBlIHNwZWNpZmllZCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGxpc3RlbmVycyA9IHRoaXMuX2V2ZW50TGlzdGVuZXJzICYmIHRoaXMuX2V2ZW50TGlzdGVuZXJzW3R5cGVdO1xuICAgICAgICBpZiAobGlzdGVuZXJzKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGxpc3RlbmVyc1tpXShhcmdzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gRXZlbnRUYXJnZXQ7XG59KCk7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IEV2ZW50VGFyZ2V0O1xuXG4vKioqLyB9LFxuLyogMyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfbWFpbiA9IF9fd2VicGFja19yZXF1aXJlX18oNik7XG5cbnZhciBfcmVzb2x2ZVVybCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbnZhciBfcmVzb2x2ZVVybDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZXNvbHZlVXJsKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG4vKipcbiAqIHNhbi1yb3V0ZXJcbiAqIENvcHlyaWdodCAyMDE3IEJhaWR1IEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBAZmlsZSDot6/nlLHpk77mjqXnmoQgU2FuIOe7hOS7tlxuICogQGF1dGhvciBlcnJvcnJpa1xuICovXG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IHtcbiAgICB0ZW1wbGF0ZTogJzxhIGhyZWY9XCJ7e2hyZWZ9fVwiXFxuICAgICAgICBvbmNsaWNrPVwicmV0dXJuIGZhbHNlO1wiXFxuICAgICAgICBvbi1jbGljaz1cImNsaWNrZXIoJGV2ZW50KVwiXFxuICAgICAgICB0YXJnZXQ9XCJ7e3RhcmdldH19XCJcXG4gICAgICAgIGNsYXNzPVwie3tjbGFzc319XCJcXG4gICAgICAgIHN0eWxlPVwie3tzdHlsZX19XCJcXG4gICAgICAgID5cXG4gICAgICAgIDxzbG90Pjwvc2xvdD5cXG4gICAgPC9hPicsXG5cbiAgICBjbGlja2VyOiBmdW5jdGlvbiBjbGlja2VyKGUpIHtcbiAgICAgICAgdmFyIGhyZWYgPSB0aGlzLmRhdGEuZ2V0KCdocmVmJyk7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBocmVmID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgX21haW4ucm91dGVyLmxvY2F0b3IucmVkaXJlY3QoaHJlZi5yZXBsYWNlKC9eIy8sICcnKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZS5wcmV2ZW50RGVmYXVsdCkge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZS5yZXR1cm5WYWx1ZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfSxcblxuXG4gICAgY29tcHV0ZWQ6IHtcbiAgICAgICAgaHJlZjogZnVuY3Rpb24gaHJlZigpIHtcbiAgICAgICAgICAgIHZhciB1cmwgPSB0aGlzLmRhdGEuZ2V0KCd0bycpO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB1cmwgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgaHJlZiA9ICgwLCBfcmVzb2x2ZVVybDJbJ2RlZmF1bHQnXSkodXJsLCBfbWFpbi5yb3V0ZXIubG9jYXRvci5jdXJyZW50KTtcbiAgICAgICAgICAgIGlmIChfbWFpbi5yb3V0ZXIubW9kZSA9PT0gJ2hhc2gnKSB7XG4gICAgICAgICAgICAgICAgaHJlZiA9ICcjJyArIGhyZWY7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBocmVmO1xuICAgICAgICB9XG4gICAgfVxufTtcblxuLyoqKi8gfSxcbi8qIDQgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2V2ZW50VGFyZ2V0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblxudmFyIF9ldmVudFRhcmdldDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9ldmVudFRhcmdldCk7XG5cbnZhciBfcmVzb2x2ZVVybCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbnZhciBfcmVzb2x2ZVVybDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZXNvbHZlVXJsKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9IC8qKlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogc2FuLXJvdXRlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQ29weXJpZ2h0IDIwMTcgQmFpZHUgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIEBmaWxlIGhhc2gg5qih5byP5Zyw5Z2A55uR5ZCs5ZmoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBAYXV0aG9yIGVycm9ycmlrXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cblxuLyoqXG4gKiDojrflj5blvZPliY1VUkxcbiAqXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGdldExvY2F0aW9uKCkge1xuICAgIC8vIEZpcmVmb3jkuItgbG9jYXRpb24uaGFzaGDlrZjlnKjoh6rliqjop6PnoIHnmoTmg4XlhrXvvIxcbiAgICAvLyDmr5TlpoJoYXNo55qE5YC85pivKiphYmMlM2RlZioq77yMXG4gICAgLy8g5ZyoRmlyZWZveOS4i+iOt+WPluS8muaIkOS4uioqYWJjPWRlZioqXG4gICAgLy8g5Li65LqG6YG/5YWN6L+Z5LiA5oOF5Ya177yM6ZyA6KaB5LuOYGxvY2F0aW9uLmhyZWZg5Lit5YiG6KejXG4gICAgdmFyIGluZGV4ID0gbG9jYXRpb24uaHJlZi5pbmRleE9mKCcjJyk7XG4gICAgdmFyIHVybCA9IGluZGV4IDwgMCA/ICcvJyA6IGxvY2F0aW9uLmhyZWYuc2xpY2UoaW5kZXggKyAxKSB8fCAnLyc7XG5cbiAgICByZXR1cm4gdXJsO1xufVxuXG4vKipcbiAqIGhhc2gg5qih5byP5Zyw5Z2A55uR5ZCs5ZmoXG4gKlxuICogQGNsYXNzXG4gKi9cblxudmFyIExvY2F0b3IgPSBmdW5jdGlvbiAoX0V2ZW50VGFyZ2V0KSB7XG4gICAgX2luaGVyaXRzKExvY2F0b3IsIF9FdmVudFRhcmdldCk7XG5cbiAgICAvKipcbiAgICAgKiDmnoTpgKDlh73mlbBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBMb2NhdG9yKCkge1xuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTG9jYXRvcik7XG5cbiAgICAgICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0V2ZW50VGFyZ2V0LmNhbGwodGhpcykpO1xuXG4gICAgICAgIF90aGlzLmN1cnJlbnQgPSBnZXRMb2NhdGlvbigpO1xuICAgICAgICBfdGhpcy5yZWZlcnJlciA9ICcnO1xuXG4gICAgICAgIF90aGlzLmhhc2hDaGFuZ2VIYW5kbGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMucmVkaXJlY3QoZ2V0TG9jYXRpb24oKSk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDlvIDlp4vnm5HlkKwgdXJsIOWPmOWMllxuICAgICAqL1xuXG5cbiAgICBMb2NhdG9yLnByb3RvdHlwZS5zdGFydCA9IGZ1bmN0aW9uIHN0YXJ0KCkge1xuICAgICAgICBpZiAod2luZG93LmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdoYXNoY2hhbmdlJywgdGhpcy5oYXNoQ2hhbmdlSGFuZGxlciwgZmFsc2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHdpbmRvdy5hdHRhY2hFdmVudCkge1xuICAgICAgICAgICAgd2luZG93LmF0dGFjaEV2ZW50KCdvbmhhc2hjaGFuZ2UnLCB0aGlzLmhhc2hDaGFuZ2VIYW5kbGVyKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiDlgZzmraLnm5HlkKxcbiAgICAgKi9cblxuXG4gICAgTG9jYXRvci5wcm90b3R5cGUuc3RvcCA9IGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgICAgIGlmICh3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2hhc2hjaGFuZ2UnLCB0aGlzLmhhc2hDaGFuZ2VIYW5kbGVyLCBmYWxzZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAod2luZG93LmRldGFjaEV2ZW50KSB7XG4gICAgICAgICAgICB3aW5kb3cuZGV0YWNoRXZlbnQoJ29uaGFzaGNoYW5nZScsIHRoaXMuaGFzaENoYW5nZUhhbmRsZXIpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIOmHjeWumuWQkVxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHVybCDph43lrprlkJHnmoTlnLDlnYBcbiAgICAgKiBAcGFyYW0ge09iamVjdD99IG9wdGlvbnMg6YeN5a6a5ZCR55qE6KGM5Li66YWN572uXG4gICAgICogQHBhcmFtIHtib29sZWFuP30gb3B0aW9ucy5mb3JjZSDmmK/lkKblvLrliLbliLfmlrBcbiAgICAgKi9cblxuXG4gICAgTG9jYXRvci5wcm90b3R5cGUucmVkaXJlY3QgPSBmdW5jdGlvbiByZWRpcmVjdCh1cmwpIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHsgZm9yY2U6IGZhbHNlIH07XG5cbiAgICAgICAgdXJsID0gKDAsIF9yZXNvbHZlVXJsMlsnZGVmYXVsdCddKSh1cmwsIHRoaXMuY3VycmVudCk7XG4gICAgICAgIHZhciByZWZlcnJlciA9IHRoaXMuY3VycmVudDtcblxuICAgICAgICB2YXIgaXNDaGFuZ2VkID0gdXJsICE9PSByZWZlcnJlcjtcbiAgICAgICAgaWYgKGlzQ2hhbmdlZCkge1xuICAgICAgICAgICAgdGhpcy5yZWZlcnJlciA9IHJlZmVycmVyO1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50ID0gdXJsO1xuICAgICAgICAgICAgbG9jYXRpb24uaGFzaCA9IHVybDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlZmVycmVyID0gdGhpcy5yZWZlcnJlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgoaXNDaGFuZ2VkIHx8IG9wdGlvbnMuZm9yY2UpICYmICFvcHRpb25zLnNpbGVudCkge1xuICAgICAgICAgICAgdGhpcy5maXJlKCdyZWRpcmVjdCcsIHsgdXJsOiB1cmwsIHJlZmVycmVyOiByZWZlcnJlciB9KTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiDliLfmlrDlvZPliY0gdXJsXG4gICAgICovXG5cblxuICAgIExvY2F0b3IucHJvdG90eXBlLnJlbG9hZCA9IGZ1bmN0aW9uIHJlbG9hZCgpIHtcbiAgICAgICAgdGhpcy5yZWRpcmVjdCh0aGlzLmN1cnJlbnQsIHsgZm9yY2U6IHRydWUgfSk7XG4gICAgfTtcblxuICAgIHJldHVybiBMb2NhdG9yO1xufShfZXZlbnRUYXJnZXQyWydkZWZhdWx0J10pO1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBMb2NhdG9yO1xuXG4vKioqLyB9LFxuLyogNSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfZXZlbnRUYXJnZXQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXG52YXIgX2V2ZW50VGFyZ2V0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V2ZW50VGFyZ2V0KTtcblxudmFyIF9yZXNvbHZlVXJsID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxudmFyIF9yZXNvbHZlVXJsMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Jlc29sdmVVcmwpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH0gLyoqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBzYW4tcm91dGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBDb3B5cmlnaHQgMjAxNyBCYWlkdSBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQGZpbGUgaHRtbDUg5qih5byP5Zyw5Z2A55uR5ZCs5ZmoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBAYXV0aG9yIGVycm9ycmlrXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cblxuLyoqXG4gKiDojrflj5blvZPliY1VUkxcbiAqXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGdldExvY2F0aW9uKCkge1xuICAgIHJldHVybiBsb2NhdGlvbi5wYXRobmFtZSArIGxvY2F0aW9uLnNlYXJjaDtcbn1cblxuLyoqXG4gKiBodG1sNSDmqKHlvI/lnLDlnYDnm5HlkKzlmahcbiAqXG4gKiBAY2xhc3NcbiAqL1xuXG52YXIgTG9jYXRvciA9IGZ1bmN0aW9uIChfRXZlbnRUYXJnZXQpIHtcbiAgICBfaW5oZXJpdHMoTG9jYXRvciwgX0V2ZW50VGFyZ2V0KTtcblxuICAgIC8qKlxuICAgICAqIOaehOmAoOWHveaVsFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIExvY2F0b3IoKSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMb2NhdG9yKTtcblxuICAgICAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfRXZlbnRUYXJnZXQuY2FsbCh0aGlzKSk7XG5cbiAgICAgICAgX3RoaXMuY3VycmVudCA9IGdldExvY2F0aW9uKCk7XG4gICAgICAgIF90aGlzLnJlZmVycmVyID0gJyc7XG5cbiAgICAgICAgX3RoaXMucG9wc3RhdGVIYW5kbGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMucmVmZXJyZXIgPSBfdGhpcy5jdXJyZW50O1xuICAgICAgICAgICAgX3RoaXMuY3VycmVudCA9IGdldExvY2F0aW9uKCk7XG5cbiAgICAgICAgICAgIF90aGlzLmZpcmUoJ3JlZGlyZWN0Jywge1xuICAgICAgICAgICAgICAgIHVybDogX3RoaXMuY3VycmVudCxcbiAgICAgICAgICAgICAgICByZWZlcnJlcjogX3RoaXMucmVmZXJyZXJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5byA5aeL55uR5ZCsIHVybCDlj5jljJZcbiAgICAgKi9cblxuXG4gICAgTG9jYXRvci5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbiBzdGFydCgpIHtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3BvcHN0YXRlJywgdGhpcy5wb3BzdGF0ZUhhbmRsZXIpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiDlgZzmraLnm5HlkKxcbiAgICAgKi9cblxuXG4gICAgTG9jYXRvci5wcm90b3R5cGUuc3RvcCA9IGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsIHRoaXMucG9wc3RhdGVIYW5kbGVyKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICog6YeN5a6a5ZCRXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIOmHjeWumuWQkeeahOWcsOWdgFxuICAgICAqIEBwYXJhbSB7T2JqZWN0P30gb3B0aW9ucyDph43lrprlkJHnmoTooYzkuLrphY3nva5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW4/fSBvcHRpb25zLmZvcmNlIOaYr+WQpuW8uuWItuWIt+aWsFxuICAgICAqL1xuXG5cbiAgICBMb2NhdG9yLnByb3RvdHlwZS5yZWRpcmVjdCA9IGZ1bmN0aW9uIHJlZGlyZWN0KHVybCkge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogeyBmb3JjZTogZmFsc2UgfTtcblxuICAgICAgICB1cmwgPSAoMCwgX3Jlc29sdmVVcmwyWydkZWZhdWx0J10pKHVybCwgdGhpcy5jdXJyZW50KTtcbiAgICAgICAgdmFyIHJlZmVycmVyID0gdGhpcy5jdXJyZW50O1xuXG4gICAgICAgIHZhciBpc0NoYW5nZWQgPSB1cmwgIT09IHJlZmVycmVyO1xuXG4gICAgICAgIGlmIChpc0NoYW5nZWQpIHtcbiAgICAgICAgICAgIHRoaXMucmVmZXJyZXIgPSByZWZlcnJlcjtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudCA9IHVybDtcblxuICAgICAgICAgICAgaGlzdG9yeS5wdXNoU3RhdGUoe30sICcnLCB1cmwpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKChpc0NoYW5nZWQgfHwgb3B0aW9ucy5mb3JjZSkgJiYgIW9wdGlvbnMuc2lsZW50KSB7XG4gICAgICAgICAgICB0aGlzLmZpcmUoJ3JlZGlyZWN0JywgeyB1cmw6IHVybCwgcmVmZXJyZXI6IHJlZmVycmVyIH0pO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIOWIt+aWsOW9k+WJjSB1cmxcbiAgICAgKi9cblxuXG4gICAgTG9jYXRvci5wcm90b3R5cGUucmVsb2FkID0gZnVuY3Rpb24gcmVsb2FkKCkge1xuICAgICAgICB0aGlzLmZpcmUoJ3JlZGlyZWN0Jywge1xuICAgICAgICAgICAgdXJsOiB0aGlzLmN1cnJlbnQsXG4gICAgICAgICAgICByZWZlcnJlcjogdGhpcy5yZWZlcnJlclxuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIExvY2F0b3I7XG59KF9ldmVudFRhcmdldDJbJ2RlZmF1bHQnXSk7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IExvY2F0b3I7XG5cblxuTG9jYXRvci5pc1N1cHBvcnQgPSAncHVzaFN0YXRlJyBpbiB3aW5kb3cuaGlzdG9yeTtcblxuLyoqKi8gfSxcbi8qIDYgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5MaW5rID0gZXhwb3J0cy5yb3V0ZXIgPSBleHBvcnRzLlJvdXRlciA9IGV4cG9ydHMudmVyc2lvbiA9IHVuZGVmaW5lZDtcblxudmFyIF9oYXNoID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcblxudmFyIF9oYXNoMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2hhc2gpO1xuXG52YXIgX2h0bWwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xuXG52YXIgX2h0bWwyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaHRtbCk7XG5cbnZhciBfcGFyc2VVcmwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuXG52YXIgX3BhcnNlVXJsMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3BhcnNlVXJsKTtcblxudmFyIF9saW5rID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcblxudmFyIF9saW5rMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2xpbmspO1xuXG52YXIgX2VsZW1lbnRTZWxlY3RvciA9IF9fd2VicGFja19yZXF1aXJlX18oNyk7XG5cbnZhciBfZWxlbWVudFNlbGVjdG9yMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2VsZW1lbnRTZWxlY3Rvcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH0gLyoqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogc2FuLXJvdXRlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIENvcHlyaWdodCAyMDE3IEJhaWR1IEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIEBmaWxlIOS4u+aooeWdl1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIEBhdXRob3IgZXJyb3JyaWtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cblxudmFyIHJvdXRlSUQgPSAweDU5NDJiO1xudmFyIGd1aWQgPSBmdW5jdGlvbiBndWlkKCkge1xuICAgIHJldHVybiAoKytyb3V0ZUlEKS50b1N0cmluZygpO1xufTtcblxuZnVuY3Rpb24gaXNDb21wb25lbnQoQykge1xuICAgIHJldHVybiBDLnByb3RvdHlwZSAmJiAoQy5wcm90b3R5cGUubm9kZVR5cGUgPT09IDUgfHwgQy5wcm90b3R5cGUuX3R5cGUgPT09ICdzYW4tY21wdCcpO1xufVxuXG4vKipcbiAqIOeJiOacrOWPt1xuICpcbiAqIEB0eXBlIHtzdHJpbmd9XG4gKi9cbnZhciB2ZXJzaW9uID0gZXhwb3J0cy52ZXJzaW9uID0gJzEuMi4wJztcblxuLyoqXG4gKiDot6/nlLHlmajnsbtcbiAqXG4gKiBAY2xhc3NcbiAqL1xuXG52YXIgUm91dGVyID0gZXhwb3J0cy5Sb3V0ZXIgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAvKipcbiAgICAgKiDmnoTpgKDlh73mlbBcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0P30gb3B0aW9ucyDliJ3lp4vljJblj4LmlbBcbiAgICAgKiBAcGFyYW0ge3N0cmluZz99IG9wdGlvbnMubW9kZSDot6/nlLHmqKHlvI/vvIxoYXNoIHwgaHRtbDVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBSb3V0ZXIoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgdmFyIF9yZWYgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9LFxuICAgICAgICAgICAgX3JlZiRtb2RlID0gX3JlZi5tb2RlLFxuICAgICAgICAgICAgbW9kZSA9IF9yZWYkbW9kZSA9PT0gdW5kZWZpbmVkID8gJ2hhc2gnIDogX3JlZiRtb2RlO1xuXG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSb3V0ZXIpO1xuXG4gICAgICAgIHRoaXMucm91dGVzID0gW107XG4gICAgICAgIHRoaXMucm91dGVBbGl2ZXMgPSBbXTtcbiAgICAgICAgdGhpcy5saXN0ZW5lcnMgPSBbXTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogbG9jYXRvciByZWRpcmVjdCDkuovku7bnm5HlkKzlh73mlbBcbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGUgbG9jYXRvcuS6i+S7tuWvueixoVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5sb2NhdG9yUmVkaXJlY3RIYW5kbGVyID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIHZhciB1cmwgPSAoMCwgX3BhcnNlVXJsMlsnZGVmYXVsdCddKShlLnVybCk7XG4gICAgICAgICAgICB2YXIgcm91dGVJdGVtID0gdm9pZCAwO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgX3RoaXMucm91dGVzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIHZhciBpdGVtID0gX3RoaXMucm91dGVzW19pXTtcbiAgICAgICAgICAgICAgICB2YXIgbWF0Y2ggPSBpdGVtLnJ1bGUuZXhlYyh1cmwucGF0aCk7XG5cbiAgICAgICAgICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgcm91dGVJdGVtID0gaXRlbTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBmaWxsIHBhcmFtc1xuICAgICAgICAgICAgICAgICAgICB2YXIga2V5cyA9IGl0ZW0ua2V5cyB8fCBbXTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDE7IGogPCBtYXRjaC5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGtleSA9IGtleXNbal0gfHwgajtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IG1hdGNoW2pdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdXJsLnF1ZXJ5W2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybC5wYXJhbXNba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gZmlsbCByZWZlcnJlclxuICAgICAgICAgICAgICAgICAgICB1cmwucmVmZXJyZXIgPSBlLnJlZmVycmVyO1xuICAgICAgICAgICAgICAgICAgICB1cmwuY29uZmlnID0gaXRlbS5jb25maWc7XG5cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgICAgICB2YXIgc3RhdGUgPSAxO1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIGxpc3RlbmVyIOS6i+S7tuWvueixoVxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHZhciBsaXN0ZW5lckV2ZW50ID0ge1xuICAgICAgICAgICAgICAgIGhhc2g6IHVybC5oYXNoLFxuICAgICAgICAgICAgICAgIHF1ZXJ5U3RyaW5nOiB1cmwucXVlcnlTdHJpbmcsXG4gICAgICAgICAgICAgICAgcXVlcnk6IHVybC5xdWVyeSxcbiAgICAgICAgICAgICAgICBwYXRoOiB1cmwucGF0aCxcbiAgICAgICAgICAgICAgICByZWZlcnJlcjogdXJsLnJlZmVycmVyLFxuICAgICAgICAgICAgICAgIGNvbmZpZzogdXJsLmNvbmZpZyxcbiAgICAgICAgICAgICAgICByZXN1bWU6IG5leHQsXG4gICAgICAgICAgICAgICAgc3VzcGVuZDogZnVuY3Rpb24gc3VzcGVuZCgpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSAwO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc3RvcDogZnVuY3Rpb24gc3RvcCgpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSAtMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIOWwneivlei/kOihjOS4i+S4gOS4qmxpc3RlbmVyXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQGlubmVyXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHZhciBkb05leHQgPSBmdW5jdGlvbiBkb05leHQoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHN0YXRlID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaSA8IF90aGlzLmxpc3RlbmVycy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmxpc3RlbmVyc1tpXS5jYWxsKF90aGlzLCBsaXN0ZW5lckV2ZW50LCB1cmwuY29uZmlnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByb3V0ZUFjdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiDov5DooYzkuIvkuIDkuKpsaXN0ZW5lclxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBpbm5lclxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICAgICAgICAgIHN0YXRlID0gMTtcbiAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICAgICAgZG9OZXh0KCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICog6L+Q6KGM6Lev55Sx6KGM5Li6XG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQGlubmVyXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHZhciByb3V0ZUFjdGlvbiA9IGZ1bmN0aW9uIHJvdXRlQWN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGlmIChyb3V0ZUl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuZG9Sb3V0ZShyb3V0ZUl0ZW0sIHVybCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxlbiA9IF90aGlzLnJvdXRlQWxpdmVzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGxlbi0tKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5yb3V0ZUFsaXZlc1tsZW5dLmNvbXBvbmVudC5kaXNwb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5yb3V0ZUFsaXZlcy5zcGxpY2UobGVuLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGRvTmV4dCgpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuc2V0TW9kZShtb2RlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDmt7vliqDot6/nlLHnm5HlkKzlmahcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oZSwgY29uZmlnKX0gbGlzdGVuZXIg55uR5ZCs5ZmoXG4gICAgICovXG5cblxuICAgIFJvdXRlci5wcm90b3R5cGUubGlzdGVuID0gZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMubGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiDnp7vpmaTot6/nlLHnm5HlkKzlmahcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGxpc3RlbmVyIOebkeWQrOWZqFxuICAgICAqL1xuXG5cbiAgICBSb3V0ZXIucHJvdG90eXBlLnVubGlzdGVuID0gZnVuY3Rpb24gdW5saXN0ZW4obGlzdGVuZXIpIHtcbiAgICAgICAgdmFyIGxlbiA9IHRoaXMubGlzdGVuZXJzLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKGxlbi0tKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5saXN0ZW5lcnNbbGVuXSA9PT0gbGlzdGVuZXIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxpc3RlbmVycy5zcGxpY2UobGVuLCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiDmiafooYzot6/nlLFcbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHJvdXRlSXRlbSDot6/nlLHpoblcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZSDot6/nlLHkv6Hmga9cbiAgICAgKi9cblxuXG4gICAgUm91dGVyLnByb3RvdHlwZS5kb1JvdXRlID0gZnVuY3Rpb24gZG9Sb3V0ZShyb3V0ZUl0ZW0sIGUpIHtcbiAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgdmFyIGlzVXBkYXRlQWxpdmUgPSBmYWxzZTtcbiAgICAgICAgdmFyIGxlbiA9IHRoaXMucm91dGVBbGl2ZXMubGVuZ3RoO1xuXG4gICAgICAgIHdoaWxlIChsZW4tLSkge1xuICAgICAgICAgICAgdmFyIHJvdXRlQWxpdmUgPSB0aGlzLnJvdXRlQWxpdmVzW2xlbl07XG5cbiAgICAgICAgICAgIGlmIChyb3V0ZUFsaXZlLmlkID09PSByb3V0ZUl0ZW0uaWQpIHtcbiAgICAgICAgICAgICAgICByb3V0ZUFsaXZlLmNvbXBvbmVudC5kYXRhLnNldCgncm91dGUnLCBlKTtcbiAgICAgICAgICAgICAgICByb3V0ZUFsaXZlLmNvbXBvbmVudC5fY2FsbEhvb2soJ3JvdXRlJyk7XG4gICAgICAgICAgICAgICAgaXNVcGRhdGVBbGl2ZSA9IHRydWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJvdXRlQWxpdmUuY29tcG9uZW50LmRpc3Bvc2UoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnJvdXRlQWxpdmVzLnNwbGljZShsZW4sIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFpc1VwZGF0ZUFsaXZlKSB7XG4gICAgICAgICAgICBpZiAocm91dGVJdGVtLkNvbXBvbmVudCkge1xuICAgICAgICAgICAgICAgIGlmIChpc0NvbXBvbmVudChyb3V0ZUl0ZW0uQ29tcG9uZW50KSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmF0dGFjaENtcHQocm91dGVJdGVtLCBlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByb3V0ZUl0ZW0uQ29tcG9uZW50KCkudGhlbihmdW5jdGlvbiAoQ21wdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzQ29tcG9uZW50KENtcHQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcm91dGVJdGVtLkNvbXBvbmVudCA9IENtcHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKENtcHQuX19lc01vZHVsZSAmJiBpc0NvbXBvbmVudChDbXB0WydkZWZhdWx0J10pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcm91dGVJdGVtLkNvbXBvbmVudCA9IENtcHRbJ2RlZmF1bHQnXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzMi5hdHRhY2hDbXB0KHJvdXRlSXRlbSwgZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcm91dGVJdGVtLmhhbmRsZXIuY2FsbCh0aGlzLCBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBSb3V0ZXIucHJvdG90eXBlLmF0dGFjaENtcHQgPSBmdW5jdGlvbiBhdHRhY2hDbXB0KHJvdXRlSXRlbSwgZSkge1xuICAgICAgICB2YXIgY29tcG9uZW50ID0gbmV3IHJvdXRlSXRlbS5Db21wb25lbnQoKTtcbiAgICAgICAgY29tcG9uZW50LmRhdGEuc2V0KCdyb3V0ZScsIGUpO1xuICAgICAgICBjb21wb25lbnQuX2NhbGxIb29rKCdyb3V0ZScpO1xuXG4gICAgICAgIHZhciB0YXJnZXQgPSByb3V0ZUl0ZW0udGFyZ2V0O1xuICAgICAgICB2YXIgdGFyZ2V0RWwgPSAoMCwgX2VsZW1lbnRTZWxlY3RvcjJbJ2RlZmF1bHQnXSkodGFyZ2V0KTtcblxuICAgICAgICBpZiAoIXRhcmdldEVsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1tTQU4tUk9VVEVSIEVSUk9SXSAnICsgJ0F0dGFjaCBmYWlsZWQsIHRhcmdldCBlbGVtZW50IFwiJyArIHJvdXRlSXRlbS50YXJnZXQgKyAnXCIgaXMgbm90IGZvdW5kLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29tcG9uZW50LmF0dGFjaCh0YXJnZXRFbCk7XG5cbiAgICAgICAgdGhpcy5yb3V0ZUFsaXZlcy5wdXNoKHtcbiAgICAgICAgICAgIGNvbXBvbmVudDogY29tcG9uZW50LFxuICAgICAgICAgICAgaWQ6IHJvdXRlSXRlbS5pZFxuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICog5re75Yqg6Lev55Sx6aG5XG4gICAgICog5b2T6KeE5YiZ5Yy56YWN5pe277yM6Lev55Sx5bCG5LyY5YWI5bCGQ29tcG9uZW505riy5p+T5YiwdGFyZ2V05Lit44CC5aaC5p6c5rKh5pyJ5YyF5ZCrQ29tcG9uZW5077yM5YiZ5omn6KGMaGFuZGxlcuWHveaVsFxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIOi3r+eUsemhuemFjee9rlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfFJlZ0V4cH0gY29uZmlnLnJ1bGUg6Lev55Sx6KeE5YiZXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbj99IGNvbmZpZy5oYW5kbGVyIOi3r+eUseWHveaVsFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb24/fSBjb25maWcuQ29tcG9uZW50IOi3r+eUsee7hOS7tlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjb25maWcudGFyZ2V0IOi3r+eUsee7hOS7tuimgea4suafk+WIsOeahOebruagh+S9jee9rlxuICAgICAqIEByZXR1cm4ge09iamVjdH0gc2FuLXJvdXRlciDlrp7kvotcbiAgICAgKi9cblxuXG4gICAgUm91dGVyLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQoY29uZmlnKSB7XG4gICAgICAgIHZhciBydWxlID0gY29uZmlnLnJ1bGUsXG4gICAgICAgICAgICBoYW5kbGVyID0gY29uZmlnLmhhbmRsZXIsXG4gICAgICAgICAgICBfY29uZmlnJHRhcmdldCA9IGNvbmZpZy50YXJnZXQsXG4gICAgICAgICAgICB0YXJnZXQgPSBfY29uZmlnJHRhcmdldCA9PT0gdW5kZWZpbmVkID8gJyNtYWluJyA6IF9jb25maWckdGFyZ2V0LFxuICAgICAgICAgICAgQ29tcG9uZW50ID0gY29uZmlnLkNvbXBvbmVudDtcblxuICAgICAgICB2YXIga2V5cyA9IFsnJ107XG5cbiAgICAgICAgaWYgKHR5cGVvZiBydWxlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgLy8g5rKh55SocGF0aC10by1yZWdleHDvvIzmmoLml7bkuI3mj5Dkvpvov5nkuYjlpJrlip/og73mlK/mjIFcbiAgICAgICAgICAgIHZhciByZWdUZXh0ID0gcnVsZS5yZXBsYWNlKC9cXC86KFthLXowLTlfLV0rKSg/PVxcL3wkKS9pZywgZnVuY3Rpb24gKG1hdGNoLCBrZXkpIHtcbiAgICAgICAgICAgICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gJy8oW14vXFxcXHNdKyknO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJ1bGUgPSBuZXcgUmVnRXhwKCdeJyArIHJlZ1RleHQgKyAnJCcsICdpJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIShydWxlIGluc3RhbmNlb2YgUmVnRXhwKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdbU0FOLVJPVVRFUiBFUlJPUl0gUnVsZSBtdXN0IGJlIHN0cmluZyBvciBSZWdFeHAhJyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaWQgPSBndWlkKCk7XG4gICAgICAgIHRoaXMucm91dGVzLnB1c2goeyBpZDogaWQsIHJ1bGU6IHJ1bGUsIGhhbmRsZXI6IGhhbmRsZXIsIGtleXM6IGtleXMsIHRhcmdldDogdGFyZ2V0LCBDb21wb25lbnQ6IENvbXBvbmVudCwgY29uZmlnOiBjb25maWcgfSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIOWQr+WKqOi3r+eUseWKn+iDvVxuICAgICAqXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBzYW4tcm91dGVyIOWunuS+i1xuICAgICAqL1xuXG5cbiAgICBSb3V0ZXIucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24gc3RhcnQoKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1N0YXJ0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuaXNTdGFydGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMubG9jYXRvci5vbigncmVkaXJlY3QnLCB0aGlzLmxvY2F0b3JSZWRpcmVjdEhhbmRsZXIpO1xuICAgICAgICAgICAgdGhpcy5sb2NhdG9yLnN0YXJ0KCk7XG4gICAgICAgICAgICB0aGlzLmxvY2F0b3IucmVsb2FkKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICog5YGc5q2i6Lev55Sx5Yqf6IO9XG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IHNhbi1yb3V0ZXIg5a6e5L6LXG4gICAgICovXG5cblxuICAgIFJvdXRlci5wcm90b3R5cGUuc3RvcCA9IGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgICAgIHRoaXMubG9jYXRvci51bigncmVkaXJlY3QnLCB0aGlzLmxvY2F0b3JSZWRpcmVjdEhhbmRsZXIpO1xuICAgICAgICB0aGlzLmxvY2F0b3Iuc3RvcCgpO1xuICAgICAgICB0aGlzLmlzU3RhcnRlZCA9IGZhbHNlO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiDorr7nva7ot6/nlLHmqKHlvI9cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtb2RlIOi3r+eUseaooeW8j++8jGhhc2ggfCBodG1sNVxuICAgICAqIEByZXR1cm4ge09iamVjdH0gc2FuLXJvdXRlciDlrp7kvotcbiAgICAgKi9cblxuXG4gICAgUm91dGVyLnByb3RvdHlwZS5zZXRNb2RlID0gZnVuY3Rpb24gc2V0TW9kZShtb2RlKSB7XG4gICAgICAgIG1vZGUgPSBtb2RlLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGlmICh0aGlzLm1vZGUgPT09IG1vZGUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMubW9kZSA9IG1vZGU7XG5cbiAgICAgICAgdmFyIHJlc3RhcnQgPSBmYWxzZTtcbiAgICAgICAgaWYgKHRoaXMuaXNTdGFydGVkKSB7XG4gICAgICAgICAgICB0aGlzLnN0b3AoKTtcbiAgICAgICAgICAgIHJlc3RhcnQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgc3dpdGNoIChtb2RlKSB7XG4gICAgICAgICAgICBjYXNlICdoYXNoJzpcbiAgICAgICAgICAgICAgICB0aGlzLmxvY2F0b3IgPSBuZXcgX2hhc2gyWydkZWZhdWx0J10oKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2h0bWw1JzpcbiAgICAgICAgICAgICAgICB0aGlzLmxvY2F0b3IgPSBuZXcgX2h0bWwyWydkZWZhdWx0J10oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyZXN0YXJ0KSB7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0KCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgcmV0dXJuIFJvdXRlcjtcbn0oKTtcblxuLyoqXG4gKiDpu5jorqTnmoTot6/nlLHlmajlrp7kvotcbiAqXG4gKiBAdHlwZSB7Um91dGVyfVxuICovXG5cblxudmFyIHJvdXRlciA9IGV4cG9ydHMucm91dGVyID0gbmV3IFJvdXRlcigpO1xuXG4vKipcbiAqIOi3r+eUsemTvuaOpeeahCBTYW4g57uE5Lu2XG4gKlxuICogQGNsYXNzXG4gKi9cbmV4cG9ydHMuTGluayA9IF9saW5rMlsnZGVmYXVsdCddO1xuXG4vKioqLyB9LFxuLyogNyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gZWxlbWVudFNlbGVjdG9yO1xuLypcbipcbiogQGZpbGUg6YCJ5oup5ZmoXG4qIEBhdXRob3IgdmluY2VudCBsYXUvNDEzODkzMDkzQHFxLmNvbVxuKi9cblxuLyoqXG4gKiDlhYPntKDpgInmi6nlmahcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ3xFbGVtZW50fSBzZWxlY3RvciDpgInmi6nlmahcbiAqIEByZXR1cm5zIHtFbGVtZW50fVxuICovXG5mdW5jdGlvbiBlbGVtZW50U2VsZWN0b3Ioc2VsZWN0b3IpIHtcbiAgICBzd2l0Y2ggKHR5cGVvZiBzZWxlY3RvciA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2Yoc2VsZWN0b3IpKSB7XG4gICAgICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICAgICAgICByZXR1cm4gc2VsZWN0b3I7XG5cbiAgICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgICAgIGlmIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoc2VsZWN0b3IucmVwbGFjZSgvIy9pLCAnJykpO1xuICAgIH1cbn1cblxuLyoqKi8gfVxuLyoqKioqKi8gXSk7XG59KTsiLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSB8fCAoMSwgZXZhbCkoXCJ0aGlzXCIpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwiLyoqXG4gKiBTYW5cbiAqIENvcHlyaWdodCAyMDE2IEJhaWR1IEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBAZmlsZSDkuLvmlofku7ZcbiAqIEBhdXRob3IgZXJyb3JyaWsoZXJyb3JyaWtAZ21haWwuY29tKVxuICogICAgICAgICBvdGFrdXN0YXkob3Rha3VzdGF5QGdtYWlsLmNvbSlcbiAqICAgICAgICAganVubWVyKGp1bm1lckBmb3htYWlsLmNvbSlcbiAqL1xuXG4oZnVuY3Rpb24gKHJvb3QpIHtcbiAgICAvLyDkurrlt6XosIPmlbTmiZPljIXku6PnoIHpobrluo/vvIzpgJrov4fms6jph4rmiYvlt6XlhpnkuIDkupvkvp3otZZcbi8vICAgICAvLyByZXF1aXJlKCcuL3V0aWwvZ3VpZCcpO1xuLy8gICAgIC8vIHJlcXVpcmUoJy4vdXRpbC9lbXB0eScpO1xuLy8gICAgIC8vIHJlcXVpcmUoJy4vdXRpbC9leHRlbmQnKTtcbi8vICAgICAvLyByZXF1aXJlKCcuL3V0aWwvaW5oZXJpdHMnKTtcbi8vICAgICAvLyByZXF1aXJlKCcuL3V0aWwvZWFjaCcpO1xuLy8gICAgIC8vIHJlcXVpcmUoJy4vdXRpbC9jb250YWlucycpO1xuLy8gICAgIC8vIHJlcXVpcmUoJy4vdXRpbC9iaW5kJyk7XG4vLyAgICAgLy8gcmVxdWlyZSgnLi9icm93c2VyL29uJyk7XG4vLyAgICAgLy8gcmVxdWlyZSgnLi9icm93c2VyL3VuJyk7XG4vLyAgICAgLy8gcmVxdWlyZSgnLi9icm93c2VyL3N2Zy10YWdzJyk7XG4vLyAgICAgLy8gcmVxdWlyZSgnLi9icm93c2VyL2NyZWF0ZS1lbCcpO1xuLy8gICAgIC8vIHJlcXVpcmUoJy4vYnJvd3Nlci9yZW1vdmUtZWwnKTtcbi8vICAgICAvLyByZXF1aXJlKCcuL3V0aWwvbmV4dC10aWNrJyk7XG4vLyAgICAgLy8gcmVxdWlyZSgnLi9icm93c2VyL2llJyk7XG4vLyAgICAgLy8gcmVxdWlyZSgnLi9icm93c2VyL2llLW9sZC10aGFuLTknKTtcbi8vICAgICAvLyByZXF1aXJlKCcuL2Jyb3dzZXIvaW5wdXQtZXZlbnQtY29tcGF0aWJsZScpO1xuLy8gICAgIC8vIHJlcXVpcmUoJy4vYnJvd3Nlci9hdXRvLWNsb3NlLXRhZ3MnKTtcbi8vICAgICAvLyByZXF1aXJlKCcuL3V0aWwvZGF0YS10eXBlcy5qcycpO1xuLy8gICAgIC8vIHJlcXVpcmUoJy4vdXRpbC9jcmVhdGUtZGF0YS10eXBlcy1jaGVja2VyLmpzJyk7XG4vLyAgICAgLy8gcmVxdWlyZSgnLi9wYXJzZXIvd2Fsa2VyJyk7XG4vLyAgICAgLy8gcmVxdWlyZSgnLi9wYXJzZXIvY3JlYXRlLWEtbm9kZScpO1xuLy8gICAgIC8vIHJlcXVpcmUoJy4vcGFyc2VyL3BhcnNlLXRlbXBsYXRlJyk7XG4vLyAgICAgLy8gcmVxdWlyZSgnLi9ydW50aW1lL2NoYW5nZS1leHByLWNvbXBhcmUnKTtcbi8vICAgICAvLyByZXF1aXJlKCcuL3J1bnRpbWUvZGF0YS1jaGFuZ2UtdHlwZScpO1xuLy8gICAgIC8vIHJlcXVpcmUoJy4vcnVudGltZS9kZWZhdWx0LWZpbHRlcnMnKTtcbi8vICAgICAvLyByZXF1aXJlKCcuL3ZpZXcvbGlmZS1jeWNsZScpO1xuLy8gICAgIC8vIHJlcXVpcmUoJy4vdmlldy9ub2RlLXR5cGUnKTtcbi8vICAgICAvLyByZXF1aXJlKCcuL3ZpZXcvZ2V0LXByb3AtaGFuZGxlcicpO1xuLy8gICAgIC8vIHJlcXVpcmUoJy4vdmlldy9pcy1kYXRhLWNoYW5nZS1ieS1lbGVtZW50Jyk7XG4vLyAgICAgLy8gcmVxdWlyZSgnLi92aWV3L2V2ZW50LWRlY2xhcmF0aW9uLWxpc3RlbmVyJyk7XG4vLyAgICAgLy8gcmVxdWlyZSgnLi92aWV3L2NyZWF0ZS1ub2RlJyk7XG5cblxuICAgIC8qKlxuICogQGZpbGUg55Sf5oiQ5ZSv5LiAaWRcbiAqIEBhdXRob3IgZXJyb3JyaWsoZXJyb3JyaWtAZ21haWwuY29tKVxuICovXG5cblxuLyoqXG4gKiDllK/kuIBpZOeahOi1t+Wni+WAvFxuICpcbiAqIEBpbm5lclxuICogQHR5cGUge251bWJlcn1cbiAqL1xudmFyIGd1aWRJbmRleCA9IDE7XG5cbi8qKlxuICog5ZSv5LiAaWTnmoTliY3nvIBcbiAqXG4gKiBAaW5uZXJcbiAqIEB0eXBlIHtzdHJpbmd9XG4gKi9cbnZhciBndWlkUHJlZml4ID0gKG5ldyBEYXRlKCkpLmdldFRpbWUoKS50b1N0cmluZygxNikuc2xpY2UoOCk7XG5cbi8qKlxuICog6I635Y+W5ZSv5LiAaWRcbiAqXG4gKiBAaW5uZXJcbiAqIEByZXR1cm4ge3N0cmluZ30g5ZSv5LiAaWRcbiAqL1xuZnVuY3Rpb24gZ3VpZCgpIHtcbiAgICByZXR1cm4gJ18nICsgZ3VpZFByZWZpeCArIChndWlkSW5kZXgrKyk7XG59XG5cbi8vIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGd1aWQ7XG5cblxuLyoqXG4gKiBAZmlsZSDnqbrlh73mlbBcbiAqIEBhdXRob3IgZXJyb3JyaWsoZXJyb3JyaWtAZ21haWwuY29tKVxuICovXG5cblxuLyoqXG4gKiDllaXpg73kuI3lubJcbiAqL1xuZnVuY3Rpb24gZW1wdHkoKSB7fVxuXG4vLyBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBlbXB0eTtcblxuXG4vKipcbiAqIEBmaWxlIOWxnuaAp+aLt+i0nVxuICogQGF1dGhvciBlcnJvcnJpayhlcnJvcnJpa0BnbWFpbC5jb20pXG4gKi9cblxuLyoqXG4gKiDlr7nosaHlsZ7mgKfmi7fotJ1cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdGFyZ2V0IOebruagh+WvueixoVxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSDmupDlr7nosaFcbiAqIEByZXR1cm4ge09iamVjdH0g6L+U5Zue55uu5qCH5a+56LGhXG4gKi9cbmZ1bmN0aW9uIGV4dGVuZCh0YXJnZXQsIHNvdXJjZSkge1xuICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKHNvdXJjZS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0W2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG59XG5cbi8vIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGV4dGVuZDtcblxuXG4vKipcbiAqIEBmaWxlIOaehOW7uuexu+S5i+mXtOeahOe7p+aJv+WFs+ezu1xuICogQGF1dGhvciBlcnJvcnJpayhlcnJvcnJpa0BnbWFpbC5jb20pXG4gKi9cblxuLy8gdmFyIGV4dGVuZCA9IHJlcXVpcmUoJy4vZXh0ZW5kJyk7XG5cbi8qKlxuICog5p6E5bu657G75LmL6Ze055qE57un5om/5YWz57O7XG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gc3ViQ2xhc3Mg5a2Q57G75Ye95pWwXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBzdXBlckNsYXNzIOeItuexu+WHveaVsFxuICovXG5mdW5jdGlvbiBpbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICAgIC8qIGpzaGludCAtVzA1NCAqL1xuICAgIHZhciBzdWJDbGFzc1Byb3RvID0gc3ViQ2xhc3MucHJvdG90eXBlO1xuICAgIHZhciBGID0gbmV3IEZ1bmN0aW9uKCk7XG4gICAgRi5wcm90b3R5cGUgPSBzdXBlckNsYXNzLnByb3RvdHlwZTtcbiAgICBzdWJDbGFzcy5wcm90b3R5cGUgPSBuZXcgRigpO1xuICAgIHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzO1xuICAgIGV4dGVuZChzdWJDbGFzcy5wcm90b3R5cGUsIHN1YkNsYXNzUHJvdG8pO1xuICAgIC8qIGpzaGludCArVzA1NCAqL1xufVxuXG4vLyBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBpbmhlcml0cztcblxuXG4vKipcbiAqIEBmaWxlIOmBjeWOhuaVsOe7hFxuICogQGF1dGhvciBlcnJvcnJpayhlcnJvcnJpa0BnbWFpbC5jb20pXG4gKi9cblxuXG4vKipcbiAqIOmBjeWOhuaVsOe7hOmbhuWQiFxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IOaVsOe7hOa6kFxuICogQHBhcmFtIHtmdW5jdGlvbihBbnksbnVtYmVyKTpib29sZWFufSBpdGVyYXRvciDpgY3ljoblh73mlbBcbiAqL1xuZnVuY3Rpb24gZWFjaChhcnJheSwgaXRlcmF0b3IpIHtcbiAgICBpZiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoID4gMCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGFycmF5Lmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgaWYgKGl0ZXJhdG9yKGFycmF5W2ldLCBpKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuLy8gZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZWFjaDtcblxuXG4vKipcbiAqIEBmaWxlIOWIpOaWreaVsOe7hOS4reaYr+WQpuWMheWQq+afkOmhuVxuICogQGF1dGhvciBlcnJvcnJpayhlcnJvcnJpa0BnbWFpbC5jb20pXG4gKi9cblxuLy8gdmFyIGVhY2ggPSByZXF1aXJlKCcuL2VhY2gnKTtcblxuLyoqXG4gKiDliKTmlq3mlbDnu4TkuK3mmK/lkKbljIXlkKvmn5DpoblcbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSDmlbDnu4RcbiAqIEBwYXJhbSB7Kn0gdmFsdWUg5YyF5ZCr55qE6aG5XG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBjb250YWlucyhhcnJheSwgdmFsdWUpIHtcbiAgICB2YXIgcmVzdWx0ID0gZmFsc2U7XG4gICAgZWFjaChhcnJheSwgZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmVzdWx0ID0gaXRlbSA9PT0gdmFsdWU7XG4gICAgICAgIHJldHVybiAhcmVzdWx0O1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLy8gZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gY29udGFpbnM7XG5cblxuLyoqXG4gKiBAZmlsZSBiaW5k5Ye95pWwXG4gKiBAYXV0aG9yIGVycm9ycmlrKGVycm9ycmlrQGdtYWlsLmNvbSlcbiAqL1xuXG4vKipcbiAqIEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kIOaWueazleeahOWFvOWuueaAp+WwgeijhVxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMg6KaBYmluZOeahOWHveaVsFxuICogQHBhcmFtIHtPYmplY3R9IHRoaXNBcmcgdGhpc+aMh+WQkeWvueixoVxuICogQHBhcmFtIHsuLi4qfSBhcmdzIOmihOiuvueahOWIneWni+WPguaVsFxuICogQHJldHVybiB7RnVuY3Rpb259XG4gKi9cbmZ1bmN0aW9uIGJpbmQoZnVuYywgdGhpc0FyZykge1xuICAgIHZhciBuYXRpdmVCaW5kID0gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQ7XG4gICAgdmFyIHNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xuICAgIC8vICNbYmVnaW5dIGFsbHVhXG4gICAgaWYgKG5hdGl2ZUJpbmQgJiYgZnVuYy5iaW5kID09PSBuYXRpdmVCaW5kKSB7XG4gICAgLy8gI1tlbmRdXG4gICAgICAgIHJldHVybiBuYXRpdmVCaW5kLmFwcGx5KGZ1bmMsIHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSk7XG4gICAgLy8gI1tiZWdpbl0gYWxsdWFcbiAgICB9XG5cbiAgICB2YXIgYXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzQXJnLCBhcmdzLmNvbmNhdChzbGljZS5jYWxsKGFyZ3VtZW50cykpKTtcbiAgICB9O1xuICAgIC8vICNbZW5kXVxufVxuXG4vLyBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBiaW5kO1xuXG5cbi8qKlxuICogQGZpbGUgRE9NIOS6i+S7tuaMgui9vVxuICogQGF1dGhvciBlcnJvcnJpayhlcnJvcnJpa0BnbWFpbC5jb20pXG4gKi9cblxuLyoqXG4gKiBET00g5LqL5Lu25oyC6L29XG4gKlxuICogQGlubmVyXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbCBET03lhYPntKBcbiAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWUg5LqL5Lu25ZCNXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciDnm5HlkKzlh73mlbBcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gY2FwdHVyZSDmmK/lkKbmmK/mjZXojrfpmLbmrrVcbiAqL1xuZnVuY3Rpb24gb24oZWwsIGV2ZW50TmFtZSwgbGlzdGVuZXIsIGNhcHR1cmUpIHtcbiAgICAvLyAjW2JlZ2luXSBhbGx1YVxuICAgIGlmIChlbC5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgLy8gI1tlbmRdXG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBsaXN0ZW5lciwgY2FwdHVyZSk7XG4gICAgLy8gI1tiZWdpbl0gYWxsdWFcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGVsLmF0dGFjaEV2ZW50KCdvbicgKyBldmVudE5hbWUsIGxpc3RlbmVyKTtcbiAgICB9XG4gICAgLy8gI1tlbmRdXG59XG5cbi8vIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IG9uO1xuXG5cbi8qKlxuICogQGZpbGUgRE9NIOS6i+S7tuWNuOi9vVxuICogQGF1dGhvciBlcnJvcnJpayhlcnJvcnJpa0BnbWFpbC5jb20pXG4gKi9cblxuLyoqXG4gKiBET00g5LqL5Lu25Y246L29XG4gKlxuICogQGlubmVyXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbCBET03lhYPntKBcbiAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWUg5LqL5Lu25ZCNXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciDnm5HlkKzlh73mlbBcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gY2FwdHVyZSDmmK/lkKbmmK/mjZXojrfpmLbmrrVcbiAqL1xuZnVuY3Rpb24gdW4oZWwsIGV2ZW50TmFtZSwgbGlzdGVuZXIsIGNhcHR1cmUpIHtcbiAgICAvLyAjW2JlZ2luXSBhbGx1YVxuICAgIGlmIChlbC5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgLy8gI1tlbmRdXG4gICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBsaXN0ZW5lciwgY2FwdHVyZSk7XG4gICAgLy8gI1tiZWdpbl0gYWxsdWFcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGVsLmRldGFjaEV2ZW50KCdvbicgKyBldmVudE5hbWUsIGxpc3RlbmVyKTtcbiAgICB9XG4gICAgLy8gI1tlbmRdXG59XG5cbi8vIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHVuO1xuXG5cbi8qKlxuICogQGZpbGUg5bCG5a2X56ym5Liy6YCX5Y+35YiH5YiG6L+U5Zue5a+56LGhXG4gKiBAYXV0aG9yIGVycm9ycmlrKGVycm9ycmlrQGdtYWlsLmNvbSlcbiAqL1xuXG4vLyB2YXIgZWFjaCA9IHJlcXVpcmUoJy4uL3V0aWwvZWFjaCcpO1xuXG4vKipcbiAqIOWwhuWtl+espuS4sumAl+WPt+WIh+WIhui/lOWbnuWvueixoVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzb3VyY2Ug5rqQ5a2X56ym5LiyXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cbmZ1bmN0aW9uIHNwbGl0U3RyMk9iaihzb3VyY2UpIHtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgZWFjaChcbiAgICAgICAgc291cmNlLnNwbGl0KCcsJyksXG4gICAgICAgIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgIHJlc3VsdFtrZXldID0gMTtcbiAgICAgICAgfVxuICAgICk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLy8gZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gc3BsaXRTdHIyT2JqO1xuXG5cbi8qKlxuICogQGZpbGUgU1ZH5qCH562+6KGoXG4gKiBAYXV0aG9yIGVycm9ycmlrKGVycm9ycmlrQGdtYWlsLmNvbSlcbiAqL1xuXG4vLyB2YXIgc3BsaXRTdHIyT2JqID0gcmVxdWlyZSgnLi4vdXRpbC9zcGxpdC1zdHItMi1vYmonKTtcblxuLyoqXG4gKiBzdmdUYWdzXG4gKlxuICogQHNlZSBodHRwczovL3d3dy53My5vcmcvVFIvU1ZHL3N2Z2R0ZC5odG1sIOWPquWPluW4uOeUqFxuICogQHR5cGUge09iamVjdH1cbiAqL1xudmFyIHN2Z1RhZ3MgPSBzcGxpdFN0cjJPYmooJydcbiAgICAvLyBzdHJ1Y3R1cmVcbiAgICArICdzdmcsZyxkZWZzLGRlc2MsbWV0YWRhdGEsc3ltYm9sLHVzZSwnXG4gICAgLy8gaW1hZ2UgJiBzaGFwZVxuICAgICsgJ2ltYWdlLHBhdGgscmVjdCxjaXJjbGUsbGluZSxlbGxpcHNlLHBvbHlsaW5lLHBvbHlnb24sJ1xuICAgIC8vIHRleHRcbiAgICArICd0ZXh0LHRzcGFuLHRyZWYsdGV4dHBhdGgsJ1xuICAgIC8vIG90aGVyXG4gICAgKyAnbWFya2VyLHBhdHRlcm4sY2xpcHBhdGgsbWFzayxmaWx0ZXIsY3Vyc29yLHZpZXcsYW5pbWF0ZSwnXG4gICAgLy8gZm9udFxuICAgICsgJ2ZvbnQsZm9udC1mYWNlLGdseXBoLG1pc3NpbmctZ2x5cGgnKTtcblxuLy8gZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gc3ZnVGFncztcblxuXG4vKipcbiAqIEBmaWxlIERPTeWIm+W7ulxuICogQGF1dGhvciBlcnJvcnJpayhlcnJvcnJpa0BnbWFpbC5jb20pXG4gKi9cblxuLy8gdmFyIHN2Z1RhZ3MgPSByZXF1aXJlKCcuL3N2Zy10YWdzJyk7XG5cbi8qKlxuICog5Yib5bu6IERPTSDlhYPntKBcbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHRhZ05hbWUgdGFnTmFtZVxuICogQHJldHVybiB7SFRNTEVsZW1lbnR9XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUVsKHRhZ05hbWUpIHtcbiAgICBpZiAoc3ZnVGFnc1t0YWdOYW1lXSkge1xuICAgICAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsIHRhZ05hbWUpO1xuICAgIH1cblxuICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZ05hbWUpO1xufVxuXG4vLyBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVFbDtcblxuXG4vKipcbiAqIEBmaWxlIOenu+mZpERPTVxuICogQGF1dGhvciBlcnJvcnJpayhlcnJvcnJpa0BnbWFpbC5jb20pXG4gKi9cblxuLyoqXG4gKiDlsIYgRE9NIOS7jumhtemdouS4reenu+mZpFxuICpcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsIERPTeWFg+e0oFxuICovXG5mdW5jdGlvbiByZW1vdmVFbChlbCkge1xuICAgIGlmIChlbCAmJiBlbC5wYXJlbnROb2RlKSB7XG4gICAgICAgIGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWwpO1xuICAgIH1cbn1cblxuLy8gZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVtb3ZlRWw7XG5cblxuLyoqXG4gKiBAZmlsZSDlnKjkuIvkuIDkuKrml7bpl7TlkajmnJ/ov5DooYzku7vliqFcbiAqIEBhdXRob3IgZXJyb3JyaWsoZXJyb3JyaWtAZ21haWwuY29tKVxuICovXG5cbi8vIOivpeaWueazleWPgueFp+S6hnZ1ZTIuNS4w55qE5a6e546w77yM5oSf6LCidnVl5Zui6ZifXG4vLyBTRUU6IGh0dHBzOi8vZ2l0aHViLmNvbS92dWVqcy92dWUvYmxvYi8wOTQ4ZDk5OWYyZmRkZjlmOTA5OTE5NTY0OTNmOTc2MjczYzVkYTFmL3NyYy9jb3JlL3V0aWwvZW52LmpzI0w2OFxuXG5cbi8vIHZhciBiaW5kID0gcmVxdWlyZSgnLi9iaW5kJyk7XG5cbi8qKlxuICog5LiL5LiA5Liq5ZGo5pyf6KaB5omn6KGM55qE5Lu75Yqh5YiX6KGoXG4gKlxuICogQGlubmVyXG4gKiBAdHlwZSB7QXJyYXl9XG4gKi9cbnZhciBuZXh0VGFza3MgPSBbXTtcblxuLyoqXG4gKiDmiafooYzkuIvkuIDkuKrlkajmnJ/ku7vliqHnmoTlh73mlbBcbiAqXG4gKiBAaW5uZXJcbiAqIEB0eXBlIHtGdW5jdGlvbn1cbiAqL1xudmFyIG5leHRIYW5kbGVyO1xuXG4vKipcbiAqIOa1j+iniOWZqOaYr+WQpuaUr+aMgeWOn+eUn1Byb21pc2VcbiAqIOWvuVByb21pc2XlgZrliKTmlq3vvIzmmK/kuLrkuobnpoHnlKjkuIDkupvkuI3kuKXosKjnmoRQcm9taXNl55qEcG9seWZpbGxcbiAqXG4gKiBAaW5uZXJcbiAqIEB0eXBlIHtib29sZWFufVxuICovXG52YXIgaXNOYXRpdmVQcm9taXNlID0gdHlwZW9mIFByb21pc2UgPT09ICdmdW5jdGlvbicgJiYgL25hdGl2ZSBjb2RlLy50ZXN0KFByb21pc2UpO1xuXG4vKipcbiAqIOWcqOS4i+S4gOS4quaXtumXtOWRqOacn+i/kOihjOS7u+WKoVxuICpcbiAqIEBpbm5lclxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4g6KaB6L+Q6KGM55qE5Lu75Yqh5Ye95pWwXG4gKiBAcGFyYW0ge09iamVjdD19IHRoaXNBcmcgdGhpc+aMh+WQkeWvueixoVxuICovXG5mdW5jdGlvbiBuZXh0VGljayhmbiwgdGhpc0FyZykge1xuICAgIGlmICh0aGlzQXJnKSB7XG4gICAgICAgIGZuID0gYmluZChmbiwgdGhpc0FyZyk7XG4gICAgfVxuICAgIG5leHRUYXNrcy5wdXNoKGZuKTtcblxuICAgIGlmIChuZXh0SGFuZGxlcikge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbmV4dEhhbmRsZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0YXNrcyA9IG5leHRUYXNrcy5zbGljZSgwKTtcbiAgICAgICAgbmV4dFRhc2tzID0gW107XG4gICAgICAgIG5leHRIYW5kbGVyID0gbnVsbDtcblxuICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IHRhc2tzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgdGFza3NbaV0oKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvLyDpnZ7moIflh4bmlrnms5XvvIzkvYbmmK/mraTmlrnms5XpnZ7luLjlkLvlkIjopoHmsYLjgIJcbiAgICBpZiAodHlwZW9mIHNldEltbWVkaWF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBzZXRJbW1lZGlhdGUobmV4dEhhbmRsZXIpO1xuICAgIH1cbiAgICAvLyDnlKhNZXNzYWdlQ2hhbm5lbOWOu+WBmnNldEltbWVkaWF0ZeeahHBvbHlmaWxsXG4gICAgLy8g5Y6f55CG5piv5bCG5paw55qEbWVzc2FnZeS6i+S7tuWKoOWFpeWIsOWOn+acieeahGRvbSBldmVudHPkuYvlkI5cbiAgICBlbHNlIGlmICh0eXBlb2YgTWVzc2FnZUNoYW5uZWwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdmFyIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgICAgICAgdmFyIHBvcnQgPSBjaGFubmVsLnBvcnQyO1xuICAgICAgICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IG5leHRIYW5kbGVyO1xuICAgICAgICBwb3J0LnBvc3RNZXNzYWdlKDEpO1xuICAgIH1cbiAgICAvLyBmb3IgbmF0aXZlIGFwcFxuICAgIGVsc2UgaWYgKGlzTmF0aXZlUHJvbWlzZSkge1xuICAgICAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKG5leHRIYW5kbGVyKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHNldFRpbWVvdXQobmV4dEhhbmRsZXIsIDApO1xuICAgIH1cbn1cblxuLy8gZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gbmV4dFRpY2s7XG5cblxuLyoqXG4gKiBAZmlsZSBpZeeJiOacrOWPt1xuICogQGF1dGhvciBlcnJvcnJpayhlcnJvcnJpa0BnbWFpbC5jb20pXG4gKi9cblxuLyoqXG4gKiDku451c2VyQWdlbnTkuK1pZeeJiOacrOWPt+eahOWMuemFjeS/oeaBr1xuICpcbiAqIEB0eXBlIHtBcnJheX1cbiAqL1xudmFyIGllVmVyc2lvbk1hdGNoID0gdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCdcbiAgICAmJiBuYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9tc2llXFxzKihbMC05XSspL2kpO1xuXG4vKipcbiAqIGll54mI5pys5Y+377yM6Z2eaWXml7bkuLowXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqL1xudmFyIGllID0gaWVWZXJzaW9uTWF0Y2ggPyBpZVZlcnNpb25NYXRjaFsxXSAtIDAgOiAwO1xuXG4vLyBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBpZTtcblxuXG4vKipcbiAqIEBmaWxlIOaYr+WQpiBJRSDlubbkuJTlsI/kuo4gOVxuICogQGF1dGhvciBlcnJvcnJpayhlcnJvcnJpa0BnbWFpbC5jb20pXG4gKi9cblxuLy8gdmFyIGllID0gcmVxdWlyZSgnLi9pZScpO1xuXG4vLyBIQUNLOlxuLy8gMS4gSUU45LiL77yM6K6+572uaW5uZXJIVE1M5pe25aaC5p6c5LulaHRtbCBjb21tZW505byA5aS077yMY29tbWVudOS8muiiq+iHquWKqOa7pOaOiVxuLy8gICAg5Li65LqG5L+d6K+Bc3R1bXDlrZjlnKjvvIzpnIDopoHorr7nva7lroxodG1s5ZCO77yMY3JlYXRlQ29tbWVudOW5tmFwcGVuZENoaWxkL2luc2VydEJlZm9yZVxuLy8gMi4gSUU45LiL77yMaW5uZXJIVE1M6L+Y5LiN5pSv5oyBY3VzdG9tIGVsZW1lbnTvvIzmiYDku6XpnIDopoHnlKhkaXbmm7/ku6PvvIzkuI3nlKhjcmVhdGVFbGVtZW50XG4vLyAzLiDomb3nhLZJRTjlt7Lnu4/kvJjljJbkuoblrZfnrKbkuLIr6L+e5o6l77yM56KO54mH5YyW6L+e5o6l5oCn6IO95LiN5YaN6YCA5YyWXG4vLyAgICDkvYbmmK/nlLHkuo7kuIrpnaLlpJrkuKrlhbzlrrnlnLrmma/pg73nlKggPCA5IOWIpOaWre+8jOaJgOS7peWtl+espuS4sui/nuaOpeS5n+ayv+eUqFxuLy8gICAg5omA5Lul57uT5p6c5pivSUU45LiL5a2X56ym5Liy6L+e5o6l55So55qE5piv5pWw57uEam9pbueahOaWueW8j1xuXG4vLyAjW2JlZ2luXSBhbGx1YVxuLyoqXG4gKiDmmK/lkKYgSUUg5bm25LiU5bCP5LqOIDlcbiAqL1xudmFyIGllT2xkVGhhbjkgPSBpZSAmJiBpZSA8IDk7XG4vLyAjW2VuZF1cblxuLy8gZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gaWVPbGRUaGFuOTtcblxuXG4vKipcbiAqIEBmaWxlIERPTSDkuovku7bmjILovb1cbiAqIEBhdXRob3IgZGFmcm9rKG8ub0BtdWcuZG9nKVxuICovXG5cbi8qKlxuICogRE9NIOS6i+S7tuaMgui9vVxuICpcbiAqIEBpbm5lclxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWwgRE9N5YWD57SgXG4gKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lIOS6i+S7tuWQjVxuICovXG5mdW5jdGlvbiB0cmlnZ2VyKGVsLCBldmVudE5hbWUpIHtcbiAgICB2YXIgZXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnSFRNTEV2ZW50cycpO1xuICAgIGV2ZW50LmluaXRFdmVudChldmVudE5hbWUsIHRydWUsIHRydWUpO1xuICAgIGVsLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xufVxuXG4vLyBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSB0cmlnZ2VyO1xuXG5cbi8qKlxuICogQGZpbGUg6Kej5YazIElFOSDlnKjooajljZXlhYPntKDkuK3liKDpmaTlrZfnrKbml7bkuI3op6blj5Hkuovku7bnmoTpl67pophcbiAqIEBhdXRob3IgZGFmcm9rKG8ub0BtdWcuZG9nKVxuICovXG5cbi8vIHZhciBpZSA9IHJlcXVpcmUoJy4vaWUnKTtcbi8vIHZhciBvbiA9IHJlcXVpcmUoJy4vb24nKTtcbi8vIHZhciB0cmlnZ2VyID0gcmVxdWlyZSgnLi90cmlnZ2VyJyk7XG5cbi8vICNbYmVnaW5dIGFsbHVhXG5pZiAoaWUgPT09IDkpIHtcbiAgICBvbihkb2N1bWVudCwgJ3NlbGVjdGlvbmNoYW5nZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGVsID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcbiAgICAgICAgaWYgKGVsLnRhZ05hbWUgPT09ICdURVhUQVJFQScgfHwgZWwudGFnTmFtZSA9PT0gJ0lOUFVUJykge1xuICAgICAgICAgICAgdHJpZ2dlcihlbCwgJ2lucHV0Jyk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbi8vICNbZW5kXVxuXG5cbi8qKlxuICogQGZpbGUg6Ieq6Zet5ZCI5qCH562+6KGoXG4gKiBAYXV0aG9yIGVycm9ycmlrKGVycm9ycmlrQGdtYWlsLmNvbSlcbiAqL1xuXG4vLyB2YXIgc3BsaXRTdHIyT2JqID0gcmVxdWlyZSgnLi4vdXRpbC9zcGxpdC1zdHItMi1vYmonKTtcblxuLyoqXG4gKiDoh6rpl63lkIjmoIfnrb7liJfooahcbiAqXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG52YXIgYXV0b0Nsb3NlVGFncyA9IHNwbGl0U3RyMk9iaignYXJlYSxiYXNlLGJyLGNvbCxlbWJlZCxocixpbWcsaW5wdXQsa2V5Z2VuLHBhcmFtLHNvdXJjZSx0cmFjayx3YnInKTtcblxuLy8gZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gYXV0b0Nsb3NlVGFncztcblxuXG4vKipcbiAqIEBmaWxlIGRhdGEgdHlwZXNcbiAqIEBhdXRob3IgbGVvbiA8bHVkYWZhQG91dGxvb2suY29tPlxuICovXG5cbi8vIHZhciBiaW5kID0gcmVxdWlyZSgnLi9iaW5kJyk7XG4vLyB2YXIgZW1wdHkgPSByZXF1aXJlKCcuL2VtcHR5Jyk7XG4vLyB2YXIgZXh0ZW5kID0gcmVxdWlyZSgnLi9leHRlbmQnKTtcblxuLy8gI1tiZWdpbl0gZXJyb3JcbnZhciBBTk9OWU1PVVNfQ0xBU1NfTkFNRSA9ICc8PGFub255bW91cz4+JztcblxuLyoqXG4gKiDojrflj5bnsr7noa7nmoTnsbvlnotcbiAqXG4gKiBATk9URSDlpoLmnpwgb2JqIOaYr+S4gOS4qiBET01FbGVtZW5077yM5oiR5Lus5Lya6L+U5ZueIGBlbGVtZW50YO+8m1xuICpcbiAqIEBwYXJhbSAgeyp9IG9iaiDnm67moIdcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZ2V0RGF0YVR5cGUob2JqKSB7XG5cbiAgICBpZiAob2JqICYmIG9iai5ub2RlVHlwZSA9PT0gMSkge1xuICAgICAgICByZXR1cm4gJ2VsZW1lbnQnO1xuICAgIH1cblxuICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nXG4gICAgICAgIC5jYWxsKG9iailcbiAgICAgICAgLnNsaWNlKDgsIC0xKVxuICAgICAgICAudG9Mb3dlckNhc2UoKTtcbn1cbi8vICNbZW5kXVxuXG4vKipcbiAqIOWIm+W7uumTvuW8j+eahOaVsOaNruexu+Wei+agoemqjOWZqFxuICpcbiAqIEBwYXJhbSAge0Z1bmN0aW9ufSB2YWxpZGF0ZSDnnJ/mraPnmoTmoKHpqozlmahcbiAqIEByZXR1cm4ge0Z1bmN0aW9ufVxuICovXG5mdW5jdGlvbiBjcmVhdGVDaGFpbmFibGVDaGVja2VyKHZhbGlkYXRlKSB7XG4gICAgdmFyIGNoYWluZWRDaGVja2VyID0gZnVuY3Rpb24gKCkge307XG4gICAgY2hhaW5lZENoZWNrZXIuaXNSZXF1aXJlZCA9IGVtcHR5O1xuXG4gICAgLy8g5Y+q5ZyoIGVycm9yIOWKn+iDveWQr+eUqOaXtuaJjeacieWunumZheS4iueahCBkYXRhVHlwZXMg5qOA5rWLXG4gICAgLy8gI1tiZWdpbl0gZXJyb3JcbiAgICB2YXIgY2hlY2tUeXBlID0gZnVuY3Rpb24gKGlzUmVxdWlyZWQsIGRhdGEsIGRhdGFOYW1lLCBjb21wb25lbnROYW1lLCBmdWxsRGF0YU5hbWUpIHtcblxuICAgICAgICB2YXIgZGF0YVZhbHVlID0gZGF0YVtkYXRhTmFtZV07XG4gICAgICAgIHZhciBkYXRhVHlwZSA9IGdldERhdGFUeXBlKGRhdGFWYWx1ZSk7XG5cbiAgICAgICAgY29tcG9uZW50TmFtZSA9IGNvbXBvbmVudE5hbWUgfHwgQU5PTllNT1VTX0NMQVNTX05BTUU7XG5cbiAgICAgICAgLy8g5aaC5p6c5pivIG51bGwg5oiWIHVuZGVmaW5lZO+8jOmCo+S5iOimgeaPkOWJjei/lOWbnuWVplxuICAgICAgICBpZiAoZGF0YVZhbHVlID09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIOaYryByZXF1aXJlZCDlsLHmiqXplJlcbiAgICAgICAgICAgIGlmIChpc1JlcXVpcmVkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdbU0FOIEVSUk9SXSAnXG4gICAgICAgICAgICAgICAgICAgICsgJ1RoZSBgJyArIGRhdGFOYW1lICsgJ2AgJ1xuICAgICAgICAgICAgICAgICAgICArICdpcyBtYXJrZWQgYXMgcmVxdWlyZWQgaW4gYCcgKyBjb21wb25lbnROYW1lICsgJ2AsICdcbiAgICAgICAgICAgICAgICAgICAgKyAnYnV0IGl0cyB2YWx1ZSBpcyAnICsgZGF0YVR5cGVcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8g5LiN5pivIHJlcXVpcmVk77yM6YKj5bCx5pivIG9rIOeahFxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFsaWRhdGUoZGF0YSwgZGF0YU5hbWUsIGNvbXBvbmVudE5hbWUsIGZ1bGxEYXRhTmFtZSk7XG5cbiAgICB9O1xuXG4gICAgY2hhaW5lZENoZWNrZXIgPSBiaW5kKGNoZWNrVHlwZSwgbnVsbCwgZmFsc2UpO1xuICAgIGNoYWluZWRDaGVja2VyLmlzUmVxdWlyZWQgPSBiaW5kKGNoZWNrVHlwZSwgbnVsbCwgdHJ1ZSk7XG4gICAgLy8gI1tlbmRdXG5cblxuXG4gICAgcmV0dXJuIGNoYWluZWRDaGVja2VyO1xuXG59XG5cbi8vICNbYmVnaW5dIGVycm9yXG4vKipcbiAqIOeUn+aIkOS4u+imgeexu+Wei+aVsOaNruagoemqjOWZqFxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gdHlwZSDkuLvnsbvlnotcbiAqIEByZXR1cm4ge0Z1bmN0aW9ufVxuICovXG5mdW5jdGlvbiBjcmVhdGVQcmltYXJ5VHlwZUNoZWNrZXIodHlwZSkge1xuXG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZUNoZWNrZXIoZnVuY3Rpb24gKGRhdGEsIGRhdGFOYW1lLCBjb21wb25lbnROYW1lLCBmdWxsRGF0YU5hbWUpIHtcblxuICAgICAgICB2YXIgZGF0YVZhbHVlID0gZGF0YVtkYXRhTmFtZV07XG4gICAgICAgIHZhciBkYXRhVHlwZSA9IGdldERhdGFUeXBlKGRhdGFWYWx1ZSk7XG5cbiAgICAgICAgaWYgKGRhdGFUeXBlICE9PSB0eXBlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1tTQU4gRVJST1JdICdcbiAgICAgICAgICAgICAgICArICdJbnZhbGlkICcgKyBjb21wb25lbnROYW1lICsgJyBkYXRhIGAnICsgZnVsbERhdGFOYW1lICsgJ2Agb2YgdHlwZSdcbiAgICAgICAgICAgICAgICArICcoJyArIGRhdGFUeXBlICsgJyBzdXBwbGllZCB0byAnICsgY29tcG9uZW50TmFtZSArICcsICdcbiAgICAgICAgICAgICAgICArICdleHBlY3RlZCAnICsgdHlwZSArICcpJ1xuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgfSk7XG5cbn1cblxuXG5cbi8qKlxuICog55Sf5oiQIGFycmF5T2Yg5qCh6aqM5ZmoXG4gKlxuICogQHBhcmFtICB7RnVuY3Rpb259IGFycmF5SXRlbUNoZWNrZXIg5pWw57uE5Lit5q+P6aG55pWw5o2u55qE5qCh6aqM5ZmoXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQXJyYXlPZkNoZWNrZXIoYXJyYXlJdGVtQ2hlY2tlcikge1xuXG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZUNoZWNrZXIoZnVuY3Rpb24gKGRhdGEsIGRhdGFOYW1lLCBjb21wb25lbnROYW1lLCBmdWxsRGF0YU5hbWUpIHtcblxuICAgICAgICBpZiAodHlwZW9mIGFycmF5SXRlbUNoZWNrZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignW1NBTiBFUlJPUl0gJ1xuICAgICAgICAgICAgICAgICsgJ0RhdGEgYCcgKyBkYXRhTmFtZSArICdgIG9mIGAnICsgY29tcG9uZW50TmFtZSArICdgIGhhcyBpbnZhbGlkICdcbiAgICAgICAgICAgICAgICArICdEYXRhVHlwZSBub3RhdGlvbiBpbnNpZGUgYGFycmF5T2ZgLCBleHBlY3RlZCBgZnVuY3Rpb25gJ1xuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkYXRhVmFsdWUgPSBkYXRhW2RhdGFOYW1lXTtcbiAgICAgICAgdmFyIGRhdGFUeXBlID0gZ2V0RGF0YVR5cGUoZGF0YVZhbHVlKTtcblxuICAgICAgICBpZiAoZGF0YVR5cGUgIT09ICdhcnJheScpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignW1NBTiBFUlJPUl0gJ1xuICAgICAgICAgICAgICAgICsgJ0ludmFsaWQgJyArIGNvbXBvbmVudE5hbWUgKyAnIGRhdGEgYCcgKyBmdWxsRGF0YU5hbWUgKyAnYCBvZiB0eXBlJ1xuICAgICAgICAgICAgICAgICsgJygnICsgZGF0YVR5cGUgKyAnIHN1cHBsaWVkIHRvICcgKyBjb21wb25lbnROYW1lICsgJywgJ1xuICAgICAgICAgICAgICAgICsgJ2V4cGVjdGVkIGFycmF5KSdcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gZGF0YVZhbHVlLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBhcnJheUl0ZW1DaGVja2VyKGRhdGFWYWx1ZSwgaSwgY29tcG9uZW50TmFtZSwgZnVsbERhdGFOYW1lICsgJ1snICsgaSArICddJyk7XG4gICAgICAgIH1cblxuICAgIH0pO1xuXG59XG5cbi8qKlxuICog55Sf5oiQIGluc3RhbmNlT2Yg5qOA5rWL5ZmoXG4gKlxuICogQHBhcmFtICB7RnVuY3Rpb258Q2xhc3N9IGV4cGVjdGVkQ2xhc3Mg5pyf5b6F55qE57G7XG4gKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2VPZkNoZWNrZXIoZXhwZWN0ZWRDbGFzcykge1xuXG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZUNoZWNrZXIoZnVuY3Rpb24gKGRhdGEsIGRhdGFOYW1lLCBjb21wb25lbnROYW1lLCBmdWxsRGF0YU5hbWUpIHtcblxuICAgICAgICB2YXIgZGF0YVZhbHVlID0gZGF0YVtkYXRhTmFtZV07XG5cbiAgICAgICAgaWYgKGRhdGFWYWx1ZSBpbnN0YW5jZW9mIGV4cGVjdGVkQ2xhc3MpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkYXRhVmFsdWVDbGFzc05hbWUgPSBkYXRhVmFsdWUuY29uc3RydWN0b3IgJiYgZGF0YVZhbHVlLmNvbnN0cnVjdG9yLm5hbWVcbiAgICAgICAgICAgID8gZGF0YVZhbHVlLmNvbnN0cnVjdG9yLm5hbWVcbiAgICAgICAgICAgIDogQU5PTllNT1VTX0NMQVNTX05BTUU7XG5cbiAgICAgICAgdmFyIGV4cGVjdGVkQ2xhc3NOYW1lID0gZXhwZWN0ZWRDbGFzcy5uYW1lIHx8IEFOT05ZTU9VU19DTEFTU19OQU1FO1xuXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignW1NBTiBFUlJPUl0gJ1xuICAgICAgICAgICAgKyAnSW52YWxpZCAnICsgY29tcG9uZW50TmFtZSArICcgZGF0YSBgJyArIGZ1bGxEYXRhTmFtZSArICdgIG9mIHR5cGUnXG4gICAgICAgICAgICArICcoJyArIGRhdGFWYWx1ZUNsYXNzTmFtZSArICcgc3VwcGxpZWQgdG8gJyArIGNvbXBvbmVudE5hbWUgKyAnLCAnXG4gICAgICAgICAgICArICdleHBlY3RlZCBpbnN0YW5jZSBvZiAnICsgZXhwZWN0ZWRDbGFzc05hbWUgKyAnKSdcbiAgICAgICAgKTtcblxuXG4gICAgfSk7XG5cbn1cblxuLyoqXG4gKiDnlJ/miJAgc2hhcGUg5qCh6aqM5ZmoXG4gKlxuICogQHBhcmFtICB7T2JqZWN0fSBzaGFwZVR5cGVzIHNoYXBlIOagoemqjOinhOWImVxuICogQHJldHVybiB7RnVuY3Rpb259XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVNoYXBlQ2hlY2tlcihzaGFwZVR5cGVzKSB7XG5cbiAgICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlQ2hlY2tlcihmdW5jdGlvbiAoZGF0YSwgZGF0YU5hbWUsIGNvbXBvbmVudE5hbWUsIGZ1bGxEYXRhTmFtZSkge1xuXG4gICAgICAgIGlmIChnZXREYXRhVHlwZShzaGFwZVR5cGVzKSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignW1NBTiBFUlJPUl0gJ1xuICAgICAgICAgICAgICAgICsgJ0RhdGEgYCcgKyBmdWxsRGF0YU5hbWUgKyAnYCBvZiBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCBoYXMgaW52YWxpZCAnXG4gICAgICAgICAgICAgICAgKyAnRGF0YVR5cGUgbm90YXRpb24gaW5zaWRlIGBzaGFwZWAsIGV4cGVjdGVkIGBvYmplY3RgJ1xuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkYXRhVmFsdWUgPSBkYXRhW2RhdGFOYW1lXTtcbiAgICAgICAgdmFyIGRhdGFUeXBlID0gZ2V0RGF0YVR5cGUoZGF0YVZhbHVlKTtcblxuICAgICAgICBpZiAoZGF0YVR5cGUgIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1tTQU4gRVJST1JdICdcbiAgICAgICAgICAgICAgICArICdJbnZhbGlkICcgKyBjb21wb25lbnROYW1lICsgJyBkYXRhIGAnICsgZnVsbERhdGFOYW1lICsgJ2Agb2YgdHlwZSdcbiAgICAgICAgICAgICAgICArICcoJyArIGRhdGFUeXBlICsgJyBzdXBwbGllZCB0byAnICsgY29tcG9uZW50TmFtZSArICcsICdcbiAgICAgICAgICAgICAgICArICdleHBlY3RlZCBvYmplY3QpJ1xuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIHNoYXBlS2V5TmFtZSBpbiBzaGFwZVR5cGVzKSB7XG4gICAgICAgICAgICBpZiAoc2hhcGVUeXBlcy5oYXNPd25Qcm9wZXJ0eShzaGFwZUtleU5hbWUpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNoZWNrZXIgPSBzaGFwZVR5cGVzW3NoYXBlS2V5TmFtZV07XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjaGVja2VyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoZWNrZXIoZGF0YVZhbHVlLCBzaGFwZUtleU5hbWUsIGNvbXBvbmVudE5hbWUsIGZ1bGxEYXRhTmFtZSArICcuJyArIHNoYXBlS2V5TmFtZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICB9KTtcblxufVxuXG4vKipcbiAqIOeUn+aIkCBvbmVPZiDmoKHpqozlmahcbiAqXG4gKiBAcGFyYW0gIHtBcnJheX0gZXhwZWN0ZWRFbnVtVmFsdWVzIOacn+W+heeahOaemuS4vuWAvFxuICogQHJldHVybiB7RnVuY3Rpb259XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZU9uZU9mQ2hlY2tlcihleHBlY3RlZEVudW1WYWx1ZXMpIHtcblxuICAgIHJldHVybiBjcmVhdGVDaGFpbmFibGVDaGVja2VyKGZ1bmN0aW9uIChkYXRhLCBkYXRhTmFtZSwgY29tcG9uZW50TmFtZSwgZnVsbERhdGFOYW1lKSB7XG5cbiAgICAgICAgaWYgKGdldERhdGFUeXBlKGV4cGVjdGVkRW51bVZhbHVlcykgIT09ICdhcnJheScpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignW1NBTiBFUlJPUl0gJ1xuICAgICAgICAgICAgICAgICsgJ0RhdGEgYCcgKyBmdWxsRGF0YU5hbWUgKyAnYCBvZiBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCBoYXMgaW52YWxpZCAnXG4gICAgICAgICAgICAgICAgKyAnRGF0YVR5cGUgbm90YXRpb24gaW5zaWRlIGBvbmVPZmAsIGFycmF5IGlzIGV4cGVjdGVkLidcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZGF0YVZhbHVlID0gZGF0YVtkYXRhTmFtZV07XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGV4cGVjdGVkRW51bVZhbHVlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgaWYgKGRhdGFWYWx1ZSA9PT0gZXhwZWN0ZWRFbnVtVmFsdWVzW2ldKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdbU0FOIEVSUk9SXSAnXG4gICAgICAgICAgICArICdJbnZhbGlkICcgKyBjb21wb25lbnROYW1lICsgJyBkYXRhIGAnICsgZnVsbERhdGFOYW1lICsgJ2Agb2YgdmFsdWUnXG4gICAgICAgICAgICArICcoYCcgKyBkYXRhVmFsdWUgKyAnYCBzdXBwbGllZCB0byAnICsgY29tcG9uZW50TmFtZSArICcsICdcbiAgICAgICAgICAgICsgJ2V4cGVjdGVkIG9uZSBvZiAnICsgZXhwZWN0ZWRFbnVtVmFsdWVzLmpvaW4oJywnKSArICcpJ1xuICAgICAgICApO1xuXG4gICAgfSk7XG5cbn1cblxuLyoqXG4gKiDnlJ/miJAgb25lT2ZUeXBlIOagoemqjOWZqFxuICpcbiAqIEBwYXJhbSAge0FycmF5PEZ1bmN0aW9uPn0gZXhwZWN0ZWRFbnVtT2ZUeXBlVmFsdWVzIOacn+W+heeahOaemuS4vuexu+Wei1xuICogQHJldHVybiB7RnVuY3Rpb259XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZU9uZU9mVHlwZUNoZWNrZXIoZXhwZWN0ZWRFbnVtT2ZUeXBlVmFsdWVzKSB7XG5cbiAgICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlQ2hlY2tlcihmdW5jdGlvbiAoZGF0YSwgZGF0YU5hbWUsIGNvbXBvbmVudE5hbWUsIGZ1bGxEYXRhTmFtZSkge1xuXG4gICAgICAgIGlmIChnZXREYXRhVHlwZShleHBlY3RlZEVudW1PZlR5cGVWYWx1ZXMpICE9PSAnYXJyYXknKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1tTQU4gRVJST1JdICdcbiAgICAgICAgICAgICAgICArICdEYXRhIGAnICsgZGF0YU5hbWUgKyAnYCBvZiBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCBoYXMgaW52YWxpZCAnXG4gICAgICAgICAgICAgICAgKyAnRGF0YVR5cGUgbm90YXRpb24gaW5zaWRlIGBvbmVPZmAsIGFycmF5IGlzIGV4cGVjdGVkLidcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZGF0YVZhbHVlID0gZGF0YVtkYXRhTmFtZV07XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGV4cGVjdGVkRW51bU9mVHlwZVZhbHVlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuXG4gICAgICAgICAgICB2YXIgY2hlY2tlciA9IGV4cGVjdGVkRW51bU9mVHlwZVZhbHVlc1tpXTtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjaGVja2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY2hlY2tlcihkYXRhLCBkYXRhTmFtZSwgY29tcG9uZW50TmFtZSwgZnVsbERhdGFOYW1lKTtcbiAgICAgICAgICAgICAgICAvLyDlpoLmnpwgY2hlY2tlciDlrozmiJDmoKHpqozmsqHmiqXplJnvvIzpgqPlsLHov5Tlm57kuoZcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIC8vIOWmguaenOaciemUmeivr++8jOmCo+S5iOW6lOivpeaKiumUmeivr+WQnuaOiVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgICAvLyDmiYDmnInnmoTlj6/mjqXlj5cgdHlwZSDpg73lpLHotKXkuobvvIzmiY3kuKLkuIDkuKrlvILluLhcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdbU0FOIEVSUk9SXSAnXG4gICAgICAgICAgICArICdJbnZhbGlkICcgKyBjb21wb25lbnROYW1lICsgJyBkYXRhIGAnICsgZGF0YU5hbWUgKyAnYCBvZiB2YWx1ZSdcbiAgICAgICAgICAgICsgJyhgJyArIGRhdGFWYWx1ZSArICdgIHN1cHBsaWVkIHRvICcgKyBjb21wb25lbnROYW1lICsgJyknXG4gICAgICAgICk7XG5cbiAgICB9KTtcblxufVxuXG4vKipcbiAqIOeUn+aIkCBvYmplY3RPZiDmoKHpqozlmahcbiAqXG4gKiBAcGFyYW0gIHtGdW5jdGlvbn0gdHlwZUNoZWNrZXIg5a+56LGh5bGe5oCn5YC85qCh6aqM5ZmoXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAqL1xuZnVuY3Rpb24gY3JlYXRlT2JqZWN0T2ZDaGVja2VyKHR5cGVDaGVja2VyKSB7XG5cbiAgICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlQ2hlY2tlcihmdW5jdGlvbiAoZGF0YSwgZGF0YU5hbWUsIGNvbXBvbmVudE5hbWUsIGZ1bGxEYXRhTmFtZSkge1xuXG4gICAgICAgIGlmICh0eXBlb2YgdHlwZUNoZWNrZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignW1NBTiBFUlJPUl0gJ1xuICAgICAgICAgICAgICAgICsgJ0RhdGEgYCcgKyBkYXRhTmFtZSArICdgIG9mIGAnICsgY29tcG9uZW50TmFtZSArICdgIGhhcyBpbnZhbGlkICdcbiAgICAgICAgICAgICAgICArICdEYXRhVHlwZSBub3RhdGlvbiBpbnNpZGUgYG9iamVjdE9mYCwgZXhwZWN0ZWQgZnVuY3Rpb24nXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGRhdGFWYWx1ZSA9IGRhdGFbZGF0YU5hbWVdO1xuICAgICAgICB2YXIgZGF0YVR5cGUgPSBnZXREYXRhVHlwZShkYXRhVmFsdWUpO1xuXG4gICAgICAgIGlmIChkYXRhVHlwZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignW1NBTiBFUlJPUl0gJ1xuICAgICAgICAgICAgICAgICsgJ0ludmFsaWQgJyArIGNvbXBvbmVudE5hbWUgKyAnIGRhdGEgYCcgKyBkYXRhTmFtZSArICdgIG9mIHR5cGUnXG4gICAgICAgICAgICAgICAgKyAnKCcgKyBkYXRhVHlwZSArICcgc3VwcGxpZWQgdG8gJyArIGNvbXBvbmVudE5hbWUgKyAnLCAnXG4gICAgICAgICAgICAgICAgKyAnZXhwZWN0ZWQgb2JqZWN0KSdcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBkYXRhS2V5TmFtZSBpbiBkYXRhVmFsdWUpIHtcbiAgICAgICAgICAgIGlmIChkYXRhVmFsdWUuaGFzT3duUHJvcGVydHkoZGF0YUtleU5hbWUpKSB7XG4gICAgICAgICAgICAgICAgdHlwZUNoZWNrZXIoXG4gICAgICAgICAgICAgICAgICAgIGRhdGFWYWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YUtleU5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudE5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGZ1bGxEYXRhTmFtZSArICcuJyArIGRhdGFLZXlOYW1lXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG5cbiAgICB9KTtcblxufVxuXG4vKipcbiAqIOeUn+aIkCBleGFjdCDmoKHpqozlmahcbiAqXG4gKiBAcGFyYW0gIHtPYmplY3R9IHNoYXBlVHlwZXMgb2JqZWN0IOW9ouaAgeWumuS5iVxuICogQHJldHVybiB7RnVuY3Rpb259XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUV4YWN0Q2hlY2tlcihzaGFwZVR5cGVzKSB7XG5cbiAgICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlQ2hlY2tlcihmdW5jdGlvbiAoZGF0YSwgZGF0YU5hbWUsIGNvbXBvbmVudE5hbWUsIGZ1bGxEYXRhTmFtZSwgc2VjcmV0KSB7XG5cbiAgICAgICAgaWYgKGdldERhdGFUeXBlKHNoYXBlVHlwZXMpICE9PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdbU0FOIEVSUk9SXSAnXG4gICAgICAgICAgICAgICAgKyAnRGF0YSBgJyArIGRhdGFOYW1lICsgJ2Agb2YgYCcgKyBjb21wb25lbnROYW1lICsgJ2AgaGFzIGludmFsaWQgJ1xuICAgICAgICAgICAgICAgICsgJ0RhdGFUeXBlIG5vdGF0aW9uIGluc2lkZSBgZXhhY3RgJ1xuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkYXRhVmFsdWUgPSBkYXRhW2RhdGFOYW1lXTtcbiAgICAgICAgdmFyIGRhdGFWYWx1ZVR5cGUgPSBnZXREYXRhVHlwZShkYXRhVmFsdWUpO1xuXG4gICAgICAgIGlmIChkYXRhVmFsdWVUeXBlICE9PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdbU0FOIEVSUk9SXSAnXG4gICAgICAgICAgICAgICAgKyAnSW52YWxpZCBkYXRhIGAnICsgZnVsbERhdGFOYW1lICsgJ2Agb2YgdHlwZSBgJyArIGRhdGFWYWx1ZVR5cGUgKyAnYCdcbiAgICAgICAgICAgICAgICArICcoc3VwcGxpZWQgdG8gJyArIGNvbXBvbmVudE5hbWUgKyAnLCBleHBlY3RlZCBgb2JqZWN0YCknXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGFsbEtleXMgPSB7fTtcblxuICAgICAgICAvLyDlhYjlkIjlhaUgc2hhcGVUeXBlc1xuICAgICAgICBleHRlbmQoYWxsS2V5cywgc2hhcGVUeXBlcyk7XG4gICAgICAgIC8vIOWGjeWQiOWFpSBkYXRhVmFsdWVcbiAgICAgICAgZXh0ZW5kKGFsbEtleXMsIGRhdGFWYWx1ZSk7XG4gICAgICAgIC8vIOS/neivgSBhbGxLZXlzIOeahOexu+Wei+ato+ehrlxuXG4gICAgICAgIGZvciAodmFyIGtleSBpbiBhbGxLZXlzKSB7XG4gICAgICAgICAgICBpZiAoYWxsS2V5cy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNoZWNrZXIgPSBzaGFwZVR5cGVzW2tleV07XG5cbiAgICAgICAgICAgICAgICAvLyBkYXRhVmFsdWUg5Lit5pyJ5LiA5Liq5aSa5L2Z55qE5pWw5o2u6aG5XG4gICAgICAgICAgICAgICAgaWYgKCFjaGVja2VyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignW1NBTiBFUlJPUl0gJ1xuICAgICAgICAgICAgICAgICAgICAgICAgKyAnSW52YWxpZCBkYXRhIGAnICsgZnVsbERhdGFOYW1lICsgJ2Aga2V5IGAnICsga2V5ICsgJ2AgJ1xuICAgICAgICAgICAgICAgICAgICAgICAgKyAnc3VwcGxpZWQgdG8gYCcgKyBjb21wb25lbnROYW1lICsgJ2AuICdcbiAgICAgICAgICAgICAgICAgICAgICAgICsgJyhgJyArIGtleSArICdgIGlzIG5vdCBkZWZpbmVkIGluIGBEYXRhVHlwZXMuZXhhY3RgKSdcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoIShrZXkgaW4gZGF0YVZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1tTQU4gRVJST1JdICdcbiAgICAgICAgICAgICAgICAgICAgICAgICsgJ0ludmFsaWQgZGF0YSBgJyArIGZ1bGxEYXRhTmFtZSArICdgIGtleSBgJyArIGtleSArICdgICdcbiAgICAgICAgICAgICAgICAgICAgICAgICsgJ3N1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLiAnXG4gICAgICAgICAgICAgICAgICAgICAgICArICcoYCcgKyBrZXkgKyAnYCBpcyBtYXJrZWQgYHJlcXVpcmVkYCBpbiBgRGF0YVR5cGVzLmV4YWN0YCknXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY2hlY2tlcihcbiAgICAgICAgICAgICAgICAgICAgZGF0YVZhbHVlLFxuICAgICAgICAgICAgICAgICAgICBrZXksXG4gICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudE5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGZ1bGxEYXRhTmFtZSArICcuJyArIGtleSxcbiAgICAgICAgICAgICAgICAgICAgc2VjcmV0XG4gICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICB9KTtcblxufVxuLy8gI1tlbmRdXG5cblxuXG4vKiBlc2xpbnQtZGlzYWJsZSBmZWNzLXZhbGlkLXZhci1qc2RvYyAqL1xudmFyIERhdGFUeXBlcyA9IHtcbiAgICBhcnJheTogY3JlYXRlQ2hhaW5hYmxlQ2hlY2tlcihlbXB0eSksXG4gICAgb2JqZWN0OiBjcmVhdGVDaGFpbmFibGVDaGVja2VyKGVtcHR5KSxcbiAgICBmdW5jOiBjcmVhdGVDaGFpbmFibGVDaGVja2VyKGVtcHR5KSxcbiAgICBzdHJpbmc6IGNyZWF0ZUNoYWluYWJsZUNoZWNrZXIoZW1wdHkpLFxuICAgIG51bWJlcjogY3JlYXRlQ2hhaW5hYmxlQ2hlY2tlcihlbXB0eSksXG4gICAgYm9vbDogY3JlYXRlQ2hhaW5hYmxlQ2hlY2tlcihlbXB0eSksXG4gICAgc3ltYm9sOiBjcmVhdGVDaGFpbmFibGVDaGVja2VyKGVtcHR5KSxcbiAgICBhbnk6IGNyZWF0ZUNoYWluYWJsZUNoZWNrZXIsXG4gICAgYXJyYXlPZjogY3JlYXRlQ2hhaW5hYmxlQ2hlY2tlcixcbiAgICBpbnN0YW5jZU9mOiBjcmVhdGVDaGFpbmFibGVDaGVja2VyLFxuICAgIHNoYXBlOiBjcmVhdGVDaGFpbmFibGVDaGVja2VyLFxuICAgIG9uZU9mOiBjcmVhdGVDaGFpbmFibGVDaGVja2VyLFxuICAgIG9uZU9mVHlwZTogY3JlYXRlQ2hhaW5hYmxlQ2hlY2tlcixcbiAgICBvYmplY3RPZjogY3JlYXRlQ2hhaW5hYmxlQ2hlY2tlcixcbiAgICBleGFjdDogY3JlYXRlQ2hhaW5hYmxlQ2hlY2tlclxufTtcblxuLy8gI1tiZWdpbl0gZXJyb3JcbkRhdGFUeXBlcyA9IHtcblxuICAgIGFueTogY3JlYXRlQ2hhaW5hYmxlQ2hlY2tlcihlbXB0eSksXG5cbiAgICAvLyDnsbvlnovmo4DmtYtcbiAgICBhcnJheTogY3JlYXRlUHJpbWFyeVR5cGVDaGVja2VyKCdhcnJheScpLFxuICAgIG9iamVjdDogY3JlYXRlUHJpbWFyeVR5cGVDaGVja2VyKCdvYmplY3QnKSxcbiAgICBmdW5jOiBjcmVhdGVQcmltYXJ5VHlwZUNoZWNrZXIoJ2Z1bmN0aW9uJyksXG4gICAgc3RyaW5nOiBjcmVhdGVQcmltYXJ5VHlwZUNoZWNrZXIoJ3N0cmluZycpLFxuICAgIG51bWJlcjogY3JlYXRlUHJpbWFyeVR5cGVDaGVja2VyKCdudW1iZXInKSxcbiAgICBib29sOiBjcmVhdGVQcmltYXJ5VHlwZUNoZWNrZXIoJ2Jvb2xlYW4nKSxcbiAgICBzeW1ib2w6IGNyZWF0ZVByaW1hcnlUeXBlQ2hlY2tlcignc3ltYm9sJyksXG5cbiAgICAvLyDlpI3lkIjnsbvlnovmo4DmtYtcbiAgICBhcnJheU9mOiBjcmVhdGVBcnJheU9mQ2hlY2tlcixcbiAgICBpbnN0YW5jZU9mOiBjcmVhdGVJbnN0YW5jZU9mQ2hlY2tlcixcbiAgICBzaGFwZTogY3JlYXRlU2hhcGVDaGVja2VyLFxuICAgIG9uZU9mOiBjcmVhdGVPbmVPZkNoZWNrZXIsXG4gICAgb25lT2ZUeXBlOiBjcmVhdGVPbmVPZlR5cGVDaGVja2VyLFxuICAgIG9iamVjdE9mOiBjcmVhdGVPYmplY3RPZkNoZWNrZXIsXG4gICAgZXhhY3Q6IGNyZWF0ZUV4YWN0Q2hlY2tlclxuXG59O1xuLyogZXNsaW50LWVuYWJsZSBmZWNzLXZhbGlkLXZhci1qc2RvYyAqL1xuLy8gI1tlbmRdXG5cblxuLy8gbW9kdWxlLmV4cG9ydHMgPSBEYXRhVHlwZXM7XG5cblxuLyoqXG4gKiBAZmlsZSDliJvlu7rmlbDmja7mo4DmtYvlh73mlbBcbiAqIEBhdXRob3IgbGVvbjxsdWRhZmFAb3V0bG9vay5jb20+XG4gKi9cblxuXG4vLyAjW2JlZ2luXSBlcnJvclxuXG4vKipcbiAqIOWIm+W7uuaVsOaNruajgOa1i+WHveaVsFxuICpcbiAqIEBwYXJhbSAge09iamVjdH0gZGF0YVR5cGVzICAgICDmlbDmja7moLzlvI9cbiAqIEBwYXJhbSAge3N0cmluZ30gY29tcG9uZW50TmFtZSDnu4Tku7blkI1cbiAqIEByZXR1cm4ge0Z1bmN0aW9ufVxuICovXG5mdW5jdGlvbiBjcmVhdGVEYXRhVHlwZXNDaGVja2VyKGRhdGFUeXBlcywgY29tcG9uZW50TmFtZSkge1xuXG4gICAgLyoqXG4gICAgICog5qCh6aqMIGRhdGEg5piv5ZCm5ruh6LazIGRhdGEgdHlwZXMg55qE5qC85byPXG4gICAgICpcbiAgICAgKiBAcGFyYW0gIHsqfSBkYXRhIOaVsOaNrlxuICAgICAqL1xuICAgIHJldHVybiBmdW5jdGlvbiAoZGF0YSkge1xuXG4gICAgICAgIGZvciAodmFyIGRhdGFUeXBlTmFtZSBpbiBkYXRhVHlwZXMpIHtcblxuICAgICAgICAgICAgaWYgKGRhdGFUeXBlcy5oYXNPd25Qcm9wZXJ0eShkYXRhVHlwZU5hbWUpKSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgZGF0YVR5cGVDaGVja2VyID0gZGF0YVR5cGVzW2RhdGFUeXBlTmFtZV07XG5cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRhdGFUeXBlQ2hlY2tlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1tTQU4gRVJST1JdICdcbiAgICAgICAgICAgICAgICAgICAgICAgICsgY29tcG9uZW50TmFtZSArICc6JyArIGRhdGFUeXBlTmFtZSArICcgaXMgaW52YWxpZDsgJ1xuICAgICAgICAgICAgICAgICAgICAgICAgKyAnaXQgbXVzdCBiZSBhIGZ1bmN0aW9uLCB1c3VhbGx5IGZyb20gc2FuLkRhdGFUeXBlcydcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBkYXRhVHlwZUNoZWNrZXIoXG4gICAgICAgICAgICAgICAgICAgIGRhdGEsXG4gICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50TmFtZSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YVR5cGVOYW1lXG4gICAgICAgICAgICAgICAgKTtcblxuXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgIH07XG5cbn1cblxuLy8gI1tlbmRdXG5cbi8vIG1vZHVsZS5leHBvcnRzID0gY3JlYXRlRGF0YVR5cGVzQ2hlY2tlcjtcblxuXG4vKipcbiAqIEBmaWxlIOWtl+espuS4sua6kOeggeivu+WPluexu1xuICogQGF1dGhvciBlcnJvcnJpayhlcnJvcnJpa0BnbWFpbC5jb20pXG4gKi9cblxuXG4vKipcbiAqIOWtl+espuS4sua6kOeggeivu+WPluexu++8jOeUqOS6juaooeadv+Wtl+espuS4suino+aekOi/h+eoi1xuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtzdHJpbmd9IHNvdXJjZSDopoHor7vlj5bnmoTlrZfnrKbkuLJcbiAqL1xuZnVuY3Rpb24gV2Fsa2VyKHNvdXJjZSkge1xuICAgIHRoaXMuc291cmNlID0gc291cmNlO1xuICAgIHRoaXMubGVuID0gdGhpcy5zb3VyY2UubGVuZ3RoO1xuICAgIHRoaXMuaW5kZXggPSAwO1xufVxuXG4vKipcbiAqIOiOt+WPluW9k+WJjeWtl+espueggVxuICpcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuV2Fsa2VyLnByb3RvdHlwZS5jdXJyZW50Q29kZSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5jaGFyQ29kZSh0aGlzLmluZGV4KTtcbn07XG5cbi8qKlxuICog5oiq5Y+W5a2X56ym5Liy54mH5q61XG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IOi1t+Wni+S9jee9rlxuICogQHBhcmFtIHtudW1iZXJ9IGVuZCDnu5PmnZ/kvY3nva5cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuV2Fsa2VyLnByb3RvdHlwZS5jdXQgPSBmdW5jdGlvbiAoc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiB0aGlzLnNvdXJjZS5zbGljZShzdGFydCwgZW5kKTtcbn07XG5cbi8qKlxuICog5ZCR5YmN6K+75Y+W5a2X56ymXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IGRpc3RhbmNlIOivu+WPluWtl+espuaVsFxuICovXG5XYWxrZXIucHJvdG90eXBlLmdvID0gZnVuY3Rpb24gKGRpc3RhbmNlKSB7XG4gICAgdGhpcy5pbmRleCArPSBkaXN0YW5jZTtcbn07XG5cbi8qKlxuICog6K+75Y+W5LiL5LiA5Liq5a2X56ym77yM6L+U5Zue5LiL5LiA5Liq5a2X56ym55qEIGNvZGVcbiAqXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbldhbGtlci5wcm90b3R5cGUubmV4dENvZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5nbygxKTtcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50Q29kZSgpO1xufTtcblxuLyoqXG4gKiDojrflj5bnm7jlupTkvY3nva7lrZfnrKbnmoQgY29kZVxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCDlrZfnrKbkvY3nva5cbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuV2Fsa2VyLnByb3RvdHlwZS5jaGFyQ29kZSA9IGZ1bmN0aW9uIChpbmRleCkge1xuICAgIHJldHVybiB0aGlzLnNvdXJjZS5jaGFyQ29kZUF0KGluZGV4KTtcbn07XG5cbi8qKlxuICog5ZCR5YmN6K+75Y+W5a2X56ym77yM55u05Yiw6YGH5Yiw5oyH5a6a5a2X56ym5YaN5YGc5q2iXG4gKlxuICogQHBhcmFtIHtudW1iZXI9fSBjaGFyQ29kZSDmjIflrprlrZfnrKbnmoRjb2RlXG4gKiBAcmV0dXJuIHtib29sZWFufSDlvZPmjIflrprlrZfnrKbml7bvvIzov5Tlm57mmK/lkKbnorDliLDmjIflrprnmoTlrZfnrKZcbiAqL1xuV2Fsa2VyLnByb3RvdHlwZS5nb1VudGlsID0gZnVuY3Rpb24gKGNoYXJDb2RlKSB7XG4gICAgdmFyIGNvZGU7XG4gICAgd2hpbGUgKHRoaXMuaW5kZXggPCB0aGlzLmxlbiAmJiAoY29kZSA9IHRoaXMuY3VycmVudENvZGUoKSkpIHtcbiAgICAgICAgc3dpdGNoIChjb2RlKSB7XG4gICAgICAgICAgICBjYXNlIDMyOlxuICAgICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgICAgIHRoaXMuaW5kZXgrKztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgaWYgKGNvZGUgPT09IGNoYXJDb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5kZXgrKztcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbi8qKlxuICog5ZCR5YmN6K+75Y+W56ym5ZCI6KeE5YiZ55qE5a2X56ym54mH5q6177yM5bm26L+U5Zue6KeE5YiZ5Yy56YWN57uT5p6cXG4gKlxuICogQHBhcmFtIHtSZWdFeHB9IHJlZyDlrZfnrKbniYfmrrXnmoTmraPliJnooajovr7lvI9cbiAqIEByZXR1cm4ge0FycmF5fVxuICovXG5XYWxrZXIucHJvdG90eXBlLm1hdGNoID0gZnVuY3Rpb24gKHJlZykge1xuICAgIHJlZy5sYXN0SW5kZXggPSB0aGlzLmluZGV4O1xuXG4gICAgdmFyIG1hdGNoID0gcmVnLmV4ZWModGhpcy5zb3VyY2UpO1xuICAgIGlmIChtYXRjaCkge1xuICAgICAgICB0aGlzLmluZGV4ID0gcmVnLmxhc3RJbmRleDtcbiAgICB9XG5cbiAgICByZXR1cm4gbWF0Y2g7XG59O1xuXG4vLyBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBXYWxrZXI7XG5cblxuXG4vKipcbiAqIEBmaWxlIOaooeadv+ino+aekOeUn+aIkOeahOaKveixoeiKgueCuVxuICogQGF1dGhvciBlcnJvcnJpayhlcnJvcnJpa0BnbWFpbC5jb20pXG4gKi9cblxuLyoqXG4gKiDliJvlu7rmqKHmnb/op6PmnpDnlJ/miJDnmoTmir3osaHoioLngrlcbiAqXG4gKiBAcGFyYW0ge09iamVjdD19IG9wdGlvbnMg6IqC54K55Y+C5pWwXG4gKiBAcGFyYW0ge3N0cmluZz19IG9wdGlvbnMudGFnTmFtZSDmoIfnrb7lkI1cbiAqIEBwYXJhbSB7QU5vZGU9fSBvcHRpb25zLnBhcmVudCDniLboioLngrlcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdGlvbnMudGV4dEV4cHIg5paH5pys6IqC54K56KGo6L6+5byP5a+56LGhXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUFOb2RlKG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgIGlmICghb3B0aW9ucy50ZXh0RXhwcikge1xuICAgICAgICBvcHRpb25zLmRpcmVjdGl2ZXMgPSBvcHRpb25zLmRpcmVjdGl2ZXMgfHwge307XG4gICAgICAgIG9wdGlvbnMucHJvcHMgPSBvcHRpb25zLnByb3BzIHx8IFtdO1xuICAgICAgICBvcHRpb25zLmV2ZW50cyA9IG9wdGlvbnMuZXZlbnRzIHx8IFtdO1xuICAgICAgICBvcHRpb25zLmNoaWxkcmVuID0gb3B0aW9ucy5jaGlsZHJlbiB8fCBbXTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3B0aW9ucztcbn1cblxuLy8gZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gY3JlYXRlQU5vZGU7XG5cblxuLyoqXG4gKiBAZmlsZSDmiooga2ViYWIgY2FzZSDlrZfnrKbkuLLovazmjaLmiJAgY2FtZWwgY2FzZVxuICogQGF1dGhvciBlcnJvcnJpayhlcnJvcnJpa0BnbWFpbC5jb20pXG4gKi9cblxuLyoqXG4gKiDmiooga2ViYWIgY2FzZSDlrZfnrKbkuLLovazmjaLmiJAgY2FtZWwgY2FzZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzb3VyY2Ug5rqQ5a2X56ym5LiyXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGtlYmFiMmNhbWVsKHNvdXJjZSkge1xuICAgIHJldHVybiBzb3VyY2UucmVwbGFjZSgvLShbYS16XSkvZywgZnVuY3Rpb24gKG1hdGNoLCBhbHBoYSkge1xuICAgICAgICByZXR1cm4gYWxwaGEudG9VcHBlckNhc2UoKTtcbiAgICB9KTtcbn1cblxuLy8gZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0ga2ViYWIyY2FtZWw7XG5cblxuLyoqXG4gKiBAZmlsZSDooajovr7lvI/nsbvlnotcbiAqIEBhdXRob3IgZXJyb3JyaWsoZXJyb3JyaWtAZ21haWwuY29tKVxuICovXG5cbi8qKlxuICog6KGo6L6+5byP57G75Z6LXG4gKlxuICogQGNvbnN0XG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG52YXIgRXhwclR5cGUgPSB7XG4gICAgU1RSSU5HOiAxLFxuICAgIE5VTUJFUjogMixcbiAgICBCT09MOiAzLFxuICAgIEFDQ0VTU09SOiA0LFxuICAgIElOVEVSUDogNSxcbiAgICBDQUxMOiA2LFxuICAgIFRFWFQ6IDcsXG4gICAgQklOQVJZOiA4LFxuICAgIFVOQVJZOiA5LFxuICAgIFRFUlRJQVJZOiAxMFxufTtcblxuLy8gZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gRXhwclR5cGU7XG5cblxuLyoqXG4gKiBAZmlsZSDliJvlu7rorr/pl67ooajovr7lvI/lr7nosaFcbiAqIEBhdXRob3IgZXJyb3JyaWsoZXJyb3JyaWtAZ21haWwuY29tKVxuICovXG5cbi8vIHZhciBFeHByVHlwZSA9IHJlcXVpcmUoJy4vZXhwci10eXBlJyk7XG5cbi8qKlxuICog5Yib5bu66K6/6Zeu6KGo6L6+5byP5a+56LGhXG4gKlxuICogQHBhcmFtIHtBcnJheX0gcGF0aHMg6K6/6Zeu6Lev5b6EXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUFjY2Vzc29yKHBhdGhzKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogRXhwclR5cGUuQUNDRVNTT1IsXG4gICAgICAgIHBhdGhzOiBwYXRoc1xuICAgIH07XG59XG5cbi8vIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZUFjY2Vzc29yO1xuXG5cbi8qKlxuICogQGZpbGUg6K+75Y+W5a2X56ym5LiyXG4gKiBAYXV0aG9yIGVycm9ycmlrKGVycm9ycmlrQGdtYWlsLmNvbSlcbiAqL1xuXG5cbi8vIHZhciBFeHByVHlwZSA9IHJlcXVpcmUoJy4vZXhwci10eXBlJyk7XG5cbi8qKlxuICog6K+75Y+W5a2X56ym5LiyXG4gKlxuICogQHBhcmFtIHtXYWxrZXJ9IHdhbGtlciDmupDnoIHor7vlj5blr7nosaFcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuZnVuY3Rpb24gcmVhZFN0cmluZyh3YWxrZXIpIHtcbiAgICB2YXIgc3RhcnRDb2RlID0gd2Fsa2VyLmN1cnJlbnRDb2RlKCk7XG4gICAgdmFyIHN0YXJ0SW5kZXggPSB3YWxrZXIuaW5kZXg7XG4gICAgdmFyIGNoYXJDb2RlO1xuXG4gICAgd2Fsa0xvb3A6IHdoaWxlICgoY2hhckNvZGUgPSB3YWxrZXIubmV4dENvZGUoKSkpIHtcbiAgICAgICAgc3dpdGNoIChjaGFyQ29kZSkge1xuICAgICAgICAgICAgY2FzZSA5MjogLy8gXFxcbiAgICAgICAgICAgICAgICB3YWxrZXIuZ28oMSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIHN0YXJ0Q29kZTpcbiAgICAgICAgICAgICAgICB3YWxrZXIuZ28oMSk7XG4gICAgICAgICAgICAgICAgYnJlYWsgd2Fsa0xvb3A7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgbGl0ZXJhbCA9IHdhbGtlci5jdXQoc3RhcnRJbmRleCwgd2Fsa2VyLmluZGV4KTtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBFeHByVHlwZS5TVFJJTkcsXG4gICAgICAgIHZhbHVlOiAobmV3IEZ1bmN0aW9uKCdyZXR1cm4gJyArIGxpdGVyYWwpKSgpXG4gICAgfTtcbn1cblxuLy8gZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVhZFN0cmluZztcblxuXG4vKipcbiAqIEBmaWxlIOivu+WPluaVsOWtl1xuICogQGF1dGhvciBlcnJvcnJpayhlcnJvcnJpa0BnbWFpbC5jb20pXG4gKi9cblxuXG4vLyB2YXIgRXhwclR5cGUgPSByZXF1aXJlKCcuL2V4cHItdHlwZScpO1xuXG4vKipcbiAqIOivu+WPluaVsOWtl1xuICpcbiAqIEBpbm5lclxuICogQHBhcmFtIHtXYWxrZXJ9IHdhbGtlciDmupDnoIHor7vlj5blr7nosaFcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuZnVuY3Rpb24gcmVhZE51bWJlcih3YWxrZXIpIHtcbiAgICB2YXIgbWF0Y2ggPSB3YWxrZXIubWF0Y2goL1xccyooLT9bMC05XSsoXFwuWzAtOV0rKT8pL2cpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogRXhwclR5cGUuTlVNQkVSLFxuICAgICAgICB2YWx1ZTogbWF0Y2hbMV0gLSAwXG4gICAgfTtcbn1cblxuLy8gZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVhZE51bWJlcjtcblxuXG4vKipcbiAqIEBmaWxlIOivu+WPlmlkZW50XG4gKiBAYXV0aG9yIGVycm9ycmlrKGVycm9ycmlrQGdtYWlsLmNvbSlcbiAqL1xuXG4vKipcbiAqIOivu+WPlmlkZW50XG4gKlxuICogQGlubmVyXG4gKiBAcGFyYW0ge1dhbGtlcn0gd2Fsa2VyIOa6kOeggeivu+WPluWvueixoVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiByZWFkSWRlbnQod2Fsa2VyKSB7XG4gICAgdmFyIG1hdGNoID0gd2Fsa2VyLm1hdGNoKC9cXHMqKFtcXCQwLTlhLXpfXSspL2lnKTtcbiAgICByZXR1cm4gbWF0Y2hbMV07XG59XG5cbi8vIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlYWRJZGVudDtcblxuXG4vKipcbiAqIEBmaWxlIOivu+WPluS4ieWFg+ihqOi+vuW8j1xuICogQGF1dGhvciBlcnJvcnJpayhlcnJvcnJpa0BnbWFpbC5jb20pXG4gKi9cblxuLy8gdmFyIEV4cHJUeXBlID0gcmVxdWlyZSgnLi9leHByLXR5cGUnKTtcbi8vIHZhciByZWFkTG9naWNhbE9SRXhwciA9IHJlcXVpcmUoJy4vcmVhZC1sb2dpY2FsLW9yLWV4cHInKTtcblxuLyoqXG4gKiDor7vlj5bkuInlhYPooajovr7lvI9cbiAqXG4gKiBAcGFyYW0ge1dhbGtlcn0gd2Fsa2VyIOa6kOeggeivu+WPluWvueixoVxuICogQHJldHVybiB7T2JqZWN0fVxuICovXG5mdW5jdGlvbiByZWFkVGVydGlhcnlFeHByKHdhbGtlcikge1xuICAgIHZhciBjb25kaXRpb25hbCA9IHJlYWRMb2dpY2FsT1JFeHByKHdhbGtlcik7XG4gICAgd2Fsa2VyLmdvVW50aWwoKTtcblxuICAgIGlmICh3YWxrZXIuY3VycmVudENvZGUoKSA9PT0gNjMpIHsgLy8gP1xuICAgICAgICB3YWxrZXIuZ28oMSk7XG4gICAgICAgIHZhciB5ZXNFeHByID0gcmVhZFRlcnRpYXJ5RXhwcih3YWxrZXIpO1xuICAgICAgICB3YWxrZXIuZ29VbnRpbCgpO1xuXG4gICAgICAgIGlmICh3YWxrZXIuY3VycmVudENvZGUoKSA9PT0gNTgpIHsgLy8gOlxuICAgICAgICAgICAgd2Fsa2VyLmdvKDEpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBFeHByVHlwZS5URVJUSUFSWSxcbiAgICAgICAgICAgICAgICBzZWdzOiBbXG4gICAgICAgICAgICAgICAgICAgIGNvbmRpdGlvbmFsLFxuICAgICAgICAgICAgICAgICAgICB5ZXNFeHByLFxuICAgICAgICAgICAgICAgICAgICByZWFkVGVydGlhcnlFeHByKHdhbGtlcilcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbmRpdGlvbmFsO1xufVxuXG4vLyBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZWFkVGVydGlhcnlFeHByO1xuXG5cbi8qKlxuICogQGZpbGUg6K+75Y+W6K6/6Zeu6KGo6L6+5byPXG4gKiBAYXV0aG9yIGVycm9ycmlrKGVycm9ycmlrQGdtYWlsLmNvbSlcbiAqL1xuXG4vLyB2YXIgRXhwclR5cGUgPSByZXF1aXJlKCcuL2V4cHItdHlwZScpO1xuLy8gdmFyIGNyZWF0ZUFjY2Vzc29yID0gcmVxdWlyZSgnLi9jcmVhdGUtYWNjZXNzb3InKTtcbi8vIHZhciByZWFkSWRlbnQgPSByZXF1aXJlKCcuL3JlYWQtaWRlbnQnKTtcbi8vIHZhciByZWFkVGVydGlhcnlFeHByID0gcmVxdWlyZSgnLi9yZWFkLXRlcnRpYXJ5LWV4cHInKTtcblxuLyoqXG4gKiDor7vlj5borr/pl67ooajovr7lvI9cbiAqXG4gKiBAcGFyYW0ge1dhbGtlcn0gd2Fsa2VyIOa6kOeggeivu+WPluWvueixoVxuICogQHJldHVybiB7T2JqZWN0fVxuICovXG5mdW5jdGlvbiByZWFkQWNjZXNzb3Iod2Fsa2VyKSB7XG4gICAgdmFyIGZpcnN0U2VnID0gcmVhZElkZW50KHdhbGtlcik7XG4gICAgc3dpdGNoIChmaXJzdFNlZykge1xuICAgICAgICBjYXNlICd0cnVlJzpcbiAgICAgICAgY2FzZSAnZmFsc2UnOlxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBFeHByVHlwZS5CT09MLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBmaXJzdFNlZyA9PT0gJ3RydWUnXG4gICAgICAgICAgICB9O1xuICAgIH1cblxuICAgIHZhciByZXN1bHQgPSBjcmVhdGVBY2Nlc3NvcihbXG4gICAgICAgIHtcbiAgICAgICAgICAgIHR5cGU6IEV4cHJUeXBlLlNUUklORyxcbiAgICAgICAgICAgIHZhbHVlOiBmaXJzdFNlZ1xuICAgICAgICB9XG4gICAgXSk7XG5cbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zdGFudC1jb25kaXRpb24gKi9cbiAgICBhY2Nlc3Nvckxvb3A6IHdoaWxlICgxKSB7XG4gICAgLyogZXNsaW50LWVuYWJsZSBuby1jb25zdGFudC1jb25kaXRpb24gKi9cblxuICAgICAgICBzd2l0Y2ggKHdhbGtlci5jdXJyZW50Q29kZSgpKSB7XG4gICAgICAgICAgICBjYXNlIDQ2OiAvLyAuXG4gICAgICAgICAgICAgICAgd2Fsa2VyLmdvKDEpO1xuXG4gICAgICAgICAgICAgICAgLy8gaWRlbnQgYXMgc3RyaW5nXG4gICAgICAgICAgICAgICAgcmVzdWx0LnBhdGhzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBFeHByVHlwZS5TVFJJTkcsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiByZWFkSWRlbnQod2Fsa2VyKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDkxOiAvLyBbXG4gICAgICAgICAgICAgICAgd2Fsa2VyLmdvKDEpO1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wYXRocy5wdXNoKHJlYWRUZXJ0aWFyeUV4cHIod2Fsa2VyKSk7XG4gICAgICAgICAgICAgICAgd2Fsa2VyLmdvVW50aWwoOTMpOyAvLyBdXG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgYnJlYWsgYWNjZXNzb3JMb29wO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLy8gZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVhZEFjY2Vzc29yO1xuXG5cbi8qKlxuICogQGZpbGUg6K+75Y+W5ous5Y+36KGo6L6+5byPXG4gKiBAYXV0aG9yIGVycm9ycmlrKGVycm9ycmlrQGdtYWlsLmNvbSlcbiAqL1xuXG4vLyB2YXIgcmVhZFRlcnRpYXJ5RXhwciA9IHJlcXVpcmUoJy4vcmVhZC10ZXJ0aWFyeS1leHByJyk7XG5cbi8qKlxuICog6K+75Y+W5ous5Y+36KGo6L6+5byPXG4gKlxuICogQHBhcmFtIHtXYWxrZXJ9IHdhbGtlciDmupDnoIHor7vlj5blr7nosaFcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuZnVuY3Rpb24gcmVhZFBhcmVudGhlc2l6ZWRFeHByKHdhbGtlcikge1xuICAgIHdhbGtlci5nbygxKTtcbiAgICB2YXIgZXhwciA9IHJlYWRUZXJ0aWFyeUV4cHIod2Fsa2VyKTtcbiAgICB3YWxrZXIuZ29VbnRpbCg0MSk7IC8vIClcblxuICAgIHJldHVybiBleHByO1xufVxuXG4vLyBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZWFkUGFyZW50aGVzaXplZEV4cHI7XG5cblxuLyoqXG4gKiBAZmlsZSDor7vlj5bkuIDlhYPooajovr7lvI9cbiAqIEBhdXRob3IgZXJyb3JyaWsoZXJyb3JyaWtAZ21haWwuY29tKVxuICovXG5cbi8vIHZhciBFeHByVHlwZSA9IHJlcXVpcmUoJy4vZXhwci10eXBlJyk7XG4vLyB2YXIgcmVhZFN0cmluZyA9IHJlcXVpcmUoJy4vcmVhZC1zdHJpbmcnKTtcbi8vIHZhciByZWFkTnVtYmVyID0gcmVxdWlyZSgnLi9yZWFkLW51bWJlcicpO1xuLy8gdmFyIHJlYWRBY2Nlc3NvciA9IHJlcXVpcmUoJy4vcmVhZC1hY2Nlc3NvcicpO1xuLy8gdmFyIHJlYWRQYXJlbnRoZXNpemVkRXhwciA9IHJlcXVpcmUoJy4vcmVhZC1wYXJlbnRoZXNpemVkLWV4cHInKTtcblxuXG4vKipcbiAqIOivu+WPluS4gOWFg+ihqOi+vuW8j1xuICpcbiAqIEBwYXJhbSB7V2Fsa2VyfSB3YWxrZXIg5rqQ56CB6K+75Y+W5a+56LGhXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cbmZ1bmN0aW9uIHJlYWRVbmFyeUV4cHIod2Fsa2VyKSB7XG4gICAgd2Fsa2VyLmdvVW50aWwoKTtcblxuICAgIHN3aXRjaCAod2Fsa2VyLmN1cnJlbnRDb2RlKCkpIHtcbiAgICAgICAgY2FzZSAzMzogLy8gIVxuICAgICAgICAgICAgd2Fsa2VyLmdvKDEpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBFeHByVHlwZS5VTkFSWSxcbiAgICAgICAgICAgICAgICBleHByOiByZWFkVW5hcnlFeHByKHdhbGtlcilcbiAgICAgICAgICAgIH07XG4gICAgICAgIGNhc2UgMzQ6IC8vIFwiXG4gICAgICAgIGNhc2UgMzk6IC8vICdcbiAgICAgICAgICAgIHJldHVybiByZWFkU3RyaW5nKHdhbGtlcik7XG4gICAgICAgIGNhc2UgNDU6IC8vIG51bWJlclxuICAgICAgICBjYXNlIDQ4OlxuICAgICAgICBjYXNlIDQ5OlxuICAgICAgICBjYXNlIDUwOlxuICAgICAgICBjYXNlIDUxOlxuICAgICAgICBjYXNlIDUyOlxuICAgICAgICBjYXNlIDUzOlxuICAgICAgICBjYXNlIDU0OlxuICAgICAgICBjYXNlIDU1OlxuICAgICAgICBjYXNlIDU2OlxuICAgICAgICBjYXNlIDU3OlxuICAgICAgICAgICAgcmV0dXJuIHJlYWROdW1iZXIod2Fsa2VyKTtcbiAgICAgICAgY2FzZSA0MDogLy8gKFxuICAgICAgICAgICAgcmV0dXJuIHJlYWRQYXJlbnRoZXNpemVkRXhwcih3YWxrZXIpO1xuICAgIH1cblxuICAgIHJldHVybiByZWFkQWNjZXNzb3Iod2Fsa2VyKTtcbn1cblxuLy8gZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVhZFVuYXJ5RXhwcjtcblxuXG4vKipcbiAqIEBmaWxlIOivu+WPluS5mOazleihqOi+vuW8j1xuICogQGF1dGhvciBlcnJvcnJpayhlcnJvcnJpa0BnbWFpbC5jb20pXG4gKi9cblxuLy8gdmFyIEV4cHJUeXBlID0gcmVxdWlyZSgnLi9leHByLXR5cGUnKTtcbi8vIHZhciByZWFkVW5hcnlFeHByID0gcmVxdWlyZSgnLi9yZWFkLXVuYXJ5LWV4cHInKTtcblxuLyoqXG4gKiDor7vlj5bkuZjms5Xooajovr7lvI9cbiAqXG4gKiBAcGFyYW0ge1dhbGtlcn0gd2Fsa2VyIOa6kOeggeivu+WPluWvueixoVxuICogQHJldHVybiB7T2JqZWN0fVxuICovXG5mdW5jdGlvbiByZWFkTXVsdGlwbGljYXRpdmVFeHByKHdhbGtlcikge1xuICAgIHZhciBleHByID0gcmVhZFVuYXJ5RXhwcih3YWxrZXIpO1xuXG4gICAgd2hpbGUgKDEpIHtcbiAgICAgICAgd2Fsa2VyLmdvVW50aWwoKTtcblxuICAgICAgICB2YXIgY29kZSA9IHdhbGtlci5jdXJyZW50Q29kZSgpO1xuICAgICAgICBzd2l0Y2ggKGNvZGUpIHtcbiAgICAgICAgICAgIGNhc2UgMzc6IC8vICVcbiAgICAgICAgICAgIGNhc2UgNDI6IC8vICpcbiAgICAgICAgICAgIGNhc2UgNDc6IC8vIC9cbiAgICAgICAgICAgICAgICB3YWxrZXIuZ28oMSk7XG4gICAgICAgICAgICAgICAgZXhwciA9IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogRXhwclR5cGUuQklOQVJZLFxuICAgICAgICAgICAgICAgICAgICBvcGVyYXRvcjogY29kZSxcbiAgICAgICAgICAgICAgICAgICAgc2VnczogW2V4cHIsIHJlYWRVbmFyeUV4cHIod2Fsa2VyKV1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG5cbiAgICByZXR1cm4gZXhwcjtcbn1cblxuLy8gZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVhZE11bHRpcGxpY2F0aXZlRXhwcjtcblxuXG4vKipcbiAqIEBmaWxlIOivu+WPluWKoOazleihqOi+vuW8j1xuICogQGF1dGhvciBlcnJvcnJpayhlcnJvcnJpa0BnbWFpbC5jb20pXG4gKi9cblxuLy8gdmFyIEV4cHJUeXBlID0gcmVxdWlyZSgnLi9leHByLXR5cGUnKTtcbi8vIHZhciByZWFkTXVsdGlwbGljYXRpdmVFeHByID0gcmVxdWlyZSgnLi9yZWFkLW11bHRpcGxpY2F0aXZlLWV4cHInKTtcblxuXG4vKipcbiAqIOivu+WPluWKoOazleihqOi+vuW8j1xuICpcbiAqIEBwYXJhbSB7V2Fsa2VyfSB3YWxrZXIg5rqQ56CB6K+75Y+W5a+56LGhXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cbmZ1bmN0aW9uIHJlYWRBZGRpdGl2ZUV4cHIod2Fsa2VyKSB7XG4gICAgdmFyIGV4cHIgPSByZWFkTXVsdGlwbGljYXRpdmVFeHByKHdhbGtlcik7XG5cbiAgICB3aGlsZSAoMSkge1xuICAgICAgICB3YWxrZXIuZ29VbnRpbCgpO1xuICAgICAgICB2YXIgY29kZSA9IHdhbGtlci5jdXJyZW50Q29kZSgpO1xuXG4gICAgICAgIHN3aXRjaCAoY29kZSkge1xuICAgICAgICAgICAgY2FzZSA0MzogLy8gK1xuICAgICAgICAgICAgY2FzZSA0NTogLy8gLVxuICAgICAgICAgICAgICAgIHdhbGtlci5nbygxKTtcbiAgICAgICAgICAgICAgICBleHByID0ge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBFeHByVHlwZS5CSU5BUlksXG4gICAgICAgICAgICAgICAgICAgIG9wZXJhdG9yOiBjb2RlLFxuICAgICAgICAgICAgICAgICAgICBzZWdzOiBbZXhwciwgcmVhZE11bHRpcGxpY2F0aXZlRXhwcih3YWxrZXIpXVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICByZXR1cm4gZXhwcjtcbn1cblxuLy8gZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVhZEFkZGl0aXZlRXhwcjtcblxuXG4vKipcbiAqIEBmaWxlIOivu+WPluWFs+ezu+WIpOaWreihqOi+vuW8j1xuICogQGF1dGhvciBlcnJvcnJpayhlcnJvcnJpa0BnbWFpbC5jb20pXG4gKi9cblxuLy8gdmFyIEV4cHJUeXBlID0gcmVxdWlyZSgnLi9leHByLXR5cGUnKTtcbi8vIHZhciByZWFkQWRkaXRpdmVFeHByID0gcmVxdWlyZSgnLi9yZWFkLWFkZGl0aXZlLWV4cHInKTtcblxuLyoqXG4gKiDor7vlj5blhbPns7vliKTmlq3ooajovr7lvI9cbiAqXG4gKiBAcGFyYW0ge1dhbGtlcn0gd2Fsa2VyIOa6kOeggeivu+WPluWvueixoVxuICogQHJldHVybiB7T2JqZWN0fVxuICovXG5mdW5jdGlvbiByZWFkUmVsYXRpb25hbEV4cHIod2Fsa2VyKSB7XG4gICAgdmFyIGV4cHIgPSByZWFkQWRkaXRpdmVFeHByKHdhbGtlcik7XG4gICAgd2Fsa2VyLmdvVW50aWwoKTtcblxuICAgIHZhciBjb2RlID0gd2Fsa2VyLmN1cnJlbnRDb2RlKCk7XG4gICAgc3dpdGNoIChjb2RlKSB7XG4gICAgICAgIGNhc2UgNjA6IC8vIDxcbiAgICAgICAgY2FzZSA2MjogLy8gPlxuICAgICAgICAgICAgaWYgKHdhbGtlci5uZXh0Q29kZSgpID09PSA2MSkge1xuICAgICAgICAgICAgICAgIGNvZGUgKz0gNjE7XG4gICAgICAgICAgICAgICAgd2Fsa2VyLmdvKDEpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6IEV4cHJUeXBlLkJJTkFSWSxcbiAgICAgICAgICAgICAgICBvcGVyYXRvcjogY29kZSxcbiAgICAgICAgICAgICAgICBzZWdzOiBbZXhwciwgcmVhZEFkZGl0aXZlRXhwcih3YWxrZXIpXVxuICAgICAgICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gZXhwcjtcbn1cblxuLy8gZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVhZFJlbGF0aW9uYWxFeHByO1xuXG5cbi8qKlxuICogQGZpbGUg6K+75Y+W55u4562J5q+U5a+56KGo6L6+5byPXG4gKiBAYXV0aG9yIGVycm9ycmlrKGVycm9ycmlrQGdtYWlsLmNvbSlcbiAqL1xuXG4vLyB2YXIgRXhwclR5cGUgPSByZXF1aXJlKCcuL2V4cHItdHlwZScpO1xuLy8gdmFyIHJlYWRSZWxhdGlvbmFsRXhwciA9IHJlcXVpcmUoJy4vcmVhZC1yZWxhdGlvbmFsLWV4cHInKTtcblxuLyoqXG4gKiDor7vlj5bnm7jnrYnmr5Tlr7nooajovr7lvI9cbiAqXG4gKiBAcGFyYW0ge1dhbGtlcn0gd2Fsa2VyIOa6kOeggeivu+WPluWvueixoVxuICogQHJldHVybiB7T2JqZWN0fVxuICovXG5mdW5jdGlvbiByZWFkRXF1YWxpdHlFeHByKHdhbGtlcikge1xuICAgIHZhciBleHByID0gcmVhZFJlbGF0aW9uYWxFeHByKHdhbGtlcik7XG4gICAgd2Fsa2VyLmdvVW50aWwoKTtcblxuICAgIHZhciBjb2RlID0gd2Fsa2VyLmN1cnJlbnRDb2RlKCk7XG4gICAgc3dpdGNoIChjb2RlKSB7XG4gICAgICAgIGNhc2UgNjE6IC8vID1cbiAgICAgICAgY2FzZSAzMzogLy8gIVxuICAgICAgICAgICAgaWYgKHdhbGtlci5uZXh0Q29kZSgpID09PSA2MSkge1xuICAgICAgICAgICAgICAgIGNvZGUgKz0gNjE7XG4gICAgICAgICAgICAgICAgaWYgKHdhbGtlci5uZXh0Q29kZSgpID09PSA2MSkge1xuICAgICAgICAgICAgICAgICAgICBjb2RlICs9IDYxO1xuICAgICAgICAgICAgICAgICAgICB3YWxrZXIuZ28oMSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogRXhwclR5cGUuQklOQVJZLFxuICAgICAgICAgICAgICAgICAgICBvcGVyYXRvcjogY29kZSxcbiAgICAgICAgICAgICAgICAgICAgc2VnczogW2V4cHIsIHJlYWRSZWxhdGlvbmFsRXhwcih3YWxrZXIpXVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHdhbGtlci5nbygtMSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGV4cHI7XG59XG5cbi8vIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlYWRFcXVhbGl0eUV4cHI7XG5cblxuLyoqXG4gKiBAZmlsZSDor7vlj5bpgLvovpHkuI7ooajovr7lvI9cbiAqIEBhdXRob3IgZXJyb3JyaWsoZXJyb3JyaWtAZ21haWwuY29tKVxuICovXG5cbi8vIHZhciBFeHByVHlwZSA9IHJlcXVpcmUoJy4vZXhwci10eXBlJyk7XG4vLyB2YXIgcmVhZEVxdWFsaXR5RXhwciA9IHJlcXVpcmUoJy4vcmVhZC1lcXVhbGl0eS1leHByJyk7XG5cbi8qKlxuICog6K+75Y+W6YC76L6R5LiO6KGo6L6+5byPXG4gKlxuICogQHBhcmFtIHtXYWxrZXJ9IHdhbGtlciDmupDnoIHor7vlj5blr7nosaFcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuZnVuY3Rpb24gcmVhZExvZ2ljYWxBTkRFeHByKHdhbGtlcikge1xuICAgIHZhciBleHByID0gcmVhZEVxdWFsaXR5RXhwcih3YWxrZXIpO1xuICAgIHdhbGtlci5nb1VudGlsKCk7XG5cbiAgICBpZiAod2Fsa2VyLmN1cnJlbnRDb2RlKCkgPT09IDM4KSB7IC8vICZcbiAgICAgICAgaWYgKHdhbGtlci5uZXh0Q29kZSgpID09PSAzOCkge1xuICAgICAgICAgICAgd2Fsa2VyLmdvKDEpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBFeHByVHlwZS5CSU5BUlksXG4gICAgICAgICAgICAgICAgb3BlcmF0b3I6IDc2LFxuICAgICAgICAgICAgICAgIHNlZ3M6IFtleHByLCByZWFkTG9naWNhbEFOREV4cHIod2Fsa2VyKV1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICB3YWxrZXIuZ28oLTEpO1xuICAgIH1cblxuICAgIHJldHVybiBleHByO1xufVxuXG4vLyBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZWFkTG9naWNhbEFOREV4cHI7XG5cblxuLyoqXG4gKiBAZmlsZSDor7vlj5bpgLvovpHmiJbooajovr7lvI9cbiAqIEBhdXRob3IgZXJyb3JyaWsoZXJyb3JyaWtAZ21haWwuY29tKVxuICovXG5cbi8vIHZhciBFeHByVHlwZSA9IHJlcXVpcmUoJy4vZXhwci10eXBlJyk7XG4vLyB2YXIgcmVhZExvZ2ljYWxBTkRFeHByID0gcmVxdWlyZSgnLi9yZWFkLWxvZ2ljYWwtYW5kLWV4cHInKTtcblxuLyoqXG4gKiDor7vlj5bpgLvovpHmiJbooajovr7lvI9cbiAqXG4gKiBAcGFyYW0ge1dhbGtlcn0gd2Fsa2VyIOa6kOeggeivu+WPluWvueixoVxuICogQHJldHVybiB7T2JqZWN0fVxuICovXG5mdW5jdGlvbiByZWFkTG9naWNhbE9SRXhwcih3YWxrZXIpIHtcbiAgICB2YXIgZXhwciA9IHJlYWRMb2dpY2FsQU5ERXhwcih3YWxrZXIpO1xuICAgIHdhbGtlci5nb1VudGlsKCk7XG5cbiAgICBpZiAod2Fsa2VyLmN1cnJlbnRDb2RlKCkgPT09IDEyNCkgeyAvLyB8XG4gICAgICAgIGlmICh3YWxrZXIubmV4dENvZGUoKSA9PT0gMTI0KSB7XG4gICAgICAgICAgICB3YWxrZXIuZ28oMSk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6IEV4cHJUeXBlLkJJTkFSWSxcbiAgICAgICAgICAgICAgICBvcGVyYXRvcjogMjQ4LFxuICAgICAgICAgICAgICAgIHNlZ3M6IFtleHByLCByZWFkTG9naWNhbE9SRXhwcih3YWxrZXIpXVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHdhbGtlci5nbygtMSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGV4cHI7XG59XG5cbi8vIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlYWRMb2dpY2FsT1JFeHByO1xuXG5cbi8qKlxuICogQGZpbGUg6Kej5p6Q6KGo6L6+5byPXG4gKiBAYXV0aG9yIGVycm9ycmlrKGVycm9ycmlrQGdtYWlsLmNvbSlcbiAqL1xuXG4vLyB2YXIgV2Fsa2VyID0gcmVxdWlyZSgnLi93YWxrZXInKTtcbi8vIHZhciByZWFkVGVydGlhcnlFeHByID0gcmVxdWlyZSgnLi9yZWFkLXRlcnRpYXJ5LWV4cHInKTtcblxuLyoqXG4gKiDop6PmnpDooajovr7lvI9cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc291cmNlIOa6kOeggVxuICogQHJldHVybiB7T2JqZWN0fVxuICovXG5mdW5jdGlvbiBwYXJzZUV4cHIoc291cmNlKSB7XG4gICAgaWYgKHR5cGVvZiBzb3VyY2UgPT09ICdvYmplY3QnICYmIHNvdXJjZS50eXBlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2U7XG4gICAgfVxuXG4gICAgdmFyIGV4cHIgPSByZWFkVGVydGlhcnlFeHByKG5ldyBXYWxrZXIoc291cmNlKSk7XG4gICAgZXhwci5yYXcgPSBzb3VyY2U7XG4gICAgcmV0dXJuIGV4cHI7XG59XG5cbi8vIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHBhcnNlRXhwcjtcblxuXG4vKipcbiAqIEBmaWxlIOivu+WPluiwg+eUqFxuICogQGF1dGhvciBlcnJvcnJpayhlcnJvcnJpa0BnbWFpbC5jb20pXG4gKi9cblxuLy8gdmFyIEV4cHJUeXBlID0gcmVxdWlyZSgnLi9leHByLXR5cGUnKTtcbi8vIHZhciByZWFkQWNjZXNzb3IgPSByZXF1aXJlKCcuL3JlYWQtYWNjZXNzb3InKTtcbi8vIHZhciByZWFkVGVydGlhcnlFeHByID0gcmVxdWlyZSgnLi9yZWFkLXRlcnRpYXJ5LWV4cHInKTtcblxuLyoqXG4gKiDor7vlj5bosIPnlKhcbiAqXG4gKiBAcGFyYW0ge1dhbGtlcn0gd2Fsa2VyIOa6kOeggeivu+WPluWvueixoVxuICogQHBhcmFtIHtBcnJheT19IGRlZmF1bHRBcmdzIOm7mOiupOWPguaVsFxuICogQHJldHVybiB7T2JqZWN0fVxuICovXG5mdW5jdGlvbiByZWFkQ2FsbCh3YWxrZXIsIGRlZmF1bHRBcmdzKSB7XG4gICAgd2Fsa2VyLmdvVW50aWwoKTtcbiAgICB2YXIgaWRlbnQgPSByZWFkQWNjZXNzb3Iod2Fsa2VyKTtcbiAgICB2YXIgYXJncyA9IFtdO1xuXG4gICAgaWYgKHdhbGtlci5nb1VudGlsKDQwKSkgeyAvLyAoXG4gICAgICAgIHdoaWxlICghd2Fsa2VyLmdvVW50aWwoNDEpKSB7IC8vIClcbiAgICAgICAgICAgIGFyZ3MucHVzaChyZWFkVGVydGlhcnlFeHByKHdhbGtlcikpO1xuICAgICAgICAgICAgd2Fsa2VyLmdvVW50aWwoNDQpOyAvLyAsXG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoZGVmYXVsdEFyZ3MpIHtcbiAgICAgICAgYXJncyA9IGRlZmF1bHRBcmdzO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IEV4cHJUeXBlLkNBTEwsXG4gICAgICAgIG5hbWU6IGlkZW50LFxuICAgICAgICBhcmdzOiBhcmdzXG4gICAgfTtcbn1cblxuLy8gZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVhZENhbGw7XG5cblxuLyoqXG4gKiBAZmlsZSDop6PmnpDosIPnlKhcbiAqIEBhdXRob3IgZXJyb3JyaWsoZXJyb3JyaWtAZ21haWwuY29tKVxuICovXG5cblxuLy8gdmFyIFdhbGtlciA9IHJlcXVpcmUoJy4vd2Fsa2VyJyk7XG4vLyB2YXIgcmVhZENhbGwgPSByZXF1aXJlKCcuL3JlYWQtY2FsbCcpO1xuXG4vKipcbiAqIOino+aekOiwg+eUqFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzb3VyY2Ug5rqQ56CBXG4gKiBAcGFyYW0ge0FycmF5PX0gZGVmYXVsdEFyZ3Mg6buY6K6k5Y+C5pWwXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cbmZ1bmN0aW9uIHBhcnNlQ2FsbChzb3VyY2UsIGRlZmF1bHRBcmdzKSB7XG4gICAgdmFyIGV4cHIgPSByZWFkQ2FsbChuZXcgV2Fsa2VyKHNvdXJjZSksIGRlZmF1bHRBcmdzKTtcbiAgICBleHByLnJhdyA9IHNvdXJjZTtcbiAgICByZXR1cm4gZXhwcjtcbn1cblxuLy8gZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcGFyc2VDYWxsO1xuXG5cbi8qKlxuICogQGZpbGUg6Kej5p6Q5o+S5YC85pu/5o2iXG4gKiBAYXV0aG9yIGVycm9ycmlrKGVycm9ycmlrQGdtYWlsLmNvbSlcbiAqL1xuXG4vLyB2YXIgV2Fsa2VyID0gcmVxdWlyZSgnLi93YWxrZXInKTtcbi8vIHZhciByZWFkVGVydGlhcnlFeHByID0gcmVxdWlyZSgnLi9yZWFkLXRlcnRpYXJ5LWV4cHInKTtcbi8vIHZhciBFeHByVHlwZSA9IHJlcXVpcmUoJy4vZXhwci10eXBlJyk7XG4vLyB2YXIgcmVhZENhbGwgPSByZXF1aXJlKCcuL3JlYWQtY2FsbCcpO1xuXG4vKipcbiAqIOino+aekOaPkuWAvOabv+aNolxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzb3VyY2Ug5rqQ56CBXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cbmZ1bmN0aW9uIHBhcnNlSW50ZXJwKHNvdXJjZSkge1xuICAgIHZhciB3YWxrZXIgPSBuZXcgV2Fsa2VyKHNvdXJjZSk7XG5cbiAgICB2YXIgaW50ZXJwID0ge1xuICAgICAgICB0eXBlOiBFeHByVHlwZS5JTlRFUlAsXG4gICAgICAgIGV4cHI6IHJlYWRUZXJ0aWFyeUV4cHIod2Fsa2VyKSxcbiAgICAgICAgZmlsdGVyczogW10sXG4gICAgICAgIHJhdzogc291cmNlXG4gICAgfTtcblxuICAgIHdoaWxlICh3YWxrZXIuZ29VbnRpbCgxMjQpKSB7IC8vIHxcbiAgICAgICAgdmFyIGNhbGxFeHByID0gcmVhZENhbGwod2Fsa2VyKTtcbiAgICAgICAgc3dpdGNoIChjYWxsRXhwci5uYW1lLnBhdGhzWzBdLnZhbHVlKSB7XG4gICAgICAgICAgICBjYXNlICdodG1sJzpcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3Jhdyc6XG4gICAgICAgICAgICAgICAgaW50ZXJwLm9yaWdpbmFsID0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgaW50ZXJwLmZpbHRlcnMucHVzaChjYWxsRXhwcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gaW50ZXJwO1xufVxuXG4vLyBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBwYXJzZUludGVycDtcblxuXG4vKipcbiAqIEBmaWxlIOino+eggSBIVE1MIOWtl+espuWunuS9k1xuICogQGF1dGhvciBlcnJvcnJpayhlcnJvcnJpa0BnbWFpbC5jb20pXG4gKi9cblxudmFyIEVOVElUWV9ERUNPREVfTUFQID0ge1xuICAgIGx0OiAnPCcsXG4gICAgZ3Q6ICc+JyxcbiAgICBuYnNwOiAnICcsXG4gICAgcXVvdDogJ1xcXCInLFxuICAgIGVtc3A6ICdcXHUyMDAzJyxcbiAgICBlbnNwOiAnXFx1MjAwMicsXG4gICAgdGhpbnNwOiAnXFx1MjAwOScsXG4gICAgY29weTogJ1xceGE5JyxcbiAgICByZWc6ICdcXHhhZScsXG4gICAgenduajogJ1xcdTIwMGMnLFxuICAgIHp3ajogJ1xcdTIwMGQnLFxuICAgIGFtcDogJyYnXG59O1xuXG4vKipcbiAqIOino+eggSBIVE1MIOWtl+espuWunuS9k1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzb3VyY2Ug6KaB6Kej56CB55qE5a2X56ym5LiyXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGRlY29kZUhUTUxFbnRpdHkoc291cmNlKSB7XG4gICAgcmV0dXJuIHNvdXJjZVxuICAgICAgICAucmVwbGFjZSgvJiMoWzAtOV0rKTsvZywgZnVuY3Rpb24gKG1hdGNoLCBjb2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZSgrY29kZSk7XG4gICAgICAgIH0pXG4gICAgICAgIC5yZXBsYWNlKC8mI3goWzAtOWEtZl0rKTsvaWcsIGZ1bmN0aW9uIChtYXRjaCwgY29kZSkge1xuICAgICAgICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUocGFyc2VJbnQoY29kZSwgMTYpKTtcbiAgICAgICAgfSlcbiAgICAgICAgLnJlcGxhY2UoLyYoW2Etel0rKTsvaWcsIGZ1bmN0aW9uIChtYXRjaCwgY29kZSkge1xuICAgICAgICAgICAgcmV0dXJuIEVOVElUWV9ERUNPREVfTUFQW2NvZGVdIHx8IG1hdGNoO1xuICAgICAgICB9KTtcbn1cblxuLy8gZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZGVjb2RlSFRNTEVudGl0eTtcblxuXG4vKipcbiAqIEBmaWxlIOino+aekOaWh+acrFxuICogQGF1dGhvciBlcnJvcnJpayhlcnJvcnJpa0BnbWFpbC5jb20pXG4gKi9cblxuLy8gdmFyIFdhbGtlciA9IHJlcXVpcmUoJy4vd2Fsa2VyJyk7XG4vLyB2YXIgRXhwclR5cGUgPSByZXF1aXJlKCcuL2V4cHItdHlwZScpO1xuLy8gdmFyIHBhcnNlSW50ZXJwID0gcmVxdWlyZSgnLi9wYXJzZS1pbnRlcnAnKTtcbi8vIHZhciBkZWNvZGVIVE1MRW50aXR5ID0gcmVxdWlyZSgnLi4vdXRpbC9kZWNvZGUtaHRtbC1lbnRpdHknKTtcblxuLyoqXG4gKiDlr7nlrZfnrKbkuLLov5vooYzlj6/nlKjkuo5uZXcgUmVnRXhw55qE5a2X6Z2i5YyWXG4gKlxuICogQGlubmVyXG4gKiBAcGFyYW0ge3N0cmluZ30gc291cmNlIOmcgOimgeWtl+mdouWMlueahOWtl+espuS4slxuICogQHJldHVybiB7c3RyaW5nfSDlrZfnrKbkuLLlrZfpnaLljJbnu5PmnpxcbiAqL1xuZnVuY3Rpb24gcmVnZXhwTGl0ZXJhbChzb3VyY2UpIHtcbiAgICByZXR1cm4gc291cmNlLnJlcGxhY2UoL1tcXF5cXFtcXF1cXCRcXChcXClcXHtcXH1cXD9cXCpcXC5cXCtcXFxcXS9nLCBmdW5jdGlvbiAoYykge1xuICAgICAgICByZXR1cm4gJ1xcXFwnICsgYztcbiAgICB9KTtcbn1cblxuLyoqXG4gKiDop6PmnpDmlofmnKxcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc291cmNlIOa6kOeggVxuICogQHBhcmFtIHtBcnJheT99IGRlbGltaXRlcnMg5YiG6ZqU56ym44CC6buY6K6k5Li6IFsne3snLCAnfX0nXVxuICogQHJldHVybiB7T2JqZWN0fVxuICovXG5mdW5jdGlvbiBwYXJzZVRleHQoc291cmNlLCBkZWxpbWl0ZXJzKSB7XG4gICAgZGVsaW1pdGVycyA9IGRlbGltaXRlcnMgfHwgWyd7eycsICd9fSddO1xuICAgIHZhciBleHByU3RhcnRSZWcgPSBuZXcgUmVnRXhwKFxuICAgICAgICByZWdleHBMaXRlcmFsKGRlbGltaXRlcnNbMF0pICsgJ1xcXFxzKihbXFxcXHNcXFxcU10rPylcXFxccyonICsgcmVnZXhwTGl0ZXJhbChkZWxpbWl0ZXJzWzFdKSxcbiAgICAgICAgJ2lnJ1xuICAgICk7XG5cbiAgICB2YXIgZXhwck1hdGNoO1xuXG4gICAgdmFyIHdhbGtlciA9IG5ldyBXYWxrZXIoc291cmNlKTtcbiAgICB2YXIgYmVmb3JlSW5kZXggPSAwO1xuXG4gICAgdmFyIGV4cHIgPSB7XG4gICAgICAgIHR5cGU6IEV4cHJUeXBlLlRFWFQsXG4gICAgICAgIHNlZ3M6IFtdXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHB1c2hTdHJpbmdUb1NlZyh0ZXh0KSB7XG4gICAgICAgIHRleHQgJiYgZXhwci5zZWdzLnB1c2goe1xuICAgICAgICAgICAgdHlwZTogRXhwclR5cGUuU1RSSU5HLFxuICAgICAgICAgICAgbGl0ZXJhbDogdGV4dCxcbiAgICAgICAgICAgIHZhbHVlOiBkZWNvZGVIVE1MRW50aXR5KHRleHQpXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHdoaWxlICgoZXhwck1hdGNoID0gd2Fsa2VyLm1hdGNoKGV4cHJTdGFydFJlZykpICE9IG51bGwpIHtcbiAgICAgICAgcHVzaFN0cmluZ1RvU2VnKHdhbGtlci5jdXQoXG4gICAgICAgICAgICBiZWZvcmVJbmRleCxcbiAgICAgICAgICAgIHdhbGtlci5pbmRleCAtIGV4cHJNYXRjaFswXS5sZW5ndGhcbiAgICAgICAgKSk7XG5cbiAgICAgICAgdmFyIGludGVycCA9IHBhcnNlSW50ZXJwKGV4cHJNYXRjaFsxXSk7XG4gICAgICAgIGV4cHIub3JpZ2luYWwgPSBleHByLm9yaWdpbmFsIHx8IGludGVycC5vcmlnaW5hbDtcblxuICAgICAgICBleHByLnNlZ3MucHVzaChpbnRlcnApO1xuICAgICAgICBiZWZvcmVJbmRleCA9IHdhbGtlci5pbmRleDtcbiAgICB9XG5cbiAgICBwdXNoU3RyaW5nVG9TZWcod2Fsa2VyLmN1dChiZWZvcmVJbmRleCkpO1xuXG5cblxuICAgIGlmIChleHByLnNlZ3MubGVuZ3RoID09PSAxICYmIGV4cHIuc2Vnc1swXS50eXBlID09PSBFeHByVHlwZS5TVFJJTkcpIHtcbiAgICAgICAgZXhwci52YWx1ZSA9IGV4cHIuc2Vnc1swXS52YWx1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZXhwcjtcbn1cblxuLy8gZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcGFyc2VUZXh0O1xuXG5cbi8qKlxuICogQGZpbGUg6Kej5p6Q5oyH5LukXG4gKiBAYXV0aG9yIGVycm9ycmlrKGVycm9ycmlrQGdtYWlsLmNvbSlcbiAqL1xuXG5cbi8vIHZhciBXYWxrZXIgPSByZXF1aXJlKCcuL3dhbGtlcicpO1xuLy8gdmFyIHBhcnNlRXhwciA9IHJlcXVpcmUoJy4vcGFyc2UtZXhwcicpO1xuLy8gdmFyIHBhcnNlQ2FsbCA9IHJlcXVpcmUoJy4vcGFyc2UtY2FsbCcpO1xuLy8gdmFyIHBhcnNlVGV4dCA9IHJlcXVpcmUoJy4vcGFyc2UtdGV4dCcpO1xuLy8gdmFyIHJlYWRBY2Nlc3NvciA9IHJlcXVpcmUoJy4vcmVhZC1hY2Nlc3NvcicpO1xuXG4vKipcbiAqIOaMh+S7pOino+aekOWZqFxuICpcbiAqIEBpbm5lclxuICogQHR5cGUge09iamVjdH1cbiAqL1xudmFyIGRpcmVjdGl2ZVBhcnNlcnMgPSB7XG4gICAgJ2Zvcic6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgd2Fsa2VyID0gbmV3IFdhbGtlcih2YWx1ZSk7XG4gICAgICAgIHZhciBtYXRjaCA9IHdhbGtlci5tYXRjaCgvXlxccyooW1xcJDAtOWEtel9dKykoXFxzKixcXHMqKFtcXCQwLTlhLXpfXSspKT9cXHMraW5cXHMrL2lnKTtcblxuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgaXRlbTogcGFyc2VFeHByKG1hdGNoWzFdKSxcbiAgICAgICAgICAgICAgICBpbmRleDogcGFyc2VFeHByKG1hdGNoWzNdIHx8ICckaW5kZXgnKSxcbiAgICAgICAgICAgICAgICB2YWx1ZTogcmVhZEFjY2Vzc29yKHdhbGtlcilcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICAvLyAjW2JlZ2luXSBlcnJvclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1tTQU4gRkFUQUxdIGZvciBzeW50YXggZXJyb3I6ICcgKyB2YWx1ZSk7XG4gICAgICAgIC8vICNbZW5kXVxuICAgIH0sXG5cbiAgICAncmVmJzogZnVuY3Rpb24gKHZhbHVlLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogcGFyc2VUZXh0KHZhbHVlLCBvcHRpb25zLmRlbGltaXRlcnMpXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgICdpZic6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IHBhcnNlRXhwcih2YWx1ZS5yZXBsYWNlKC8oXlxce1xce3xcXH1cXH0kKS9nLCAnJykpXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgICdlbGlmJzogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogcGFyc2VFeHByKHZhbHVlLnJlcGxhY2UoLyheXFx7XFx7fFxcfVxcfSQpL2csICcnKSlcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgJ2Vsc2UnOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbHVlOiB7fVxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICAnaHRtbCc6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IHBhcnNlRXhwcih2YWx1ZS5yZXBsYWNlKC8oXlxce1xce3xcXH1cXH0kKS9nLCAnJykpXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgICd0cmFuc2l0aW9uJzogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogcGFyc2VDYWxsKHZhbHVlKVxuICAgICAgICB9O1xuICAgIH1cbn07XG5cbi8qKlxuICog6Kej5p6Q5oyH5LukXG4gKlxuICogQHBhcmFtIHtBTm9kZX0gYU5vZGUg5oq96LGh6IqC54K5XG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSDmjIfku6TlkI3np7BcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSDmjIfku6TlgLxcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIOino+aekOWPguaVsFxuICogQHBhcmFtIHtBcnJheT99IG9wdGlvbnMuZGVsaW1pdGVycyDmj5LlgLzliIbpmpTnrKbliJfooahcbiAqL1xuZnVuY3Rpb24gcGFyc2VEaXJlY3RpdmUoYU5vZGUsIG5hbWUsIHZhbHVlLCBvcHRpb25zKSB7XG4gICAgaWYgKG5hbWUgPT09ICdlbHNlLWlmJykge1xuICAgICAgICBuYW1lID0gJ2VsaWYnO1xuICAgIH1cblxuICAgIHZhciBwYXJzZXIgPSBkaXJlY3RpdmVQYXJzZXJzW25hbWVdO1xuICAgIGlmIChwYXJzZXIpIHtcbiAgICAgICAgKGFOb2RlLmRpcmVjdGl2ZXNbbmFtZV0gPSBwYXJzZXIodmFsdWUsIG9wdGlvbnMpKS5yYXcgPSB2YWx1ZTtcbiAgICB9XG59XG5cbi8vIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHBhcnNlRGlyZWN0aXZlO1xuXG5cbi8qKlxuICogQGZpbGUg5a+55bGe5oCn5L+h5oGv6L+b6KGM5aSE55CGXG4gKiBAYXV0aG9yIGVycm9ycmlrKGVycm9ycmlrQGdtYWlsLmNvbSlcbiAqL1xuXG4vLyB2YXIgRXhwclR5cGUgPSByZXF1aXJlKCcuLi9wYXJzZXIvZXhwci10eXBlJyk7XG5cbi8qKlxuICog5a+55bGe5oCn5L+h5oGv6L+b6KGM5aSE55CGXG4gKiDlr7nnu4Tku7bnmoQgYmluZHMg5oiW6ICF54m55q6K55qE5bGe5oCn77yI5q+U5aaCIGlucHV0IOeahCBjaGVja2Vk77yJ6ZyA6KaB5aSE55CGXG4gKlxuICog5omB5bmz5YyW77yaXG4gKiDlvZMgdGV4dCDop6PmnpDlj6rmnInkuIDpobnml7bvvIzopoHkuYjlsLHmmK8gc3RyaW5n77yM6KaB5LmI5bCx5pivIGludGVycFxuICogaW50ZXJwIOacieWPr+iDveaYr+e7keWumuWIsOe7hOS7tuWxnuaAp+eahOihqOi+vuW8j++8jOS4jeW4jOacm+iiqyBldmFsIHRleHQg5oiQIHN0cmluZ1xuICog5omA5Lul6L+Z6YeM5YGa5Liq5aSE55CG77yM5Y+q5pyJ5LiA6aG55pe255u05o6l5oq95Ye65p2lXG4gKlxuICogYm9vbOWxnuaAp++8mlxuICog5b2T57uR5a6a6aG55rKh5pyJ5YC85pe277yM6buY6K6k5Li6dHJ1ZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wIOWxnuaAp+WvueixoVxuICovXG5mdW5jdGlvbiBwb3N0UHJvcChwcm9wKSB7XG4gICAgdmFyIGV4cHIgPSBwcm9wLmV4cHI7XG5cbiAgICBpZiAoZXhwci50eXBlID09PSBFeHByVHlwZS5URVhUKSB7XG4gICAgICAgIHN3aXRjaCAoZXhwci5zZWdzLmxlbmd0aCkge1xuICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIHByb3AuZXhwciA9IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogRXhwclR5cGUuQk9PTCxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHRydWVcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgZXhwciA9IHByb3AuZXhwciA9IGV4cHIuc2Vnc1swXTtcbiAgICAgICAgICAgICAgICBpZiAoZXhwci50eXBlID09PSBFeHByVHlwZS5JTlRFUlAgJiYgZXhwci5maWx0ZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBwcm9wLmV4cHIgPSBleHByLmV4cHI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG4vLyBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBwb3N0UHJvcDtcblxuXG4vKipcbiAqIEBmaWxlIOino+aekOaKveixoeiKgueCueWxnuaAp1xuICogQGF1dGhvciBlcnJvcnJpayhlcnJvcnJpa0BnbWFpbC5jb20pXG4gKi9cblxuLy8gdmFyIGVhY2ggPSByZXF1aXJlKCcuLi91dGlsL2VhY2gnKTtcbi8vIHZhciBrZWJhYjJjYW1lbCA9IHJlcXVpcmUoJy4uL3V0aWwva2ViYWIyY2FtZWwnKTtcbi8vIHZhciBFeHByVHlwZSA9IHJlcXVpcmUoJy4vZXhwci10eXBlJyk7XG4vLyB2YXIgY3JlYXRlQWNjZXNzb3IgPSByZXF1aXJlKCcuL2NyZWF0ZS1hY2Nlc3NvcicpO1xuLy8gdmFyIHBhcnNlRXhwciA9IHJlcXVpcmUoJy4vcGFyc2UtZXhwcicpO1xuLy8gdmFyIHBhcnNlQ2FsbCA9IHJlcXVpcmUoJy4vcGFyc2UtY2FsbCcpO1xuLy8gdmFyIHBhcnNlVGV4dCA9IHJlcXVpcmUoJy4vcGFyc2UtdGV4dCcpO1xuLy8gdmFyIHBhcnNlRGlyZWN0aXZlID0gcmVxdWlyZSgnLi9wYXJzZS1kaXJlY3RpdmUnKTtcbi8vIHZhciBwb3N0UHJvcCA9IHJlcXVpcmUoJy4vcG9zdC1wcm9wJyk7XG5cblxuLyoqXG4gKiDop6PmnpDmir3osaHoioLngrnlsZ7mgKdcbiAqXG4gKiBAcGFyYW0ge0FOb2RlfSBhTm9kZSDmir3osaHoioLngrlcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIOWxnuaAp+WQjeensFxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIOWxnuaAp+WAvFxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMg6Kej5p6Q5Y+C5pWwXG4gKiBAcGFyYW0ge0FycmF5P30gb3B0aW9ucy5kZWxpbWl0ZXJzIOaPkuWAvOWIhumalOespuWIl+ihqFxuICovXG5mdW5jdGlvbiBpbnRlZ3JhdGVBdHRyKGFOb2RlLCBuYW1lLCB2YWx1ZSwgb3B0aW9ucykge1xuICAgIHZhciBwcmVmaXhJbmRleCA9IG5hbWUuaW5kZXhPZignLScpO1xuICAgIHZhciByZWFsTmFtZTtcbiAgICB2YXIgcHJlZml4O1xuXG4gICAgaWYgKHByZWZpeEluZGV4ID4gMCkge1xuICAgICAgICBwcmVmaXggPSBuYW1lLnNsaWNlKDAsIHByZWZpeEluZGV4KTtcbiAgICAgICAgcmVhbE5hbWUgPSBuYW1lLnNsaWNlKHByZWZpeEluZGV4ICsgMSk7XG4gICAgfVxuXG4gICAgc3dpdGNoIChwcmVmaXgpIHtcbiAgICAgICAgY2FzZSAnb24nOlxuICAgICAgICAgICAgdmFyIGV2ZW50ID0ge1xuICAgICAgICAgICAgICAgIG5hbWU6IHJlYWxOYW1lLFxuICAgICAgICAgICAgICAgIG1vZGlmaWVyOiB7fVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGFOb2RlLmV2ZW50cy5wdXNoKGV2ZW50KTtcblxuICAgICAgICAgICAgdmFyIGNvbG9uSW5kZXg7XG4gICAgICAgICAgICB3aGlsZSAoKGNvbG9uSW5kZXggPSB2YWx1ZS5pbmRleE9mKCc6JykpID4gMCkge1xuICAgICAgICAgICAgICAgIHZhciBtb2RpZmllciA9IHZhbHVlLnNsaWNlKDAsIGNvbG9uSW5kZXgpO1xuXG4gICAgICAgICAgICAgICAgLy8gZXZlbnRIYW5kbGVyKFwiZGQ6YWFcIikg6L+Z56eN5oOF5Ya15LiN6IO9566XbW9kaWZpZXLvvIzpnIDopoHovqjor4ZcbiAgICAgICAgICAgICAgICBpZiAoIS9eW2Etel0rJC9pLnRlc3QobW9kaWZpZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGV2ZW50Lm1vZGlmaWVyW21vZGlmaWVyXSA9IHRydWU7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5zbGljZShjb2xvbkluZGV4ICsgMSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGV2ZW50LmV4cHIgPSBwYXJzZUNhbGwodmFsdWUsIFtcbiAgICAgICAgICAgICAgICBjcmVhdGVBY2Nlc3NvcihbXG4gICAgICAgICAgICAgICAgICAgIHsgdHlwZTogRXhwclR5cGUuU1RSSU5HLCB2YWx1ZTogJyRldmVudCcgfVxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ3Nhbic6XG4gICAgICAgIGNhc2UgJ3MnOlxuICAgICAgICAgICAgcGFyc2VEaXJlY3RpdmUoYU5vZGUsIHJlYWxOYW1lLCB2YWx1ZSwgb3B0aW9ucyk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdwcm9wJzpcbiAgICAgICAgICAgIGludGVncmF0ZVByb3AoYU5vZGUsIHJlYWxOYW1lLCB2YWx1ZSwgb3B0aW9ucyk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICd2YXInOlxuICAgICAgICAgICAgaWYgKCFhTm9kZS52YXJzKSB7XG4gICAgICAgICAgICAgICAgYU5vZGUudmFycyA9IFtdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZWFsTmFtZSA9IGtlYmFiMmNhbWVsKHJlYWxOYW1lKTtcbiAgICAgICAgICAgIGFOb2RlLnZhcnMucHVzaCh7XG4gICAgICAgICAgICAgICAgbmFtZTogcmVhbE5hbWUsXG4gICAgICAgICAgICAgICAgZXhwcjogcGFyc2VFeHByKHZhbHVlLnJlcGxhY2UoLyheXFx7XFx7fFxcfVxcfSQpL2csICcnKSlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGludGVncmF0ZVByb3AoYU5vZGUsIG5hbWUsIHZhbHVlLCBvcHRpb25zKTtcbiAgICB9XG59XG5cbi8qKlxuICog6Kej5p6Q5oq96LGh6IqC54K557uR5a6a5bGe5oCnXG4gKlxuICogQGlubmVyXG4gKiBAcGFyYW0ge0FOb2RlfSBhTm9kZSDmir3osaHoioLngrlcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIOWxnuaAp+WQjeensFxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIOWxnuaAp+WAvFxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMg6Kej5p6Q5Y+C5pWwXG4gKiBAcGFyYW0ge0FycmF5P30gb3B0aW9ucy5kZWxpbWl0ZXJzIOaPkuWAvOWIhumalOespuWIl+ihqFxuICovXG5mdW5jdGlvbiBpbnRlZ3JhdGVQcm9wKGFOb2RlLCBuYW1lLCB2YWx1ZSwgb3B0aW9ucykge1xuICAgIC8vIHBhcnNlIHR3byB3YXkgYmluZGluZywgZS5nLiB2YWx1ZT1cIns9aWRlbnQ9fVwiXG4gICAgdmFyIHhNYXRjaCA9IHZhbHVlLm1hdGNoKC9eXFx7PVxccyooLio/KVxccyo9XFx9JC8pO1xuXG4gICAgaWYgKHhNYXRjaCkge1xuICAgICAgICBhTm9kZS5wcm9wcy5wdXNoKHtcbiAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICBleHByOiBwYXJzZUV4cHIoeE1hdGNoWzFdKSxcbiAgICAgICAgICAgIHg6IDEsXG4gICAgICAgICAgICByYXc6IHZhbHVlXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBwYXJzZSBub3JtYWwgcHJvcFxuICAgIHZhciBwcm9wID0ge1xuICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICBleHByOiBwYXJzZVRleHQodmFsdWUsIG9wdGlvbnMuZGVsaW1pdGVycyksXG4gICAgICAgIHJhdzogdmFsdWVcbiAgICB9O1xuXG4gICAgLy8g6L+Z6YeM5LiN6IO95oqK5Y+q5pyJ5LiA5Liq5o+S5YC855qE5bGe5oCn5oq95Y+WXG4gICAgLy8g5Zug5Li65o+S5YC86YeM55qE5YC85Y+v6IO95pivaHRtbOeJh+aute+8jOWuueaYk+iiq+azqOWFpVxuICAgIC8vIOe7hOS7tueahOaVsOaNrue7keWumuWcqOe7hOS7tmluaXTml7blgZrmir3lj5ZcbiAgICBzd2l0Y2ggKG5hbWUpIHtcbiAgICAgICAgY2FzZSAnY2xhc3MnOlxuICAgICAgICBjYXNlICdzdHlsZSc6XG4gICAgICAgICAgICBlYWNoKHByb3AuZXhwci5zZWdzLCBmdW5jdGlvbiAoc2VnKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNlZy50eXBlID09PSBFeHByVHlwZS5JTlRFUlApIHtcbiAgICAgICAgICAgICAgICAgICAgc2VnLmZpbHRlcnMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBFeHByVHlwZS5DQUxMLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogY3JlYXRlQWNjZXNzb3IoW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogRXhwclR5cGUuU1RSSU5HLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogJ18nICsgcHJvcC5uYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICBhcmdzOiBbXVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ2NoZWNrZWQnOlxuICAgICAgICAgICAgaWYgKGFOb2RlLnRhZ05hbWUgPT09ICdpbnB1dCcpIHtcbiAgICAgICAgICAgICAgICBwb3N0UHJvcChwcm9wKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGFOb2RlLnByb3BzLnB1c2gocHJvcCk7XG59XG5cblxuLy8gZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gaW50ZWdyYXRlQXR0cjtcblxuXG4vKipcbiAqIEBmaWxlIOino+aekOaooeadv1xuICogQGF1dGhvciBlcnJvcnJpayhlcnJvcnJpa0BnbWFpbC5jb20pXG4gKi9cblxuXG4vLyB2YXIgY3JlYXRlQU5vZGUgPSByZXF1aXJlKCcuL2NyZWF0ZS1hLW5vZGUnKTtcbi8vIHZhciBXYWxrZXIgPSByZXF1aXJlKCcuL3dhbGtlcicpO1xuLy8gdmFyIGludGVncmF0ZUF0dHIgPSByZXF1aXJlKCcuL2ludGVncmF0ZS1hdHRyJyk7XG4vLyB2YXIgcGFyc2VUZXh0ID0gcmVxdWlyZSgnLi9wYXJzZS10ZXh0Jyk7XG4vLyB2YXIgYXV0b0Nsb3NlVGFncyA9IHJlcXVpcmUoJy4uL2Jyb3dzZXIvYXV0by1jbG9zZS10YWdzJyk7XG5cbi8vICNbYmVnaW5dIGVycm9yXG5mdW5jdGlvbiBnZXRYUGF0aChzdGFjaywgY3VycmVudFRhZ05hbWUpIHtcbiAgICB2YXIgcGF0aCA9IFsnUk9PVCddO1xuICAgIGZvciAodmFyIGkgPSAxLCBsZW4gPSBzdGFjay5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBwYXRoLnB1c2goc3RhY2tbaV0udGFnTmFtZSk7XG4gICAgfVxuICAgIGlmIChjdXJyZW50VGFnTmFtZSkge1xuICAgICAgICBwYXRoLnB1c2goY3VycmVudFRhZ05hbWUpO1xuICAgIH1cbiAgICByZXR1cm4gcGF0aC5qb2luKCc+Jyk7XG59XG4vLyAjW2VuZF1cblxuLyogZXNsaW50LWRpc2FibGUgZmVjcy1tYXgtc3RhdGVtZW50cyAqL1xuXG4vKipcbiAqIOino+aekCB0ZW1wbGF0ZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzb3VyY2UgdGVtcGxhdGXmupDnoIFcbiAqIEBwYXJhbSB7T2JqZWN0P30gb3B0aW9ucyDop6PmnpDlj4LmlbBcbiAqIEBwYXJhbSB7c3RyaW5nP30gb3B0aW9ucy50cmltV2hpdGVzcGFjZSDnqbrnmb3mlofmnKznmoTlpITnkIbnrZbnlaXjgIJub25lfGJsYW5rfGFsbFxuICogQHBhcmFtIHtBcnJheT99IG9wdGlvbnMuZGVsaW1pdGVycyDmj5LlgLzliIbpmpTnrKbliJfooahcbiAqIEByZXR1cm4ge0FOb2RlfVxuICovXG5mdW5jdGlvbiBwYXJzZVRlbXBsYXRlKHNvdXJjZSwgb3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIG9wdGlvbnMudHJpbVdoaXRlc3BhY2UgPSBvcHRpb25zLnRyaW1XaGl0ZXNwYWNlIHx8ICdub25lJztcblxuICAgIHZhciByb290Tm9kZSA9IGNyZWF0ZUFOb2RlKCk7XG5cbiAgICBpZiAodHlwZW9mIHNvdXJjZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIHJvb3ROb2RlO1xuICAgIH1cblxuICAgIHNvdXJjZSA9IHNvdXJjZS5yZXBsYWNlKC88IS0tKFtcXHNcXFNdKj8pLS0+L21nLCAnJykucmVwbGFjZSgvKF5cXHMrfFxccyskKS9nLCAnJyk7XG4gICAgdmFyIHdhbGtlciA9IG5ldyBXYWxrZXIoc291cmNlKTtcblxuICAgIHZhciB0YWdSZWcgPSAvPChcXC8pPyhbYS16MC05LV0rKVxccyovaWc7XG4gICAgdmFyIGF0dHJSZWcgPSAvKFstOjAtOWEtelxcKFxcKVxcW1xcXV0rKShcXHMqPVxccyooWydcIl0pKFteXFwzXSo/KVxcMyk/XFxzKi9pZztcblxuICAgIHZhciB0YWdNYXRjaDtcbiAgICB2YXIgY3VycmVudE5vZGUgPSByb290Tm9kZTtcbiAgICB2YXIgc3RhY2sgPSBbcm9vdE5vZGVdO1xuICAgIHZhciBzdGFja0luZGV4ID0gMDtcbiAgICB2YXIgYmVmb3JlTGFzdEluZGV4ID0gMDtcblxuICAgIHdoaWxlICgodGFnTWF0Y2ggPSB3YWxrZXIubWF0Y2godGFnUmVnKSkgIT0gbnVsbCkge1xuICAgICAgICB2YXIgdGFnRW5kID0gdGFnTWF0Y2hbMV07XG4gICAgICAgIHZhciB0YWdOYW1lID0gdGFnTWF0Y2hbMl0udG9Mb3dlckNhc2UoKTtcblxuICAgICAgICBwdXNoVGV4dE5vZGUoc291cmNlLnNsaWNlKFxuICAgICAgICAgICAgYmVmb3JlTGFzdEluZGV4LFxuICAgICAgICAgICAgd2Fsa2VyLmluZGV4IC0gdGFnTWF0Y2hbMF0ubGVuZ3RoXG4gICAgICAgICkpO1xuXG4gICAgICAgIC8vIDYyOiA+XG4gICAgICAgIC8vIDQ3OiAvXG4gICAgICAgIC8vIOWkhOeQhiA8L3h4eHggPlxuICAgICAgICBpZiAodGFnRW5kICYmIHdhbGtlci5jdXJyZW50Q29kZSgpID09PSA2Mikge1xuICAgICAgICAgICAgLy8g5ruh6Laz5YWz6Zet5qCH562+55qE5p2h5Lu25pe277yM5YWz6Zet5qCH562+XG4gICAgICAgICAgICAvLyDlkJHkuIrmn6Xmib7liLDlr7nlupTmoIfnrb7vvIzmib7kuI3liLDml7blv73nlaXlhbPpl61cbiAgICAgICAgICAgIHZhciBjbG9zZUluZGV4ID0gc3RhY2tJbmRleDtcblxuICAgICAgICAgICAgLy8gI1tiZWdpbl0gZXJyb3JcbiAgICAgICAgICAgIC8vIOWmguaenOato+WcqOmXreWQiOS4gOS4quiHqumXreWQiOeahOagh+etvu+8jOS+i+WmgiA8L2lucHV0Pu+8jOaKpemUmVxuICAgICAgICAgICAgaWYgKGF1dG9DbG9zZVRhZ3NbdGFnTmFtZV0pIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJydcbiAgICAgICAgICAgICAgICAgICAgKyAnW1NBTiBFUlJPUl0gJyArIGdldFhQYXRoKHN0YWNrLCB0YWdOYW1lKSArICcgaXMgYSBgYXV0byBjbG9zZWRgIHRhZywgJ1xuICAgICAgICAgICAgICAgICAgICArICdzbyBpdCBjYW5ub3QgYmUgY2xvc2VkIHdpdGggPC8nICsgdGFnTmFtZSArICc+J1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIOWmguaenOWFs+mXreeahCB0YWcg5ZKM5b2T5YmN5omT5byA55qE5LiN5LiA6Ie077yM5oql6ZSZXG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgc3RhY2tbY2xvc2VJbmRleF0udGFnTmFtZSAhPT0gdGFnTmFtZVxuICAgICAgICAgICAgICAgIC8vIOi/memHjOimgeaKiiB0YWJsZSDoh6rliqjmt7vliqAgdGJvZHkg55qE5oOF5Ya157uZ5Y675o6JXG4gICAgICAgICAgICAgICAgJiYgISh0YWdOYW1lID09PSAndGFibGUnICYmIHN0YWNrW2Nsb3NlSW5kZXhdLnRhZ05hbWUgPT09ICd0Ym9keScpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1tTQU4gRVJST1JdICcgKyBnZXRYUGF0aChzdGFjaykgKyAnIGlzIGNsb3NlZCB3aXRoICcgKyB0YWdOYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vICNbZW5kXVxuXG4gICAgICAgICAgICB3aGlsZSAoY2xvc2VJbmRleCA+IDAgJiYgc3RhY2tbY2xvc2VJbmRleF0udGFnTmFtZSAhPT0gdGFnTmFtZSkge1xuICAgICAgICAgICAgICAgIGNsb3NlSW5kZXgtLTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGNsb3NlSW5kZXggPiAwKSB7XG4gICAgICAgICAgICAgICAgc3RhY2tJbmRleCA9IGNsb3NlSW5kZXggLSAxO1xuICAgICAgICAgICAgICAgIGN1cnJlbnROb2RlID0gc3RhY2tbc3RhY2tJbmRleF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3YWxrZXIuZ28oMSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyAjW2JlZ2luXSBlcnJvclxuICAgICAgICAvLyDlpITnkIYgPC94eHgg6Z2e5q2j5bi46Zet5ZCI5qCH562+XG4gICAgICAgIGVsc2UgaWYgKHRhZ0VuZCkge1xuXG4gICAgICAgICAgICAvLyDlpoLmnpzpl63lkIjmoIfnrb7ml7bvvIzljLnphY3lkI7nmoTkuIvkuIDkuKrlrZfnrKbmmK8gPO+8jOWNs+S4i+S4gOS4quagh+etvueahOW8gOWni++8jOmCo+S5iOW9k+WJjemXreWQiOagh+etvuacqumXreWQiFxuICAgICAgICAgICAgaWYgKHdhbGtlci5jdXJyZW50Q29kZSgpID09PSA2MCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignJ1xuICAgICAgICAgICAgICAgICAgICArICdbU0FOIEVSUk9SXSAnICsgZ2V0WFBhdGgoc3RhY2spXG4gICAgICAgICAgICAgICAgICAgICsgJ1xcJ3MgY2xvc2UgdGFnIG5vdCBjbG9zZWQnXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8g6Zet5ZCI5qCH562+5pyJ5bGe5oCnXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJydcbiAgICAgICAgICAgICAgICArICdbU0FOIEVSUk9SXSAnICsgZ2V0WFBhdGgoc3RhY2spXG4gICAgICAgICAgICAgICAgKyAnXFwncyBjbG9zZSB0YWcgaGFzIGF0dHJpYnV0ZXMnXG4gICAgICAgICAgICApO1xuXG4gICAgICAgIH1cbiAgICAgICAgLy8gI1tlbmRdXG5cbiAgICAgICAgZWxzZSBpZiAoIXRhZ0VuZCkge1xuICAgICAgICAgICAgdmFyIGFFbGVtZW50ID0gY3JlYXRlQU5vZGUoe1xuICAgICAgICAgICAgICAgIHRhZ05hbWU6IHRhZ05hbWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdmFyIHRhZ0Nsb3NlID0gYXV0b0Nsb3NlVGFnc1t0YWdOYW1lXTtcblxuICAgICAgICAgICAgLy8g6Kej5p6QIGF0dHJpYnV0ZXNcblxuICAgICAgICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tY29uc3RhbnQtY29uZGl0aW9uICovXG4gICAgICAgICAgICB3aGlsZSAoMSkge1xuICAgICAgICAgICAgLyogZXNsaW50LWVuYWJsZSBuby1jb25zdGFudC1jb25kaXRpb24gKi9cblxuICAgICAgICAgICAgICAgIHZhciBuZXh0Q2hhckNvZGUgPSB3YWxrZXIuY3VycmVudENvZGUoKTtcblxuICAgICAgICAgICAgICAgIC8vIOagh+etvue7k+adn+aXtui3s+WHuiBhdHRyaWJ1dGVzIOivu+WPllxuICAgICAgICAgICAgICAgIC8vIOagh+etvuWPr+iDveebtOaOpee7k+adn+aIlumXreWQiOe7k+adn1xuICAgICAgICAgICAgICAgIGlmIChuZXh0Q2hhckNvZGUgPT09IDYyKSB7XG4gICAgICAgICAgICAgICAgICAgIHdhbGtlci5nbygxKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIOmBh+WIsCAvPiDmjInpl63lkIjlpITnkIZcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChuZXh0Q2hhckNvZGUgPT09IDQ3XG4gICAgICAgICAgICAgICAgICAgICYmIHdhbGtlci5jaGFyQ29kZSh3YWxrZXIuaW5kZXggKyAxKSA9PT0gNjJcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgd2Fsa2VyLmdvKDIpO1xuICAgICAgICAgICAgICAgICAgICB0YWdDbG9zZSA9IDE7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vICNbYmVnaW5dIGVycm9yXG4gICAgICAgICAgICAgICAgLy8g5Zyo5aSE55CG5LiA5LiqIG9wZW4g5qCH562+5pe277yM5aaC5p6c6YGH5Yiw5LqGIDzvvIwg5Y2z5LiL5LiA5Liq5qCH562+55qE5byA5aeL77yM5YiZ5b2T5YmN5qCH562+5pyq6IO95q2j5bi46Zet5ZCI77yM5oql6ZSZXG4gICAgICAgICAgICAgICAgaWYgKG5leHRDaGFyQ29kZSA9PT0gNjApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdbU0FOIEVSUk9SXSAnICsgZ2V0WFBhdGgoc3RhY2ssIHRhZ05hbWUpICsgJyBpcyBub3QgY2xvc2VkJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vICNbZW5kXVxuXG4gICAgICAgICAgICAgICAgLy8g6K+75Y+WIGF0dHJpYnV0ZVxuICAgICAgICAgICAgICAgIHZhciBhdHRyTWF0Y2ggPSB3YWxrZXIubWF0Y2goYXR0clJlZyk7XG4gICAgICAgICAgICAgICAgaWYgKGF0dHJNYXRjaCkge1xuXG4gICAgICAgICAgICAgICAgICAgIC8vICNbYmVnaW5dIGVycm9yXG4gICAgICAgICAgICAgICAgICAgIC8vIOWmguaenOWxnuaAp+aciSA977yM5L2G5rKh5Y+W5YiwIHZhbHVl77yM5oql6ZSZXG4gICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhbGtlci5jaGFyQ29kZShhdHRyTWF0Y2guaW5kZXggKyBhdHRyTWF0Y2hbMV0ubGVuZ3RoKSA9PT0gNjFcbiAgICAgICAgICAgICAgICAgICAgICAgICYmICFhdHRyTWF0Y2hbMl1cbiAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArICdbU0FOIEVSUk9SXSAnICsgZ2V0WFBhdGgoc3RhY2ssIHRhZ05hbWUpICsgJyBhdHRyaWJ1dGUgYCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIGF0dHJNYXRjaFsxXSArICdgIGlzIG5vdCB3cmFwcGVkIHdpdGggXCJcIidcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gI1tlbmRdXG5cbiAgICAgICAgICAgICAgICAgICAgaW50ZWdyYXRlQXR0cihcbiAgICAgICAgICAgICAgICAgICAgICAgIGFFbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0ck1hdGNoWzFdLFxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0ck1hdGNoWzJdID8gYXR0ck1hdGNoWzRdIDogJycsXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIG1hdGNoIGlmIGRpcmVjdGl2ZSBmb3IgZWxzZS9lbGlmIGRpcmVjdGl2ZVxuICAgICAgICAgICAgdmFyIGVsc2VEaXJlY3RpdmUgPSBhRWxlbWVudC5kaXJlY3RpdmVzWydlbHNlJ10gfHwgYUVsZW1lbnQuZGlyZWN0aXZlcy5lbGlmOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGRvdC1ub3RhdGlvblxuICAgICAgICAgICAgaWYgKGVsc2VEaXJlY3RpdmUpIHtcbiAgICAgICAgICAgICAgICB2YXIgcGFyZW50Q2hpbGRyZW5MZW4gPSBjdXJyZW50Tm9kZS5jaGlsZHJlbi5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgICB3aGlsZSAocGFyZW50Q2hpbGRyZW5MZW4tLSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcGFyZW50Q2hpbGQgPSBjdXJyZW50Tm9kZS5jaGlsZHJlbltwYXJlbnRDaGlsZHJlbkxlbl07XG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJlbnRDaGlsZC50ZXh0RXhwcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudE5vZGUuY2hpbGRyZW4uc3BsaWNlKHBhcmVudENoaWxkcmVuTGVuLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gI1tiZWdpbl0gZXJyb3JcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFwYXJlbnRDaGlsZC5kaXJlY3RpdmVzWydpZiddKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZG90LW5vdGF0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1tTQU4gRkFURUxdIGVsc2Ugbm90IG1hdGNoIGlmLicpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vICNbZW5kXVxuXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudENoaWxkLmVsc2VzID0gcGFyZW50Q2hpbGQuZWxzZXMgfHwgW107XG4gICAgICAgICAgICAgICAgICAgIHBhcmVudENoaWxkLmVsc2VzLnB1c2goYUVsZW1lbnQpO1xuXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChhRWxlbWVudC50YWdOYW1lID09PSAndHInICYmIGN1cnJlbnROb2RlLnRhZ05hbWUgPT09ICd0YWJsZScpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRib2R5Tm9kZSA9IGNyZWF0ZUFOb2RlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhZ05hbWU6ICd0Ym9keSdcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnROb2RlLmNoaWxkcmVuLnB1c2godGJvZHlOb2RlKTtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudE5vZGUgPSB0Ym9keU5vZGU7XG4gICAgICAgICAgICAgICAgICAgIHN0YWNrWysrc3RhY2tJbmRleF0gPSB0Ym9keU5vZGU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY3VycmVudE5vZGUuY2hpbGRyZW4ucHVzaChhRWxlbWVudCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghdGFnQ2xvc2UpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50Tm9kZSA9IGFFbGVtZW50O1xuICAgICAgICAgICAgICAgIHN0YWNrWysrc3RhY2tJbmRleF0gPSBhRWxlbWVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGJlZm9yZUxhc3RJbmRleCA9IHdhbGtlci5pbmRleDtcbiAgICB9XG5cbiAgICBwdXNoVGV4dE5vZGUod2Fsa2VyLmN1dChiZWZvcmVMYXN0SW5kZXgpKTtcblxuICAgIHJldHVybiByb290Tm9kZTtcblxuICAgIC8qKlxuICAgICAqIOWcqOivu+WPluagiOS4rea3u+WKoOaWh+acrOiKgueCuVxuICAgICAqXG4gICAgICogQGlubmVyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRleHQg5paH5pys5YaF5a65XG4gICAgICovXG4gICAgZnVuY3Rpb24gcHVzaFRleHROb2RlKHRleHQpIHtcbiAgICAgICAgc3dpdGNoIChvcHRpb25zLnRyaW1XaGl0ZXNwYWNlKSB7XG4gICAgICAgICAgICBjYXNlICdibGFuayc6XG4gICAgICAgICAgICAgICAgaWYgKC9eXFxzKyQvLnRlc3QodGV4dCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dCA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlICdhbGwnOlxuICAgICAgICAgICAgICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoLyheXFxzK3xcXHMrJCkvZywgJycpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRleHQpIHtcbiAgICAgICAgICAgIGN1cnJlbnROb2RlLmNoaWxkcmVuLnB1c2goY3JlYXRlQU5vZGUoe1xuICAgICAgICAgICAgICAgIHRleHRFeHByOiBwYXJzZVRleHQodGV4dCwgb3B0aW9ucy5kZWxpbWl0ZXJzKVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vKiBlc2xpbnQtZW5hYmxlIGZlY3MtbWF4LXN0YXRlbWVudHMgKi9cblxuLy8gZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcGFyc2VUZW1wbGF0ZTtcblxuXG4vKipcbiAqIEBmaWxlIOm7mOiupGZpbHRlclxuICogQGF1dGhvciBlcnJvcnJpayhlcnJvcnJpa0BnbWFpbC5jb20pXG4gKi9cblxuXG4vKiBlc2xpbnQtZGlzYWJsZSBmZWNzLWNhbWVsY2FzZSAqL1xuLyogZXNsaW50LWRpc2FibGUgZ3VhcmQtZm9yLWluICovXG5cbi8qKlxuICog6buY6K6kZmlsdGVyXG4gKlxuICogQGNvbnN0XG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG52YXIgREVGQVVMVF9GSUxURVJTID0ge1xuXG4gICAgLyoqXG4gICAgICogVVJM57yW56CBZmlsdGVyXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc291cmNlIOa6kOS4slxuICAgICAqIEByZXR1cm4ge3N0cmluZ30g5pu/5o2i57uT5p6c5LiyXG4gICAgICovXG4gICAgdXJsOiBlbmNvZGVVUklDb21wb25lbnQsXG5cbiAgICBfY2xhc3M6IGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgICAgaWYgKHNvdXJjZSBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgICByZXR1cm4gc291cmNlLmpvaW4oJyAnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzb3VyY2U7XG4gICAgfSxcblxuICAgIF9zdHlsZTogZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgICBpZiAodHlwZW9mIHNvdXJjZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSAnJztcbiAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0ga2V5ICsgJzonICsgc291cmNlW2tleV0gKyAnOyc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc291cmNlO1xuICAgIH0sXG5cbiAgICBfc2VwOiBmdW5jdGlvbiAoc291cmNlLCBzZXApIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZSA/IHNlcCArIHNvdXJjZSA6IHNvdXJjZTtcbiAgICB9XG59O1xuLyogZXNsaW50LWVuYWJsZSBmZWNzLWNhbWVsY2FzZSAqL1xuXG4vLyBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBERUZBVUxUX0ZJTFRFUlM7XG5cblxuLyoqXG4gKiBAZmlsZSDooajovr7lvI/orqHnrpdcbiAqIEBhdXRob3IgZXJyb3JyaWsoZXJyb3JyaWtAZ21haWwuY29tKVxuICovXG5cbi8vIHZhciBFeHByVHlwZSA9IHJlcXVpcmUoJy4uL3BhcnNlci9leHByLXR5cGUnKTtcbi8vIHZhciBERUZBVUxUX0ZJTFRFUlMgPSByZXF1aXJlKCcuL2RlZmF1bHQtZmlsdGVycycpO1xuLy8gdmFyIGV2YWxBcmdzID0gcmVxdWlyZSgnLi9ldmFsLWFyZ3MnKTtcbi8vIHZhciBkYXRhQ2FjaGUgPSByZXF1aXJlKCcuL2RhdGEtY2FjaGUnKTtcblxuLyoqXG4gKiDorqHnrpfooajovr7lvI/nmoTlgLxcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZXhwciDooajovr7lvI/lr7nosaFcbiAqIEBwYXJhbSB7RGF0YX0gZGF0YSDmlbDmja7lrrnlmajlr7nosaFcbiAqIEBwYXJhbSB7Q29tcG9uZW50PX0gb3duZXIg5omA5bGe57uE5Lu2546v5aKDXG4gKiBAcmV0dXJuIHsqfVxuICovXG5mdW5jdGlvbiBldmFsRXhwcihleHByLCBkYXRhLCBvd25lcikge1xuICAgIGlmIChleHByLnZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGV4cHIudmFsdWU7XG4gICAgfVxuXG4gICAgdmFyIHZhbHVlID0gZGF0YUNhY2hlLmdldChkYXRhLCBleHByKTtcblxuICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHN3aXRjaCAoZXhwci50eXBlKSB7XG4gICAgICAgICAgICBjYXNlIEV4cHJUeXBlLlVOQVJZOlxuICAgICAgICAgICAgICAgIHZhbHVlID0gIWV2YWxFeHByKGV4cHIuZXhwciwgZGF0YSwgb3duZXIpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIEV4cHJUeXBlLkJJTkFSWTpcbiAgICAgICAgICAgICAgICB2YXIgbGVmdFZhbHVlID0gZXZhbEV4cHIoZXhwci5zZWdzWzBdLCBkYXRhLCBvd25lcik7XG4gICAgICAgICAgICAgICAgdmFyIHJpZ2h0VmFsdWUgPSBldmFsRXhwcihleHByLnNlZ3NbMV0sIGRhdGEsIG93bmVyKTtcblxuICAgICAgICAgICAgICAgIC8qIGVzbGludC1kaXNhYmxlIGVxZXFlcSAqL1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoZXhwci5vcGVyYXRvcikge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDM3OlxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBsZWZ0VmFsdWUgJSByaWdodFZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDM6XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGxlZnRWYWx1ZSArIHJpZ2h0VmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0NTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gbGVmdFZhbHVlIC0gcmlnaHRWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDQyOlxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBsZWZ0VmFsdWUgKiByaWdodFZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDc6XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGxlZnRWYWx1ZSAvIHJpZ2h0VmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA2MDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gbGVmdFZhbHVlIDwgcmlnaHRWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDYyOlxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBsZWZ0VmFsdWUgPiByaWdodFZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNzY6XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGxlZnRWYWx1ZSAmJiByaWdodFZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgOTQ6XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGxlZnRWYWx1ZSAhPSByaWdodFZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTIxOlxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBsZWZ0VmFsdWUgPD0gcmlnaHRWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDEyMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gbGVmdFZhbHVlID09IHJpZ2h0VmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxMjM6XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGxlZnRWYWx1ZSA+PSByaWdodFZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTU1OlxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBsZWZ0VmFsdWUgIT09IHJpZ2h0VmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxODM6XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGxlZnRWYWx1ZSA9PT0gcmlnaHRWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDI0ODpcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gbGVmdFZhbHVlIHx8IHJpZ2h0VmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLyogZXNsaW50LWVuYWJsZSBlcWVxZXEgKi9cbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSBFeHByVHlwZS5URVJUSUFSWTpcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IGV2YWxFeHByKFxuICAgICAgICAgICAgICAgICAgICBleHByLnNlZ3NbZXZhbEV4cHIoZXhwci5zZWdzWzBdLCBkYXRhLCBvd25lcikgPyAxIDogMl0sXG4gICAgICAgICAgICAgICAgICAgIGRhdGEsXG4gICAgICAgICAgICAgICAgICAgIG93bmVyXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSBFeHByVHlwZS5BQ0NFU1NPUjpcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IGRhdGEuZ2V0KGV4cHIpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIEV4cHJUeXBlLklOVEVSUDpcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IGV2YWxFeHByKGV4cHIuZXhwciwgZGF0YSwgb3duZXIpO1xuXG4gICAgICAgICAgICAgICAgaWYgKG93bmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gZXhwci5maWx0ZXJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpbHRlciA9IGV4cHIuZmlsdGVyc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmaWx0ZXJOYW1lID0gZmlsdGVyLm5hbWUucGF0aHNbMF0udmFsdWU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvd25lci5maWx0ZXJzW2ZpbHRlck5hbWVdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBvd25lci5maWx0ZXJzW2ZpbHRlck5hbWVdLmFwcGx5KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvd25lcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW3ZhbHVlXS5jb25jYXQoZXZhbEFyZ3MoZmlsdGVyLmFyZ3MsIGRhdGEsIG93bmVyKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoREVGQVVMVF9GSUxURVJTW2ZpbHRlck5hbWVdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBERUZBVUxUX0ZJTFRFUlNbZmlsdGVyTmFtZV0oXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXIuYXJnc1swXSA/IGZpbHRlci5hcmdzWzBdLnZhbHVlIDogJydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSAnJztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tcmVkZWNsYXJlICovXG4gICAgICAgICAgICBjYXNlIEV4cHJUeXBlLlRFWFQ6XG4gICAgICAgICAgICAgICAgdmFyIGJ1ZiA9ICcnO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gZXhwci5zZWdzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2VnID0gZXhwci5zZWdzW2ldO1xuICAgICAgICAgICAgICAgICAgICBidWYgKz0gc2VnLnZhbHVlIHx8IGV2YWxFeHByKHNlZywgZGF0YSwgb3duZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gYnVmO1xuICAgICAgICB9XG5cbiAgICAgICAgZGF0YUNhY2hlLnNldChkYXRhLCBleHByLCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlO1xufVxuXG4vLyBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBldmFsRXhwcjtcblxuXG4vKipcbiAqIEBmaWxlIOS4uuWHveaVsOiwg+eUqOiuoeeul+WPguaVsOaVsOe7hOeahOWAvFxuICogQGF1dGhvciBlcnJvcnJpayhlcnJvcnJpa0BnbWFpbC5jb20pXG4gKi9cblxuXG4vLyB2YXIgZXZhbEV4cHIgPSByZXF1aXJlKCcuLi9ydW50aW1lL2V2YWwtZXhwcicpO1xuXG4vKipcbiAqIOS4uuWHveaVsOiwg+eUqOiuoeeul+WPguaVsOaVsOe7hOeahOWAvFxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGFyZ3Mg5Y+C5pWw6KGo6L6+5byP5YiX6KGoXG4gKiBAcGFyYW0ge0RhdGF9IGRhdGEg5pWw5o2u546v5aKDXG4gKiBAcGFyYW0ge0NvbXBvbmVudH0gb3duZXIg57uE5Lu2546v5aKDXG4gKiBAcmV0dXJuIHtBcnJheX1cbiAqL1xuZnVuY3Rpb24gZXZhbEFyZ3MoYXJncywgZGF0YSwgb3duZXIpIHtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKGV2YWxFeHByKGFyZ3NbaV0sIGRhdGEsIG93bmVyKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLy8gZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZXZhbEFyZ3M7XG5cblxuLyoqXG4gKiBAZmlsZSDmlbDmja7nvJPlrZjnrqHnkIblmahcbiAqIEBhdXRob3IgZXJyb3JyaWsoZXJyb3JyaWtAZ21haWwuY29tKVxuICovXG5cblxuXG52YXIgZGF0YUNhY2hlU291cmNlID0ge307XG52YXIgZGF0YUNhY2hlQ2xlYXJseSA9IDE7XG5cbi8qKlxuICog5pWw5o2u57yT5a2Y566h55CG5ZmoXG4gKlxuICogQGNvbnN0XG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG52YXIgZGF0YUNhY2hlID0ge1xuICAgIGNsZWFyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghZGF0YUNhY2hlQ2xlYXJseSkge1xuICAgICAgICAgICAgZGF0YUNhY2hlQ2xlYXJseSA9IDE7XG4gICAgICAgICAgICBkYXRhQ2FjaGVTb3VyY2UgPSB7fTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBzZXQ6IGZ1bmN0aW9uIChkYXRhLCBleHByLCB2YWx1ZSkge1xuICAgICAgICBpZiAoZXhwci5yYXcpIHtcbiAgICAgICAgICAgIGRhdGFDYWNoZUNsZWFybHkgPSAwO1xuICAgICAgICAgICAgKGRhdGFDYWNoZVNvdXJjZVtkYXRhLmlkXSA9IGRhdGFDYWNoZVNvdXJjZVtkYXRhLmlkXSB8fCB7fSlbZXhwci5yYXddID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgZ2V0OiBmdW5jdGlvbiAoZGF0YSwgZXhwcikge1xuICAgICAgICBpZiAoZXhwci5yYXcgJiYgZGF0YUNhY2hlU291cmNlW2RhdGEuaWRdKSB7XG4gICAgICAgICAgICByZXR1cm4gZGF0YUNhY2hlU291cmNlW2RhdGEuaWRdW2V4cHIucmF3XTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cblxuLy8gZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZGF0YUNhY2hlO1xuXG5cbi8qKlxuICogQGZpbGUg5q+U6L6D5Y+Y5pu06KGo6L6+5byP5LiO55uu5qCH6KGo6L6+5byP5LmL6Ze055qE5YWz57O7XG4gKiBAYXV0aG9yIGVycm9ycmlrKGVycm9ycmlrQGdtYWlsLmNvbSlcbiAqL1xuXG4vLyB2YXIgRXhwclR5cGUgPSByZXF1aXJlKCcuLi9wYXJzZXIvZXhwci10eXBlJyk7XG4vLyB2YXIgZXZhbEV4cHIgPSByZXF1aXJlKCcuL2V2YWwtZXhwcicpO1xuLy8gdmFyIGVhY2ggPSByZXF1aXJlKCcuLi91dGlsL2VhY2gnKTtcblxuLyoqXG4gKiDliKTmlq3lj5jmm7Tooajovr7lvI/kuI7lpJrkuKrooajovr7lvI/kuYvpl7TnmoTlhbPns7vvvIww5Li65a6M5YWo5rKh5YWz57O777yMMeS4uuacieWFs+ezu1xuICpcbiAqIEBpbm5lclxuICogQHBhcmFtIHtPYmplY3R9IGNoYW5nZUV4cHIg55uu5qCH6KGo6L6+5byPXG4gKiBAcGFyYW0ge0FycmF5fSBleHBycyDlpJrkuKrmupDooajovr7lvI9cbiAqIEBwYXJhbSB7RGF0YX0gZGF0YSDooajovr7lvI/miYDlsZ7mlbDmja7njq/looNcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZnVuY3Rpb24gY2hhbmdlRXhwckNvbXBhcmVFeHBycyhjaGFuZ2VFeHByLCBleHBycywgZGF0YSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gZXhwcnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGlmIChjaGFuZ2VFeHByQ29tcGFyZShjaGFuZ2VFeHByLCBleHByc1tpXSwgZGF0YSkpIHtcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIDA7XG59XG5cbi8qKlxuICog5q+U6L6D5Y+Y5pu06KGo6L6+5byP5LiO55uu5qCH6KGo6L6+5byP5LmL6Ze055qE5YWz57O777yM55So5LqO6KeG5Zu+5pu05paw5Yik5patXG4gKiDop4blm77mm7TmlrDpnIDopoHmoLnmja7lhbblhbPns7vvvIzlgZrlh7rnm7jlupTnmoTmm7TmlrDooYzkuLpcbiAqXG4gKiAwOiDlrozlhajmsqHlhbPns7tcbiAqIDE6IOWPmOabtOihqOi+vuW8j+aYr+ebruagh+ihqOi+vuW8j+eahOavjemhuSjlpoJh5LiOYS5iKSDmiJYg6KGo56S66ZyA6KaB5a6M5YWo5Y+Y5YyWXG4gKiAyOiDlj5jmm7Tooajovr7lvI/mmK/nm67moIfooajovr7lvI/nm7jnrYlcbiAqID4yOiDlj5jmm7Tooajovr7lvI/mmK/nm67moIfooajovr7lvI/nmoTlrZDpobnvvIzlpoJhLmIuY+S4jmEuYlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjaGFuZ2VFeHByIOWPmOabtOihqOi+vuW8j1xuICogQHBhcmFtIHtPYmplY3R9IGV4cHIg6KaB5q+U6L6D55qE55uu5qCH6KGo6L6+5byPXG4gKiBAcGFyYW0ge0RhdGF9IGRhdGEg6KGo6L6+5byP5omA5bGe5pWw5o2u546v5aKDXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmZ1bmN0aW9uIGNoYW5nZUV4cHJDb21wYXJlKGNoYW5nZUV4cHIsIGV4cHIsIGRhdGEpIHtcbiAgICBzd2l0Y2ggKGV4cHIudHlwZSkge1xuICAgICAgICBjYXNlIEV4cHJUeXBlLkFDQ0VTU09SOlxuICAgICAgICAgICAgdmFyIHBhdGhzID0gZXhwci5wYXRocztcbiAgICAgICAgICAgIHZhciBsZW4gPSBwYXRocy5sZW5ndGg7XG4gICAgICAgICAgICB2YXIgY2hhbmdlUGF0aHMgPSBjaGFuZ2VFeHByLnBhdGhzO1xuICAgICAgICAgICAgdmFyIGNoYW5nZUxlbiA9IGNoYW5nZVBhdGhzLmxlbmd0aDtcblxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IDE7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHBhdGhFeHByID0gcGF0aHNbaV07XG5cbiAgICAgICAgICAgICAgICBpZiAocGF0aEV4cHIudHlwZSA9PT0gRXhwclR5cGUuQUNDRVNTT1JcbiAgICAgICAgICAgICAgICAgICAgJiYgY2hhbmdlRXhwckNvbXBhcmUoY2hhbmdlRXhwciwgcGF0aEV4cHIsIGRhdGEpXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgJiYgaSA8IGNoYW5nZUxlblxuICAgICAgICAgICAgICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBlcWVxZXEgKi9cbiAgICAgICAgICAgICAgICAgICAgJiYgKHBhdGhFeHByLnZhbHVlIHx8IGV2YWxFeHByKHBhdGhFeHByLCBkYXRhKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICE9IChjaGFuZ2VQYXRoc1tpXS52YWx1ZSB8fCBldmFsRXhwcihjaGFuZ2VQYXRoc1tpXSwgZGF0YSkpXG4gICAgICAgICAgICAgICAgICAgIC8qIGVzbGludC1lbmFibGUgZXFlcWVxICovXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gTWF0aC5tYXgoMSwgY2hhbmdlTGVuIC0gbGVuICsgMik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuXG4gICAgICAgIGNhc2UgRXhwclR5cGUuVU5BUlk6XG4gICAgICAgICAgICByZXR1cm4gY2hhbmdlRXhwckNvbXBhcmUoY2hhbmdlRXhwciwgZXhwci5leHByLCBkYXRhKSA/IDEgOiAwO1xuXG5cbiAgICAgICAgY2FzZSBFeHByVHlwZS5URVhUOlxuICAgICAgICBjYXNlIEV4cHJUeXBlLkJJTkFSWTpcbiAgICAgICAgY2FzZSBFeHByVHlwZS5URVJUSUFSWTpcbiAgICAgICAgICAgIHJldHVybiBjaGFuZ2VFeHByQ29tcGFyZUV4cHJzKGNoYW5nZUV4cHIsIGV4cHIuc2VncywgZGF0YSk7XG5cbiAgICAgICAgY2FzZSBFeHByVHlwZS5JTlRFUlA6XG4gICAgICAgICAgICBpZiAoIWNoYW5nZUV4cHJDb21wYXJlKGNoYW5nZUV4cHIsIGV4cHIuZXhwciwgZGF0YSkpIHtcbiAgICAgICAgICAgICAgICB2YXIgZmlsdGVyUmVzdWx0O1xuICAgICAgICAgICAgICAgIGVhY2goZXhwci5maWx0ZXJzLCBmdW5jdGlvbiAoZmlsdGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGZpbHRlclJlc3VsdCA9IGNoYW5nZUV4cHJDb21wYXJlRXhwcnMoY2hhbmdlRXhwciwgZmlsdGVyLmFyZ3MsIGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gIWZpbHRlclJlc3VsdDtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBmaWx0ZXJSZXN1bHQgPyAxIDogMDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIDA7XG59XG5cbi8vIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGNoYW5nZUV4cHJDb21wYXJlO1xuXG5cbi8qKlxuICogQGZpbGUg5pWw5o2u5Y+Y5pu057G75Z6L5p6a5Li+XG4gKiBAYXV0aG9yIGVycm9ycmlrKGVycm9ycmlrQGdtYWlsLmNvbSlcbiAqL1xuXG4vKipcbiAqIOaVsOaNruWPmOabtOexu+Wei+aemuS4vlxuICpcbiAqIEBjb25zdFxuICogQHR5cGUge09iamVjdH1cbiAqL1xudmFyIERhdGFDaGFuZ2VUeXBlID0ge1xuICAgIFNFVDogMSxcbiAgICBTUExJQ0U6IDJcbn07XG5cbi8vIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IERhdGFDaGFuZ2VUeXBlO1xuXG5cbi8qKlxuICogQGZpbGUg55Sf5ZG95ZGo5pyf57G7XG4gKiBAYXV0aG9yIGVycm9ycmlrKGVycm9ycmlrQGdtYWlsLmNvbSlcbiAqL1xuXG5mdW5jdGlvbiBsaWZlQ3ljbGVPd25JcyhuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXNbbmFtZV07XG59XG5cbi8qIGVzbGludC1kaXNhYmxlIGZlY3MtdmFsaWQtdmFyLWpzZG9jICovXG4vKipcbiAqIOiKgueCueeUn+WRveWRqOacn+S/oeaBr1xuICpcbiAqIEBpbm5lclxuICogQHR5cGUge09iamVjdH1cbiAqL1xudmFyIExpZmVDeWNsZSA9IHtcbiAgICBzdGFydDoge30sXG5cbiAgICBjb21waWxlZDoge1xuICAgICAgICBpczogbGlmZUN5Y2xlT3duSXMsXG4gICAgICAgIGNvbXBpbGVkOiB0cnVlXG4gICAgfSxcblxuICAgIGluaXRlZDoge1xuICAgICAgICBpczogbGlmZUN5Y2xlT3duSXMsXG4gICAgICAgIGNvbXBpbGVkOiB0cnVlLFxuICAgICAgICBpbml0ZWQ6IHRydWVcbiAgICB9LFxuXG4gICAgcGFpbnRpbmc6IHtcbiAgICAgICAgaXM6IGxpZmVDeWNsZU93bklzLFxuICAgICAgICBjb21waWxlZDogdHJ1ZSxcbiAgICAgICAgaW5pdGVkOiB0cnVlLFxuICAgICAgICBwYWludGluZzogdHJ1ZVxuICAgIH0sXG5cbiAgICBjcmVhdGVkOiB7XG4gICAgICAgIGlzOiBsaWZlQ3ljbGVPd25JcyxcbiAgICAgICAgY29tcGlsZWQ6IHRydWUsXG4gICAgICAgIGluaXRlZDogdHJ1ZSxcbiAgICAgICAgY3JlYXRlZDogdHJ1ZVxuICAgIH0sXG5cbiAgICBhdHRhY2hlZDoge1xuICAgICAgICBpczogbGlmZUN5Y2xlT3duSXMsXG4gICAgICAgIGNvbXBpbGVkOiB0cnVlLFxuICAgICAgICBpbml0ZWQ6IHRydWUsXG4gICAgICAgIGNyZWF0ZWQ6IHRydWUsXG4gICAgICAgIGF0dGFjaGVkOiB0cnVlXG4gICAgfSxcblxuICAgIGxlYXZpbmc6IHtcbiAgICAgICAgaXM6IGxpZmVDeWNsZU93bklzLFxuICAgICAgICBjb21waWxlZDogdHJ1ZSxcbiAgICAgICAgaW5pdGVkOiB0cnVlLFxuICAgICAgICBjcmVhdGVkOiB0cnVlLFxuICAgICAgICBhdHRhY2hlZDogdHJ1ZSxcbiAgICAgICAgbGVhdmluZzogdHJ1ZVxuICAgIH0sXG5cbiAgICBkZXRhY2hlZDoge1xuICAgICAgICBpczogbGlmZUN5Y2xlT3duSXMsXG4gICAgICAgIGNvbXBpbGVkOiB0cnVlLFxuICAgICAgICBpbml0ZWQ6IHRydWUsXG4gICAgICAgIGNyZWF0ZWQ6IHRydWUsXG4gICAgICAgIGRldGFjaGVkOiB0cnVlXG4gICAgfSxcblxuICAgIGRpc3Bvc2VkOiB7XG4gICAgICAgIGlzOiBsaWZlQ3ljbGVPd25JcyxcbiAgICAgICAgZGlzcG9zZWQ6IHRydWVcbiAgICB9XG59O1xuLyogZXNsaW50LWVuYWJsZSBmZWNzLXZhbGlkLXZhci1qc2RvYyAqL1xuXG5cbi8vIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IExpZmVDeWNsZTtcblxuXG4vKipcbiAqIEBmaWxlIOiKgueCueexu+Wei1xuICogQGF1dGhvciBlcnJvcnJpayhlcnJvcnJpa0BnbWFpbC5jb20pXG4gKi9cblxuLyoqXG4gKiDoioLngrnnsbvlnotcbiAqXG4gKiBAY29uc3RcbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cbnZhciBOb2RlVHlwZSA9IHtcbiAgICBURVhUOiAxLFxuICAgIElGOiAyLFxuICAgIEZPUjogMyxcbiAgICBFTEVNOiA0LFxuICAgIENNUFQ6IDUsXG4gICAgU0xPVDogNixcbiAgICBUUEw6IDdcbn07XG5cbi8vIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IE5vZGVUeXBlO1xuXG5cbi8qKlxuICogQGZpbGUg6I635Y+WIEFOb2RlIHByb3BzIOaVsOe7hOS4reebuOW6lCBuYW1lIOeahOmhuVxuICogQGF1dGhvciBlcnJvcnJpayhlcnJvcnJpa0BnbWFpbC5jb20pXG4gKi9cblxuLyoqXG4gKiDojrflj5YgQU5vZGUgcHJvcHMg5pWw57uE5Lit55u45bqUIG5hbWUg55qE6aG5XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGFOb2RlIEFOb2Rl5a+56LGhXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBuYW1l5bGe5oCn5Yy56YWN5LiyXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cbmZ1bmN0aW9uIGdldEFOb2RlUHJvcChhTm9kZSwgbmFtZSkge1xuICAgIHZhciBpbmRleCA9IGFOb2RlLmhvdHNwb3QucHJvcHNbbmFtZV07XG4gICAgaWYgKGluZGV4ICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGFOb2RlLnByb3BzW2luZGV4XTtcbiAgICB9XG59XG5cbi8vIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGdldEFOb2RlUHJvcDtcblxuXG4vKipcbiAqIEBmaWxlIOiOt+WPluWxnuaAp+WkhOeQhuWvueixoVxuICogQGF1dGhvciBlcnJvcnJpayhlcnJvcnJpa0BnbWFpbC5jb20pXG4gKi9cblxuLy8gdmFyIGNvbnRhaW5zID0gcmVxdWlyZSgnLi4vdXRpbC9jb250YWlucycpO1xuLy8gdmFyIGVtcHR5ID0gcmVxdWlyZSgnLi4vdXRpbC9lbXB0eScpO1xuLy8gdmFyIHN2Z1RhZ3MgPSByZXF1aXJlKCcuLi9icm93c2VyL3N2Zy10YWdzJyk7XG4vLyB2YXIgZXZhbEV4cHIgPSByZXF1aXJlKCcuLi9ydW50aW1lL2V2YWwtZXhwcicpO1xuLy8gdmFyIGdldEFOb2RlUHJvcCA9IHJlcXVpcmUoJy4vZ2V0LWEtbm9kZS1wcm9wJyk7XG4vLyB2YXIgTm9kZVR5cGUgPSByZXF1aXJlKCcuL25vZGUtdHlwZScpO1xuXG5cbi8qKlxuICogSFRNTCDlsZ7mgKflkowgRE9NIOaTjeS9nOWxnuaAp+eahOWvueeFp+ihqFxuICpcbiAqIEBpbm5lclxuICogQGNvbnN0XG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG52YXIgSFRNTF9BVFRSX1BST1BfTUFQID0ge1xuICAgICdyZWFkb25seSc6ICdyZWFkT25seScsXG4gICAgJ2NlbGxwYWRkaW5nJzogJ2NlbGxQYWRkaW5nJyxcbiAgICAnY2VsbHNwYWNpbmcnOiAnY2VsbFNwYWNpbmcnLFxuICAgICdjb2xzcGFuJzogJ2NvbFNwYW4nLFxuICAgICdyb3dzcGFuJzogJ3Jvd1NwYW4nLFxuICAgICd2YWxpZ24nOiAndkFsaWduJyxcbiAgICAndXNlbWFwJzogJ3VzZU1hcCcsXG4gICAgJ2ZyYW1lYm9yZGVyJzogJ2ZyYW1lQm9yZGVyJyxcbiAgICAnZm9yJzogJ2h0bWxGb3InXG59O1xuXG4vKipcbiAqIOm7mOiupOeahOWFg+e0oOeahOWxnuaAp+iuvue9rueahOWPmOaNouaWueazlVxuICpcbiAqIEBpbm5lclxuICogQHR5cGUge09iamVjdH1cbiAqL1xudmFyIGRlZmF1bHRFbGVtZW50UHJvcEhhbmRsZXIgPSB7XG4gICAgcHJvcDogZnVuY3Rpb24gKGVsLCB2YWx1ZSwgbmFtZSwgZWxlbWVudCkge1xuICAgICAgICB2YXIgcHJvcE5hbWUgPSBIVE1MX0FUVFJfUFJPUF9NQVBbbmFtZV0gfHwgbmFtZTtcblxuICAgICAgICAvLyBpbnB1dCDnmoQgdHlwZSDmmK/kuKrnibnmrorlsZ7mgKfvvIzlhbblrp7kuZ/lupTor6XnlKggc2V0QXR0cmlidXRlXG4gICAgICAgIC8vIOS9huaYryB0eXBlIOS4jeW6lOivpei/kOihjOaXtuWKqOaAgeaUueWPmO+8jOWQpuWImeS8muacieWFvOWuueaAp+mXrumimFxuICAgICAgICAvLyDmiYDku6Xov5nph4znm7TmjqXlsLHkuI3nrqHkuoZcbiAgICAgICAgaWYgKHByb3BOYW1lIGluIGVsKSB7XG4gICAgICAgICAgICBlbFtwcm9wTmFtZV0gPSB2YWx1ZSA9PSBudWxsID8gJycgOiB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGVsLnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBhdHRyaWJ1dGUg57uR5a6a55qE5pivIHRleHTvvIzmiYDku6XkuI3kvJrlh7rnjrAgbnVsbCDnmoTmg4XlhrXvvIzov5nph4zml6DpnIDlpITnkIZcbiAgICAgICAgLy8g5o2i5Y+l6K+d5p2l6K+077yMc2FuIOaYr+WBmuS4jeWIsCBhdHRyaWJ1dGUg5pe25pyJ5pe25peg55qEXG4gICAgICAgIC8vIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIC8vICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgICAgIC8vIH1cbiAgICB9LFxuXG4gICAgb3V0cHV0OiBmdW5jdGlvbiAoZWxlbWVudCwgYmluZEluZm8sIGRhdGEpIHtcbiAgICAgICAgZGF0YS5zZXQoYmluZEluZm8uZXhwciwgZWxlbWVudC5lbFtiaW5kSW5mby5uYW1lXSwge1xuICAgICAgICAgICAgdGFyZ2V0OiB7XG4gICAgICAgICAgICAgICAgaWQ6IGVsZW1lbnQuaWQsXG4gICAgICAgICAgICAgICAgcHJvcDogYmluZEluZm8ubmFtZVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59O1xuXG52YXIgc3ZnUHJvcEhhbmRsZXIgPSB7XG4gICAgcHJvcDogZnVuY3Rpb24gKGVsLCB2YWx1ZSwgbmFtZSkge1xuICAgICAgICBlbC5zZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpO1xuICAgIH1cbn07XG5cbnZhciBib29sUHJvcEhhbmRsZXIgPSB7XG4gICAgcHJvcDogZnVuY3Rpb24gKGVsLCB2YWx1ZSwgbmFtZSwgZWxlbWVudCwgcHJvcCkge1xuICAgICAgICB2YXIgcHJvcE5hbWUgPSBIVE1MX0FUVFJfUFJPUF9NQVBbbmFtZV0gfHwgbmFtZTtcbiAgICAgICAgZWxbcHJvcE5hbWVdID0gISEocHJvcCAmJiBwcm9wLnJhdyA9PT0gJydcbiAgICAgICAgICAgIHx8IHZhbHVlICYmIHZhbHVlICE9PSAnZmFsc2UnICYmIHZhbHVlICE9PSAnMCcpO1xuICAgIH1cbn07XG5cbi8qIGVzbGludC1kaXNhYmxlIGZlY3MtcHJvcGVydGllcy1xdW90ZSAqL1xuLyoqXG4gKiDpu5jorqTnmoTlsZ7mgKforr7nva7lj5jmjaLmlrnms5VcbiAqXG4gKiBAaW5uZXJcbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cbnZhciBkZWZhdWx0RWxlbWVudFByb3BIYW5kbGVycyA9IHtcbiAgICBzdHlsZToge1xuICAgICAgICBwcm9wOiBmdW5jdGlvbiAoZWwsIHZhbHVlKSB7XG4gICAgICAgICAgICBlbC5zdHlsZS5jc3NUZXh0ID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgJ2NsYXNzJzogeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgICAgIHByb3A6IGZ1bmN0aW9uIChlbCwgdmFsdWUpIHtcbiAgICAgICAgICAgIGVsLmNsYXNzTmFtZSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIHNsb3Q6IHtcbiAgICAgICAgcHJvcDogZW1wdHlcbiAgICB9LFxuXG4gICAgcmVhZG9ubHk6IGJvb2xQcm9wSGFuZGxlcixcbiAgICBkaXNhYmxlZDogYm9vbFByb3BIYW5kbGVyLFxuICAgIGF1dG9mb2N1czogYm9vbFByb3BIYW5kbGVyLFxuICAgIHJlcXVpcmVkOiBib29sUHJvcEhhbmRsZXIsXG4gICAgZHJhZ2dhYmxlOiBib29sUHJvcEhhbmRsZXJcbn07XG4vKiBlc2xpbnQtZW5hYmxlIGZlY3MtcHJvcGVydGllcy1xdW90ZSAqL1xuXG52YXIgYW5hbElucHV0Q2hlY2tlciA9IHtcbiAgICBjaGVja2JveDogY29udGFpbnMsXG4gICAgcmFkaW86IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgIHJldHVybiBhID09PSBiO1xuICAgIH1cbn07XG5cbmZ1bmN0aW9uIGFuYWxJbnB1dENoZWNrZWRTdGF0ZShlbGVtZW50LCB2YWx1ZSwgb3Blcikge1xuICAgIHZhciBiaW5kVmFsdWUgPSBnZXRBTm9kZVByb3AoZWxlbWVudC5hTm9kZSwgJ3ZhbHVlJyk7XG4gICAgdmFyIGJpbmRUeXBlID0gZ2V0QU5vZGVQcm9wKGVsZW1lbnQuYU5vZGUsICd0eXBlJyk7XG5cbiAgICBpZiAoYmluZFZhbHVlICYmIGJpbmRUeXBlKSB7XG4gICAgICAgIHZhciB0eXBlID0gZXZhbEV4cHIoYmluZFR5cGUuZXhwciwgZWxlbWVudC5zY29wZSwgZWxlbWVudC5vd25lcik7XG5cbiAgICAgICAgaWYgKGFuYWxJbnB1dENoZWNrZXJbdHlwZV0pIHtcbiAgICAgICAgICAgIHZhciBiaW5kQ2hlY2tlZCA9IGdldEFOb2RlUHJvcChlbGVtZW50LmFOb2RlLCAnY2hlY2tlZCcpO1xuICAgICAgICAgICAgaWYgKCFiaW5kQ2hlY2tlZC5oaW50RXhwcikge1xuICAgICAgICAgICAgICAgIGJpbmRDaGVja2VkLmhpbnRFeHByID0gYmluZFZhbHVlLmV4cHI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiAhIWFuYWxJbnB1dENoZWNrZXJbdHlwZV0oXG4gICAgICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICAgICAgZXZhbEV4cHIoYmluZFZhbHVlLmV4cHIsIGVsZW1lbnQuc2NvcGUsIGVsZW1lbnQub3duZXIpXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxufVxuXG52YXIgZWxlbWVudFByb3BIYW5kbGVycyA9IHtcbiAgICBpbnB1dDoge1xuICAgICAgICBtdWx0aXBsZTogYm9vbFByb3BIYW5kbGVyLFxuICAgICAgICBjaGVja2VkOiB7XG4gICAgICAgICAgICBwcm9wOiBmdW5jdGlvbiAoZWwsIHZhbHVlLCBuYW1lLCBlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgdmFyIHN0YXRlID0gYW5hbElucHV0Q2hlY2tlZFN0YXRlKGVsZW1lbnQsIHZhbHVlKTtcblxuICAgICAgICAgICAgICAgIGJvb2xQcm9wSGFuZGxlci5wcm9wKFxuICAgICAgICAgICAgICAgICAgICBlbCxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUgIT0gbnVsbCA/IHN0YXRlIDogdmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICdjaGVja2VkJyxcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBvdXRwdXQ6IGZ1bmN0aW9uIChlbGVtZW50LCBiaW5kSW5mbywgZGF0YSkge1xuICAgICAgICAgICAgICAgIHZhciBlbCA9IGVsZW1lbnQuZWw7XG4gICAgICAgICAgICAgICAgdmFyIGJpbmRWYWx1ZSA9IGdldEFOb2RlUHJvcChlbGVtZW50LmFOb2RlLCAndmFsdWUnKTtcbiAgICAgICAgICAgICAgICB2YXIgYmluZFR5cGUgPSBnZXRBTm9kZVByb3AoZWxlbWVudC5hTm9kZSwgJ3R5cGUnKSB8fCB7fTtcblxuICAgICAgICAgICAgICAgIGlmIChiaW5kVmFsdWUgJiYgYmluZFR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChiaW5kVHlwZS5yYXcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2NoZWNrYm94JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhW2VsLmNoZWNrZWQgPyAncHVzaCcgOiAncmVtb3ZlJ10oYmluZEluZm8uZXhwciwgZWwudmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAncmFkaW8nOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsLmNoZWNrZWQgJiYgZGF0YS5zZXQoYmluZEluZm8uZXhwciwgZWwudmFsdWUsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogZWxlbWVudC5pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3A6IGJpbmRJbmZvLm5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGRlZmF1bHRFbGVtZW50UHJvcEhhbmRsZXIub3V0cHV0KGVsZW1lbnQsIGJpbmRJbmZvLCBkYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBvcHRpb246IHtcbiAgICAgICAgdmFsdWU6IHtcbiAgICAgICAgICAgIHByb3A6IGZ1bmN0aW9uIChlbCwgdmFsdWUsIG5hbWUsIGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBkZWZhdWx0RWxlbWVudFByb3BIYW5kbGVyLnByb3AoZWwsIHZhbHVlLCBuYW1lLCBlbGVtZW50KTtcblxuICAgICAgICAgICAgICAgIGlmIChpc09wdGlvblNlbGVjdGVkKGVsZW1lbnQsIHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICBlbC5zZWxlY3RlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIHNlbGVjdDoge1xuICAgICAgICB2YWx1ZToge1xuICAgICAgICAgICAgcHJvcDogZnVuY3Rpb24gKGVsLCB2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGVsLnZhbHVlID0gdmFsdWUgfHwgJyc7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBvdXRwdXQ6IGRlZmF1bHRFbGVtZW50UHJvcEhhbmRsZXIub3V0cHV0XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5mdW5jdGlvbiBpc09wdGlvblNlbGVjdGVkKGVsZW1lbnQsIHZhbHVlKSB7XG4gICAgdmFyIHBhcmVudFNlbGVjdCA9IGVsZW1lbnQucGFyZW50O1xuICAgIHdoaWxlIChwYXJlbnRTZWxlY3QpIHtcbiAgICAgICAgaWYgKHBhcmVudFNlbGVjdC50YWdOYW1lID09PSAnc2VsZWN0Jykge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBwYXJlbnRTZWxlY3QgPSBwYXJlbnRTZWxlY3QucGFyZW50O1xuICAgIH1cblxuXG4gICAgaWYgKHBhcmVudFNlbGVjdCkge1xuICAgICAgICB2YXIgc2VsZWN0VmFsdWUgPSBudWxsO1xuICAgICAgICB2YXIgcHJvcDtcbiAgICAgICAgdmFyIGV4cHI7XG5cbiAgICAgICAgaWYgKChwcm9wID0gZ2V0QU5vZGVQcm9wKHBhcmVudFNlbGVjdC5hTm9kZSwgJ3ZhbHVlJykpXG4gICAgICAgICAgICAmJiAoZXhwciA9IHByb3AuZXhwcilcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBzZWxlY3RWYWx1ZSA9IHBhcmVudFNlbGVjdC5ub2RlVHlwZSA9PT0gTm9kZVR5cGUuQ01QVFxuICAgICAgICAgICAgICAgID8gZXZhbEV4cHIoZXhwciwgcGFyZW50U2VsZWN0LmRhdGEsIHBhcmVudFNlbGVjdClcbiAgICAgICAgICAgICAgICA6IGV2YWxFeHByKGV4cHIsIHBhcmVudFNlbGVjdC5zY29wZSwgcGFyZW50U2VsZWN0Lm93bmVyKVxuICAgICAgICAgICAgICAgIHx8ICcnO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNlbGVjdFZhbHVlID09PSB2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICB9XG59XG5cblxuLyoqXG4gKiDojrflj5blsZ7mgKflpITnkIblr7nosaFcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdGFnTmFtZSDlhYPntKB0YWdcbiAqIEBwYXJhbSB7c3RyaW5nfSBhdHRyTmFtZSDlsZ7mgKflkI1cbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuZnVuY3Rpb24gZ2V0UHJvcEhhbmRsZXIodGFnTmFtZSwgYXR0ck5hbWUpIHtcbiAgICBpZiAoc3ZnVGFnc1t0YWdOYW1lXSkge1xuICAgICAgICByZXR1cm4gc3ZnUHJvcEhhbmRsZXI7XG4gICAgfVxuXG4gICAgdmFyIHRhZ1Byb3BIYW5kbGVycyA9IGVsZW1lbnRQcm9wSGFuZGxlcnNbdGFnTmFtZV07XG4gICAgaWYgKCF0YWdQcm9wSGFuZGxlcnMpIHtcbiAgICAgICAgdGFnUHJvcEhhbmRsZXJzID0gZWxlbWVudFByb3BIYW5kbGVyc1t0YWdOYW1lXSA9IHt9O1xuICAgIH1cblxuICAgIHZhciBwcm9wSGFuZGxlciA9IHRhZ1Byb3BIYW5kbGVyc1thdHRyTmFtZV07XG4gICAgaWYgKCFwcm9wSGFuZGxlcikge1xuICAgICAgICBwcm9wSGFuZGxlciA9IGRlZmF1bHRFbGVtZW50UHJvcEhhbmRsZXJzW2F0dHJOYW1lXSB8fCBkZWZhdWx0RWxlbWVudFByb3BIYW5kbGVyO1xuICAgICAgICB0YWdQcm9wSGFuZGxlcnNbYXR0ck5hbWVdID0gcHJvcEhhbmRsZXI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb3BIYW5kbGVyO1xufVxuXG4vLyBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBnZXRQcm9wSGFuZGxlcjtcblxuXG4vKipcbiAqIEBmaWxlIOWIpOaWreWPmOabtOaYr+WQpuadpea6kOS6juWFg+e0oFxuICogQGF1dGhvciBlcnJvcnJpayhlcnJvcnJpa0BnbWFpbC5jb20pXG4gKi9cblxuLyoqXG4gKiDliKTmlq3lj5jmm7TmmK/lkKbmnaXmupDkuo7lhYPntKDvvIzmnaXmupDkuo7lhYPntKDml7bvvIzop4blm77mm7TmlrDpnIDopoHpmLvmlq1cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY2hhbmdlIOWPmOabtOWvueixoVxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IOWFg+e0oFxuICogQHBhcmFtIHtzdHJpbmc/fSBwcm9wTmFtZSDlsZ7mgKflkI3vvIzlj6/pgInjgILpnIDopoHnsr7noa7liKTmlq3mmK/lkKbmnaXmupDkuo7mraTlsZ7mgKfml7bkvKDlhaVcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzRGF0YUNoYW5nZUJ5RWxlbWVudChjaGFuZ2UsIGVsZW1lbnQsIHByb3BOYW1lKSB7XG4gICAgdmFyIGNoYW5nZVRhcmdldCA9IGNoYW5nZS5vcHRpb24udGFyZ2V0O1xuICAgIHJldHVybiBjaGFuZ2VUYXJnZXQgJiYgY2hhbmdlVGFyZ2V0LmlkID09PSBlbGVtZW50LmlkXG4gICAgICAgICYmICghcHJvcE5hbWUgfHwgY2hhbmdlVGFyZ2V0LnByb3AgPT09IHByb3BOYW1lKTtcbn1cblxuLy8gZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gaXNEYXRhQ2hhbmdlQnlFbGVtZW50O1xuXG5cbi8qKlxuICogQGZpbGUg5Zyo5a+56LGh5LiK5L2/55SoYWNjZXNzb3Looajovr7lvI/mn6Xmib7mlrnms5VcbiAqIEBhdXRob3IgZXJyb3JyaWsoZXJyb3JyaWtAZ21haWwuY29tKVxuICovXG5cbi8vIHZhciBldmFsRXhwciA9IHJlcXVpcmUoJy4uL3J1bnRpbWUvZXZhbC1leHByJyk7XG5cbi8qKlxuICog5Zyo5a+56LGh5LiK5L2/55SoYWNjZXNzb3Looajovr7lvI/mn6Xmib7mlrnms5VcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIOa6kOWvueixoVxuICogQHBhcmFtIHtPYmplY3R9IG5hbWVFeHByIOihqOi+vuW8j1xuICogQHBhcmFtIHtEYXRhfSBkYXRhIOaJgOWxnuaVsOaNrueOr+Wig1xuICogQHJldHVybiB7RnVuY3Rpb259XG4gKi9cbmZ1bmN0aW9uIGZpbmRNZXRob2Qoc291cmNlLCBuYW1lRXhwciwgZGF0YSkge1xuICAgIHZhciBtZXRob2QgPSBzb3VyY2U7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgbWV0aG9kICE9IG51bGwgJiYgaSA8IG5hbWVFeHByLnBhdGhzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIG1ldGhvZCA9IG1ldGhvZFtldmFsRXhwcihuYW1lRXhwci5wYXRoc1tpXSwgZGF0YSldO1xuICAgIH1cblxuICAgIHJldHVybiBtZXRob2Q7XG59XG5cbi8vIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZpbmRNZXRob2Q7XG5cblxuLyoqXG4gKiBAZmlsZSDmlbDmja7nsbtcbiAqIEBhdXRob3IgZXJyb3JyaWsoZXJyb3JyaWtAZ21haWwuY29tKVxuICovXG5cbi8vIHZhciBFeHByVHlwZSA9IHJlcXVpcmUoJy4uL3BhcnNlci9leHByLXR5cGUnKTtcbi8vIHZhciBldmFsRXhwciA9IHJlcXVpcmUoJy4vZXZhbC1leHByJyk7XG4vLyB2YXIgRGF0YUNoYW5nZVR5cGUgPSByZXF1aXJlKCcuL2RhdGEtY2hhbmdlLXR5cGUnKTtcbi8vIHZhciBjcmVhdGVBY2Nlc3NvciA9IHJlcXVpcmUoJy4uL3BhcnNlci9jcmVhdGUtYWNjZXNzb3InKTtcbi8vIHZhciBwYXJzZUV4cHIgPSByZXF1aXJlKCcuLi9wYXJzZXIvcGFyc2UtZXhwcicpO1xuLy8gdmFyIGd1aWQgPSByZXF1aXJlKCcuLi91dGlsL2d1aWQnKTtcbi8vIHZhciBkYXRhQ2FjaGUgPSByZXF1aXJlKCcuL2RhdGEtY2FjaGUnKTtcblxuLyoqXG4gKiDmlbDmja7nsbtcbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7T2JqZWN0P30gZGF0YSDliJ3lp4vmlbDmja5cbiAqIEBwYXJhbSB7TW9kZWw/fSBwYXJlbnQg54i257qn5pWw5o2u5a655ZmoXG4gKi9cbmZ1bmN0aW9uIERhdGEoZGF0YSwgcGFyZW50KSB7XG4gICAgdGhpcy5pZCA9IGd1aWQoKTtcbiAgICB0aGlzLnBhcmVudCA9IHBhcmVudDtcbiAgICB0aGlzLnJhdyA9IGRhdGEgfHwge307XG4gICAgdGhpcy5saXN0ZW5lcnMgPSBbXTtcbn1cblxuLy8gI1tiZWdpbl0gZXJyb3Jcbi8vIOS7peS4i+S4pOS4quWHveaVsOWPquWcqOW8gOWPkeaooeW8j+S4i+WPr+eUqO+8jOWcqOeUn+S6p+aooeW8j+S4i+S4jeWtmOWcqFxuLyoqXG4gKiBEYXRhVHlwZXMg5qOA5rWLXG4gKi9cbkRhdGEucHJvdG90eXBlLmNoZWNrRGF0YVR5cGVzID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLnR5cGVDaGVja2VyKSB7XG4gICAgICAgIHRoaXMudHlwZUNoZWNrZXIodGhpcy5yYXcpO1xuICAgIH1cbn07XG5cbi8qKlxuICog6K6+572uIHR5cGUgY2hlY2tlclxuICpcbiAqIEBwYXJhbSAge0Z1bmN0aW9ufSB0eXBlQ2hlY2tlciDnsbvlnovmoKHpqozlmahcbiAqL1xuRGF0YS5wcm90b3R5cGUuc2V0VHlwZUNoZWNrZXIgPSBmdW5jdGlvbiAodHlwZUNoZWNrZXIpIHtcbiAgICB0aGlzLnR5cGVDaGVja2VyID0gdHlwZUNoZWNrZXI7XG59O1xuXG4vLyAjW2VuZF1cblxuLyoqXG4gKiDmt7vliqDmlbDmja7lj5jmm7TnmoTkuovku7bnm5HlkKzlmahcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciDnm5HlkKzlh73mlbBcbiAqL1xuRGF0YS5wcm90b3R5cGUubGlzdGVuID0gZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgaWYgKHR5cGVvZiBsaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aGlzLmxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICB9XG59O1xuXG4vKipcbiAqIOenu+mZpOaVsOaNruWPmOabtOeahOS6i+S7tuebkeWQrOWZqFxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGxpc3RlbmVyIOebkeWQrOWHveaVsFxuICovXG5EYXRhLnByb3RvdHlwZS51bmxpc3RlbiA9IGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgIHZhciBsZW4gPSB0aGlzLmxpc3RlbmVycy5sZW5ndGg7XG4gICAgd2hpbGUgKGxlbi0tKSB7XG4gICAgICAgIGlmICghbGlzdGVuZXIgfHwgdGhpcy5saXN0ZW5lcnNbbGVuXSA9PT0gbGlzdGVuZXIpIHtcbiAgICAgICAgICAgIHRoaXMubGlzdGVuZXJzLnNwbGljZShsZW4sIDEpO1xuICAgICAgICB9XG4gICAgfVxufTtcblxuLyoqXG4gKiDop6blj5HmlbDmja7lj5jmm7RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY2hhbmdlIOWPmOabtOS/oeaBr+WvueixoVxuICovXG5EYXRhLnByb3RvdHlwZS5maXJlID0gZnVuY3Rpb24gKGNoYW5nZSkge1xuICAgIGlmIChjaGFuZ2Uub3B0aW9uLnNpbGVudCB8fCBjaGFuZ2Uub3B0aW9uLnNpbGVuY2UgfHwgY2hhbmdlLm9wdGlvbi5xdWlldCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLmxpc3RlbmVyc1tpXS5jYWxsKHRoaXMsIGNoYW5nZSk7XG4gICAgfVxufTtcblxuLyoqXG4gKiDojrflj5bmlbDmja7poblcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ3xPYmplY3Q/fSBleHByIOaVsOaNrumhuei3r+W+hFxuICogQHBhcmFtIHtEYXRhP30gY2FsbGVlIOW9k+WJjeaVsOaNruiOt+WPlueahOiwg+eUqOeOr+Wig1xuICogQHJldHVybiB7Kn1cbiAqL1xuRGF0YS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKGV4cHIsIGNhbGxlZSkge1xuICAgIHZhciB2YWx1ZSA9IHRoaXMucmF3O1xuICAgIGlmICghZXhwcikge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgZXhwciA9IHBhcnNlRXhwcihleHByKTtcblxuICAgIHZhciBwYXRocyA9IGV4cHIucGF0aHM7XG4gICAgY2FsbGVlID0gY2FsbGVlIHx8IHRoaXM7XG5cbiAgICB2YWx1ZSA9IHZhbHVlW3BhdGhzWzBdLnZhbHVlXTtcblxuICAgIGlmICh2YWx1ZSA9PSBudWxsICYmIHRoaXMucGFyZW50KSB7XG4gICAgICAgIHZhbHVlID0gdGhpcy5wYXJlbnQuZ2V0KGV4cHIsIGNhbGxlZSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBmb3IgKHZhciBpID0gMSwgbCA9IHBhdGhzLmxlbmd0aDsgdmFsdWUgIT0gbnVsbCAmJiBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlW3BhdGhzW2ldLnZhbHVlIHx8IGV2YWxFeHByKHBhdGhzW2ldLCBjYWxsZWUpXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZTtcbn07XG5cblxuLyoqXG4gKiDmlbDmja7lr7nosaHlj5jmm7Tmk43kvZxcbiAqXG4gKiBAaW5uZXJcbiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBzb3VyY2Ug6KaB5Y+Y5pu055qE5rqQ5pWw5o2uXG4gKiBAcGFyYW0ge0FycmF5fSBleHByUGF0aHMg5bGe5oCn6Lev5b6EXG4gKiBAcGFyYW0geyp9IHZhbHVlIOWPmOabtOWxnuaAp+WAvFxuICogQHBhcmFtIHtEYXRhfSBkYXRhIOWvueW6lOeahERhdGHlr7nosaFcbiAqIEByZXR1cm4geyp9IOWPmOabtOWQjueahOaWsOaVsOaNrlxuICovXG5mdW5jdGlvbiBpbW11dGFibGVTZXQoc291cmNlLCBleHByUGF0aHMsIHZhbHVlLCBkYXRhKSB7XG4gICAgaWYgKGV4cHJQYXRocy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIHZhciBwcm9wID0gZXZhbEV4cHIoZXhwclBhdGhzWzBdLCBkYXRhKTtcbiAgICB2YXIgcmVzdWx0O1xuXG4gICAgaWYgKHNvdXJjZSBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgIHZhciBpbmRleCA9ICtwcm9wO1xuXG4gICAgICAgIHJlc3VsdCA9IHNvdXJjZS5zbGljZSgwKTtcbiAgICAgICAgcmVzdWx0W2lzTmFOKGluZGV4KSA/IHByb3AgOiBpbmRleF0gPSBpbW11dGFibGVTZXQoc291cmNlW2luZGV4XSwgZXhwclBhdGhzLnNsaWNlKDEpLCB2YWx1ZSwgZGF0YSk7XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIHNvdXJjZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmVzdWx0ID0ge307XG5cbiAgICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICAgICAgaWYgKGtleSAhPT0gcHJvcCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXN1bHRbcHJvcF0gPSBpbW11dGFibGVTZXQoc291cmNlW3Byb3BdIHx8IHt9LCBleHByUGF0aHMuc2xpY2UoMSksIHZhbHVlLCBkYXRhKTtcblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIHJldHVybiBzb3VyY2U7XG59XG5cbi8qKlxuICog6K6+572u5pWw5o2u6aG5XG4gKlxuICogQHBhcmFtIHtzdHJpbmd8T2JqZWN0fSBleHByIOaVsOaNrumhuei3r+W+hFxuICogQHBhcmFtIHsqfSB2YWx1ZSDmlbDmja7lgLxcbiAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0aW9uIOiuvue9ruWPguaVsFxuICogQHBhcmFtIHtib29sZWFufSBvcHRpb24uc2lsZW50IOmdmem7mOiuvue9ru+8jOS4jeinpuWPkeWPmOabtOS6i+S7tlxuICovXG5EYXRhLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAoZXhwciwgdmFsdWUsIG9wdGlvbikge1xuICAgIG9wdGlvbiA9IG9wdGlvbiB8fCB7fTtcblxuICAgIC8vICNbYmVnaW5dIGVycm9yXG4gICAgdmFyIGV4cHJSYXcgPSBleHByO1xuICAgIC8vICNbZW5kXVxuXG4gICAgZXhwciA9IHBhcnNlRXhwcihleHByKTtcblxuICAgIC8vICNbYmVnaW5dIGVycm9yXG4gICAgaWYgKGV4cHIudHlwZSAhPT0gRXhwclR5cGUuQUNDRVNTT1IpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdbU0FOIEVSUk9SXSBJbnZhbGlkIEV4cHJlc3Npb24gaW4gRGF0YSBzZXQ6ICcgKyBleHByUmF3KTtcbiAgICB9XG4gICAgLy8gI1tlbmRdXG5cbiAgICBpZiAodGhpcy5nZXQoZXhwcikgPT09IHZhbHVlICYmICFvcHRpb24uZm9yY2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGRhdGFDYWNoZS5jbGVhcigpO1xuICAgIHRoaXMucmF3ID0gaW1tdXRhYmxlU2V0KHRoaXMucmF3LCBleHByLnBhdGhzLCB2YWx1ZSwgdGhpcyk7XG4gICAgdGhpcy5maXJlKHtcbiAgICAgICAgdHlwZTogRGF0YUNoYW5nZVR5cGUuU0VULFxuICAgICAgICBleHByOiBleHByLFxuICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgIG9wdGlvbjogb3B0aW9uXG4gICAgfSk7XG5cbiAgICAvLyAjW2JlZ2luXSBlcnJvclxuICAgIHRoaXMuY2hlY2tEYXRhVHlwZXMoKTtcbiAgICAvLyAjW2VuZF1cblxufTtcblxuLyoqXG4gKiDlkIjlubbmm7TmlrDmlbDmja7poblcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ3xPYmplY3R9IGV4cHIg5pWw5o2u6aG56Lev5b6EXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIOW+heWQiOW5tueahOaVsOaNruWAvFxuICogQHBhcmFtIHtPYmplY3Q9fSBvcHRpb24g6K6+572u5Y+C5pWwXG4gKiBAcGFyYW0ge2Jvb2xlYW59IG9wdGlvbi5zaWxlbnQg6Z2Z6buY6K6+572u77yM5LiN6Kem5Y+R5Y+Y5pu05LqL5Lu2XG4gKi9cbkRhdGEucHJvdG90eXBlLm1lcmdlID0gZnVuY3Rpb24gKGV4cHIsIHNvdXJjZSwgb3B0aW9uKSB7XG4gICAgb3B0aW9uID0gb3B0aW9uIHx8IHt9O1xuXG4gICAgLy8gI1tiZWdpbl0gZXJyb3JcbiAgICB2YXIgZXhwclJhdyA9IGV4cHI7XG4gICAgLy8gI1tlbmRdXG5cbiAgICBleHByID0gcGFyc2VFeHByKGV4cHIpO1xuXG4gICAgLy8gI1tiZWdpbl0gZXJyb3JcbiAgICBpZiAoZXhwci50eXBlICE9PSBFeHByVHlwZS5BQ0NFU1NPUikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1tTQU4gRVJST1JdIEludmFsaWQgRXhwcmVzc2lvbiBpbiBEYXRhIG1lcmdlOiAnICsgZXhwclJhdyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiB0aGlzLmdldChleHByKSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdbU0FOIEVSUk9SXSBNZXJnZSBFeHBlY3RzIGEgVGFyZ2V0IG9mIFR5cGUgXFwnb2JqZWN0XFwnOyBnb3QgJyArIHR5cGVvZiBvbGRWYWx1ZSk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBzb3VyY2UgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignW1NBTiBFUlJPUl0gTWVyZ2UgRXhwZWN0cyBhIFNvdXJjZSBvZiBUeXBlIFxcJ29iamVjdFxcJzsgZ290ICcgKyB0eXBlb2Ygc291cmNlKTtcbiAgICB9XG4gICAgLy8gI1tlbmRdXG5cbiAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICAgICAgdGhpcy5zZXQoXG4gICAgICAgICAgICBjcmVhdGVBY2Nlc3NvcihcbiAgICAgICAgICAgICAgICBleHByLnBhdGhzLmNvbmNhdChcbiAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IEV4cHJUeXBlLlNUUklORyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZToga2V5XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgc291cmNlW2tleV0sXG4gICAgICAgICAgICBvcHRpb25cbiAgICAgICAgKTtcbiAgICB9XG59O1xuXG4vKipcbiAqIOWfuuS6juabtOaWsOWHveaVsOabtOaWsOaVsOaNrumhuVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfE9iamVjdH0gZXhwciDmlbDmja7pobnot6/lvoRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIOaVsOaNruWkhOeQhuWHveaVsFxuICogQHBhcmFtIHtPYmplY3Q9fSBvcHRpb24g6K6+572u5Y+C5pWwXG4gKiBAcGFyYW0ge2Jvb2xlYW59IG9wdGlvbi5zaWxlbnQg6Z2Z6buY6K6+572u77yM5LiN6Kem5Y+R5Y+Y5pu05LqL5Lu2XG4gKi9cbkRhdGEucHJvdG90eXBlLmFwcGx5ID0gZnVuY3Rpb24gKGV4cHIsIGZuLCBvcHRpb24pIHtcbiAgICAvLyAjW2JlZ2luXSBlcnJvclxuICAgIHZhciBleHByUmF3ID0gZXhwcjtcbiAgICAvLyAjW2VuZF1cblxuICAgIGV4cHIgPSBwYXJzZUV4cHIoZXhwcik7XG5cbiAgICAvLyAjW2JlZ2luXSBlcnJvclxuICAgIGlmIChleHByLnR5cGUgIT09IEV4cHJUeXBlLkFDQ0VTU09SKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignW1NBTiBFUlJPUl0gSW52YWxpZCBFeHByZXNzaW9uIGluIERhdGEgYXBwbHk6ICcgKyBleHByUmF3KTtcbiAgICB9XG4gICAgLy8gI1tlbmRdXG5cbiAgICB2YXIgb2xkVmFsdWUgPSB0aGlzLmdldChleHByKTtcblxuICAgIC8vICNbYmVnaW5dIGVycm9yXG4gICAgaWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAnW1NBTiBFUlJPUl0gSW52YWxpZCBBcmd1bWVudFxcJ3MgVHlwZSBpbiBEYXRhIGFwcGx5OiAnXG4gICAgICAgICAgICArICdFeHBlY3RlZCBGdW5jdGlvbiBidXQgZ290ICcgKyB0eXBlb2YgZm5cbiAgICAgICAgKTtcbiAgICB9XG4gICAgLy8gI1tlbmRdXG5cbiAgICB0aGlzLnNldChleHByLCBmbihvbGRWYWx1ZSksIG9wdGlvbik7XG59O1xuXG4vKipcbiAqIOaVsOe7hOaVsOaNrumhuXNwbGljZeaTjeS9nFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfE9iamVjdH0gZXhwciDmlbDmja7pobnot6/lvoRcbiAqIEBwYXJhbSB7QXJyYXl9IGFyZ3Mgc3BsaWNlIOaOpeWPl+eahOWPguaVsOWIl+ihqO+8jOaVsOe7hOmhueS4jkFycmF5LnByb3RvdHlwZS5zcGxpY2XnmoTlj4LmlbDkuIDoh7RcbiAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0aW9uIOiuvue9ruWPguaVsFxuICogQHBhcmFtIHtib29sZWFufSBvcHRpb24uc2lsZW50IOmdmem7mOiuvue9ru+8jOS4jeinpuWPkeWPmOabtOS6i+S7tlxuICogQHJldHVybiB7QXJyYXl9IOaWsOaVsOe7hFxuICovXG5EYXRhLnByb3RvdHlwZS5zcGxpY2UgPSBmdW5jdGlvbiAoZXhwciwgYXJncywgb3B0aW9uKSB7XG4gICAgb3B0aW9uID0gb3B0aW9uIHx8IHt9O1xuICAgIC8vICNbYmVnaW5dIGVycm9yXG4gICAgdmFyIGV4cHJSYXcgPSBleHByO1xuICAgIC8vICNbZW5kXVxuXG4gICAgZXhwciA9IHBhcnNlRXhwcihleHByKTtcblxuICAgIC8vICNbYmVnaW5dIGVycm9yXG4gICAgaWYgKGV4cHIudHlwZSAhPT0gRXhwclR5cGUuQUNDRVNTT1IpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdbU0FOIEVSUk9SXSBJbnZhbGlkIEV4cHJlc3Npb24gaW4gRGF0YSBzcGxpY2U6ICcgKyBleHByUmF3KTtcbiAgICB9XG4gICAgLy8gI1tlbmRdXG5cbiAgICB2YXIgdGFyZ2V0ID0gdGhpcy5nZXQoZXhwcik7XG4gICAgdmFyIHJldHVyblZhbHVlID0gW107XG5cbiAgICBpZiAodGFyZ2V0IGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gYXJnc1swXTtcbiAgICAgICAgaWYgKGluZGV4IDwgMCB8fCBpbmRleCA+IHRhcmdldC5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBuZXdBcnJheSA9IHRhcmdldC5zbGljZSgwKTtcbiAgICAgICAgcmV0dXJuVmFsdWUgPSBuZXdBcnJheS5zcGxpY2UuYXBwbHkobmV3QXJyYXksIGFyZ3MpO1xuICAgICAgICBkYXRhQ2FjaGUuY2xlYXIoKTtcbiAgICAgICAgdGhpcy5yYXcgPSBpbW11dGFibGVTZXQodGhpcy5yYXcsIGV4cHIucGF0aHMsIG5ld0FycmF5LCB0aGlzKTtcblxuICAgICAgICB0aGlzLmZpcmUoe1xuICAgICAgICAgICAgZXhwcjogZXhwcixcbiAgICAgICAgICAgIHR5cGU6IERhdGFDaGFuZ2VUeXBlLlNQTElDRSxcbiAgICAgICAgICAgIGluZGV4OiBpbmRleCxcbiAgICAgICAgICAgIGRlbGV0ZUNvdW50OiByZXR1cm5WYWx1ZS5sZW5ndGgsXG4gICAgICAgICAgICB2YWx1ZTogcmV0dXJuVmFsdWUsXG4gICAgICAgICAgICBpbnNlcnRpb25zOiBhcmdzLnNsaWNlKDIpLFxuICAgICAgICAgICAgb3B0aW9uOiBvcHRpb25cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gI1tiZWdpbl0gZXJyb3JcbiAgICB0aGlzLmNoZWNrRGF0YVR5cGVzKCk7XG4gICAgLy8gI1tlbmRdXG5cbiAgICByZXR1cm4gcmV0dXJuVmFsdWU7XG59O1xuXG4vKipcbiAqIOaVsOe7hOaVsOaNrumhuXB1c2jmk43kvZxcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ3xPYmplY3R9IGV4cHIg5pWw5o2u6aG56Lev5b6EXG4gKiBAcGFyYW0geyp9IGl0ZW0g6KaBcHVzaOeahOWAvFxuICogQHBhcmFtIHtPYmplY3Q9fSBvcHRpb24g6K6+572u5Y+C5pWwXG4gKiBAcGFyYW0ge2Jvb2xlYW59IG9wdGlvbi5zaWxlbnQg6Z2Z6buY6K6+572u77yM5LiN6Kem5Y+R5Y+Y5pu05LqL5Lu2XG4gKiBAcmV0dXJuIHtudW1iZXJ9IOaWsOaVsOe7hOeahGxlbmd0aOWxnuaAp1xuICovXG5EYXRhLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gKGV4cHIsIGl0ZW0sIG9wdGlvbikge1xuICAgIHZhciB0YXJnZXQgPSB0aGlzLmdldChleHByKTtcblxuICAgIGlmICh0YXJnZXQgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICB0aGlzLnNwbGljZShleHByLCBbdGFyZ2V0Lmxlbmd0aCwgMCwgaXRlbV0sIG9wdGlvbik7XG4gICAgICAgIHJldHVybiB0YXJnZXQubGVuZ3RoICsgMTtcbiAgICB9XG59O1xuXG4vKipcbiAqIOaVsOe7hOaVsOaNrumhuXBvcOaTjeS9nFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfE9iamVjdH0gZXhwciDmlbDmja7pobnot6/lvoRcbiAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0aW9uIOiuvue9ruWPguaVsFxuICogQHBhcmFtIHtib29sZWFufSBvcHRpb24uc2lsZW50IOmdmem7mOiuvue9ru+8jOS4jeinpuWPkeWPmOabtOS6i+S7tlxuICogQHJldHVybiB7Kn1cbiAqL1xuRGF0YS5wcm90b3R5cGUucG9wID0gZnVuY3Rpb24gKGV4cHIsIG9wdGlvbikge1xuICAgIHZhciB0YXJnZXQgPSB0aGlzLmdldChleHByKTtcblxuICAgIGlmICh0YXJnZXQgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICB2YXIgbGVuID0gdGFyZ2V0Lmxlbmd0aDtcbiAgICAgICAgaWYgKGxlbikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3BsaWNlKGV4cHIsIFtsZW4gLSAxLCAxXSwgb3B0aW9uKVswXTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbi8qKlxuICog5pWw57uE5pWw5o2u6aG5c2hpZnTmk43kvZxcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ3xPYmplY3R9IGV4cHIg5pWw5o2u6aG56Lev5b6EXG4gKiBAcGFyYW0ge09iamVjdD19IG9wdGlvbiDorr7nva7lj4LmlbBcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gb3B0aW9uLnNpbGVudCDpnZnpu5jorr7nva7vvIzkuI3op6blj5Hlj5jmm7Tkuovku7ZcbiAqIEByZXR1cm4geyp9XG4gKi9cbkRhdGEucHJvdG90eXBlLnNoaWZ0ID0gZnVuY3Rpb24gKGV4cHIsIG9wdGlvbikge1xuICAgIHJldHVybiB0aGlzLnNwbGljZShleHByLCBbMCwgMV0sIG9wdGlvbilbMF07XG59O1xuXG4vKipcbiAqIOaVsOe7hOaVsOaNrumhuXVuc2hpZnTmk43kvZxcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ3xPYmplY3R9IGV4cHIg5pWw5o2u6aG56Lev5b6EXG4gKiBAcGFyYW0geyp9IGl0ZW0g6KaBdW5zaGlmdOeahOWAvFxuICogQHBhcmFtIHtPYmplY3Q9fSBvcHRpb24g6K6+572u5Y+C5pWwXG4gKiBAcGFyYW0ge2Jvb2xlYW59IG9wdGlvbi5zaWxlbnQg6Z2Z6buY6K6+572u77yM5LiN6Kem5Y+R5Y+Y5pu05LqL5Lu2XG4gKiBAcmV0dXJuIHtudW1iZXJ9IOaWsOaVsOe7hOeahGxlbmd0aOWxnuaAp1xuICovXG5EYXRhLnByb3RvdHlwZS51bnNoaWZ0ID0gZnVuY3Rpb24gKGV4cHIsIGl0ZW0sIG9wdGlvbikge1xuICAgIHZhciB0YXJnZXQgPSB0aGlzLmdldChleHByKTtcblxuICAgIGlmICh0YXJnZXQgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICB0aGlzLnNwbGljZShleHByLCBbMCwgMCwgaXRlbV0sIG9wdGlvbik7XG4gICAgICAgIHJldHVybiB0YXJnZXQubGVuZ3RoICsgMTtcbiAgICB9XG59O1xuXG4vKipcbiAqIOaVsOe7hOaVsOaNrumhueenu+mZpOaTjeS9nFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfE9iamVjdH0gZXhwciDmlbDmja7pobnot6/lvoRcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCDopoHnp7vpmaTpobnnmoTntKLlvJVcbiAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0aW9uIOiuvue9ruWPguaVsFxuICogQHBhcmFtIHtib29sZWFufSBvcHRpb24uc2lsZW50IOmdmem7mOiuvue9ru+8jOS4jeinpuWPkeWPmOabtOS6i+S7tlxuICovXG5EYXRhLnByb3RvdHlwZS5yZW1vdmVBdCA9IGZ1bmN0aW9uIChleHByLCBpbmRleCwgb3B0aW9uKSB7XG4gICAgdGhpcy5zcGxpY2UoZXhwciwgW2luZGV4LCAxXSwgb3B0aW9uKTtcbn07XG5cbi8qKlxuICog5pWw57uE5pWw5o2u6aG556e76Zmk5pON5L2cXG4gKlxuICogQHBhcmFtIHtzdHJpbmd8T2JqZWN0fSBleHByIOaVsOaNrumhuei3r+W+hFxuICogQHBhcmFtIHsqfSB2YWx1ZSDopoHnp7vpmaTnmoTpoblcbiAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0aW9uIOiuvue9ruWPguaVsFxuICogQHBhcmFtIHtib29sZWFufSBvcHRpb24uc2lsZW50IOmdmem7mOiuvue9ru+8jOS4jeinpuWPkeWPmOabtOS6i+S7tlxuICovXG5EYXRhLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiAoZXhwciwgdmFsdWUsIG9wdGlvbikge1xuICAgIHZhciB0YXJnZXQgPSB0aGlzLmdldChleHByKTtcblxuICAgIGlmICh0YXJnZXQgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICB2YXIgbGVuID0gdGFyZ2V0Lmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKGxlbi0tKSB7XG4gICAgICAgICAgICBpZiAodGFyZ2V0W2xlbl0gPT09IHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zcGxpY2UoZXhwciwgW2xlbiwgMV0sIG9wdGlvbik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG4vLyBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBEYXRhO1xuXG5cbi8qKlxuICogQGZpbGUg5aOw5piO5byP5LqL5Lu255qE55uR5ZCs5Ye95pWwXG4gKiBAYXV0aG9yIGVycm9ycmlrKGVycm9ycmlrQGdtYWlsLmNvbSlcbiAqL1xuXG5cbi8vIHZhciBldmFsQXJncyA9IHJlcXVpcmUoJy4uL3J1bnRpbWUvZXZhbC1hcmdzJyk7XG4vLyB2YXIgZmluZE1ldGhvZCA9IHJlcXVpcmUoJy4uL3J1bnRpbWUvZmluZC1tZXRob2QnKTtcbi8vIHZhciBEYXRhID0gcmVxdWlyZSgnLi4vcnVudGltZS9kYXRhJyk7XG5cbi8qKlxuICog5aOw5piO5byP5LqL5Lu255qE55uR5ZCs5Ye95pWwXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGV2ZW50QmluZCDnu5Hlrprkv6Hmga/lr7nosaFcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNDb21wb25lbnRFdmVudCDmmK/lkKbnu4Tku7boh6rlrprkuYnkuovku7ZcbiAqIEBwYXJhbSB7RGF0YX0gZGF0YSDmlbDmja7njq/looNcbiAqIEBwYXJhbSB7RXZlbnR9IGUg5LqL5Lu25a+56LGhXG4gKi9cbmZ1bmN0aW9uIGV2ZW50RGVjbGFyYXRpb25MaXN0ZW5lcihldmVudEJpbmQsIGlzQ29tcG9uZW50RXZlbnQsIGRhdGEsIGUpIHtcbiAgICB2YXIgbWV0aG9kID0gZmluZE1ldGhvZCh0aGlzLCBldmVudEJpbmQuZXhwci5uYW1lLCBkYXRhKTtcblxuICAgIGlmICh0eXBlb2YgbWV0aG9kID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHZhciBzY29wZSA9IG5ldyBEYXRhKFxuICAgICAgICAgICAgeyRldmVudDogaXNDb21wb25lbnRFdmVudCA/IGUgOiBlIHx8IHdpbmRvdy5ldmVudH0sXG4gICAgICAgICAgICBkYXRhXG4gICAgICAgICk7XG4gICAgICAgIG1ldGhvZC5hcHBseSh0aGlzLCBldmFsQXJncyhldmVudEJpbmQuZXhwci5hcmdzLCBzY29wZSwgdGhpcykpO1xuICAgIH1cbn1cblxuLy8gZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZXZlbnREZWNsYXJhdGlvbkxpc3RlbmVyO1xuXG5cbi8qKlxuICogQGZpbGUg6Ieq6Zet5ZCI5qCH562+6KGoXG4gKiBAYXV0aG9yIGVycm9ycmlrKGVycm9ycmlrQGdtYWlsLmNvbSlcbiAqL1xuXG4vLyB2YXIgc3BsaXRTdHIyT2JqID0gcmVxdWlyZSgnLi4vdXRpbC9zcGxpdC1zdHItMi1vYmonKTtcblxuLyoqXG4gKiDoh6rpl63lkIjmoIfnrb7liJfooahcbiAqXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG52YXIgaG90VGFncyA9IHNwbGl0U3RyMk9iaignZGl2LHNwYW4saW5wdXQsYnV0dG9uLHRleHRhcmVhLGZvcm0sbGFiZWwsZGwsZHQsZGQsdWwsb2wsbGksYSxiLHUsaDEsaDIsaDMsaDQsaDUsaDYnKTtcblxuLy8gZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gaG90VGFncztcblxuXG4vKipcbiAqIEBmaWxlIOaYr+WQpua1j+iniOWZqOeOr+Wig1xuICogQGF1dGhvciBlcnJvcnJpayhlcnJvcnJpa0BnbWFpbC5jb20pXG4gKi9cblxudmFyIGlzQnJvd3NlciA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnO1xuXG4vLyBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBpc0Jyb3dzZXI7XG5cblxuLyoqXG4gKiBAZmlsZSBpbnNlcnRCZWZvcmUg5pa55rOV55qE5YW85a655oCn5bCB6KOFXG4gKiBAYXV0aG9yIGVycm9ycmlrKGVycm9ycmlrQGdtYWlsLmNvbSlcbiAqL1xuXG4vKipcbiAqIGluc2VydEJlZm9yZSDmlrnms5XnmoTlhbzlrrnmgKflsIHoo4VcbiAqXG4gKiBAcGFyYW0ge0hUTUxOb2RlfSB0YXJnZXRFbCDopoHmj5LlhaXnmoToioLngrlcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHBhcmVudEVsIOeItuWFg+e0oFxuICogQHBhcmFtIHtIVE1MRWxlbWVudD99IGJlZm9yZUVsIOWcqOatpOWFg+e0oOS5i+WJjeaPkuWFpVxuICovXG5mdW5jdGlvbiBpbnNlcnRCZWZvcmUodGFyZ2V0RWwsIHBhcmVudEVsLCBiZWZvcmVFbCkge1xuICAgIGlmIChwYXJlbnRFbCkge1xuICAgICAgICBpZiAoYmVmb3JlRWwpIHtcbiAgICAgICAgICAgIHBhcmVudEVsLmluc2VydEJlZm9yZSh0YXJnZXRFbCwgYmVmb3JlRWwpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcGFyZW50RWwuYXBwZW5kQ2hpbGQodGFyZ2V0RWwpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vLyBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCZWZvcmU7XG5cblxuLyoqXG4gKiBAZmlsZSDliKTmlq3lhYPntKDmmK/lkKbkuI3lhYHorrjorr7nva5IVE1MXG4gKiBAYXV0aG9yIGVycm9ycmlrKGVycm9ycmlrQGdtYWlsLmNvbSlcbiAqL1xuXG4vLyBzb21lIGh0bWwgZWxlbWVudHMgY2Fubm90IHNldCBpbm5lckhUTUwgaW4gb2xkIGllXG4vLyBzZWU6IGh0dHBzOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvbXM1MzM4OTcoVlMuODUpLmFzcHhcblxuLyoqXG4gKiDliKTmlq3lhYPntKDmmK/lkKbkuI3lhYHorrjorr7nva5IVE1MXG4gKlxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWwg6KaB5Yik5pat55qE5YWD57SgXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBub1NldEhUTUwoZWwpIHtcbiAgICByZXR1cm4gL14oY29sfGNvbGdyb3VwfGZyYW1lc2V0fHN0eWxlfHRhYmxlfHRib2R5fHRmb290fHRoZWFkfHRyfHNlbGVjdCkkL2kudGVzdChlbC50YWdOYW1lKTtcbn1cblxuLy8gZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gbm9TZXRIVE1MO1xuXG5cbi8qKlxuICogQGZpbGUgIOiOt+WPluiKgueCuSBzdHVtcCDnmoQgY29tbWVudFxuICogQGF1dGhvciBlcnJvcnJpayhlcnJvcnJpa0BnbWFpbC5jb20pXG4gKi9cblxuLy8gdmFyIG5vU2V0SFRNTCA9IHJlcXVpcmUoJy4uL2Jyb3dzZXIvbm8tc2V0LWh0bWwnKTtcblxuLy8gI1tiZWdpbl0gZXJyb3Jcbi8qKlxuICog6I635Y+W6IqC54K5IHN0dW1wIOeahCBjb21tZW50XG4gKlxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWwgSFRNTOWFg+e0oFxuICovXG5mdW5jdGlvbiB3YXJuU2V0SFRNTChlbCkge1xuICAgIC8vIGRvbnQgd2FybiBpZiBub3QgaW4gYnJvd3NlciBydW50aW1lXG4gICAgaWYgKCEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50KSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gc29tZSBodG1sIGVsZW1lbnRzIGNhbm5vdCBzZXQgaW5uZXJIVE1MIGluIG9sZCBpZVxuICAgIC8vIHNlZTogaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9tczUzMzg5NyhWUy44NSkuYXNweFxuICAgIGlmIChub1NldEhUTUwoZWwpKSB7XG4gICAgICAgIHZhciBtZXNzYWdlID0gJ1tTQU4gV0FSTklOR10gc2V0IGh0bWwgZm9yIGVsZW1lbnQgXCInICsgZWwudGFnTmFtZVxuICAgICAgICAgICAgKyAnXCIgbWF5IGNhdXNlIGFuIGVycm9yIGluIG9sZCBJRSc7XG4gICAgICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cbiAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlID09PSAnb2JqZWN0JyAmJiBjb25zb2xlLndhcm4pIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihtZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbnNvbGUgKi9cbiAgICB9XG59XG4vLyAjW2VuZF1cblxuLy8gZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gd2FyblNldEhUTUw7XG5cblxuLyoqXG4gKiBAZmlsZSDliKTmlq3mmK/lkKbnu5PmnZ/moalcbiAqIEBhdXRob3IgZXJyb3JyaWsoZXJyb3JyaWtAZ21haWwuY29tKVxuICovXG5cbi8vICNbYmVnaW5dIHJldmVyc2Vcbi8qKlxuICog5Yik5pat5piv5ZCm57uT5p2f5qGpXG4gKlxuICogQHBhcmFtIHtIVE1MRWxlbWVudHxIVE1MQ29tbWVudH0gdGFyZ2V0IOimgeWIpOaWreeahOWFg+e0oFxuICogQHBhcmFtIHtzdHJpbmd9IHR5cGUg5qGp57G75Z6LXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc0VuZFN0dW1wKHRhcmdldCwgdHlwZSkge1xuICAgIHJldHVybiB0YXJnZXQubm9kZVR5cGUgPT09IDggJiYgdGFyZ2V0LmRhdGEgPT09ICcvcy0nICsgdHlwZTtcbn1cbi8vICNbZW5kXVxuXG4vLyBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBpc0VuZFN0dW1wO1xuXG5cbi8qKlxuICogQGZpbGUg6I635Y+W6IqC54K55Zyo57uE5Lu25qCR5Lit55qE6Lev5b6EXG4gKiBAYXV0aG9yIGVycm9ycmlrKGVycm9ycmlrQGdtYWlsLmNvbSlcbiAqL1xuXG5cbi8vIHZhciBOb2RlVHlwZSA9IHJlcXVpcmUoJy4vbm9kZS10eXBlJyk7XG5cbi8vICNbYmVnaW5dIHJldmVyc2Vcbi8qKlxuICog6I635Y+W6IqC54K55Zyo57uE5Lu25qCR5Lit55qE6Lev5b6EXG4gKlxuICogQHBhcmFtIHtOb2RlfSBub2RlIOiKgueCueWvueixoVxuICogQHJldHVybiB7QXJyYXl9XG4gKi9cbmZ1bmN0aW9uIGdldE5vZGVQYXRoKG5vZGUpIHtcbiAgICB2YXIgbm9kZVBhdGhzID0gW107XG4gICAgdmFyIG5vZGVQYXJlbnQgPSBub2RlO1xuICAgIHdoaWxlIChub2RlUGFyZW50KSB7XG4gICAgICAgIHN3aXRjaCAobm9kZVBhcmVudC5ub2RlVHlwZSkge1xuICAgICAgICAgICAgY2FzZSBOb2RlVHlwZS5FTEVNOlxuICAgICAgICAgICAgICAgIG5vZGVQYXRocy51bnNoaWZ0KG5vZGVQYXJlbnQudGFnTmFtZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgTm9kZVR5cGUuSUY6XG4gICAgICAgICAgICAgICAgbm9kZVBhdGhzLnVuc2hpZnQoJ2lmJyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgTm9kZVR5cGUuRk9SOlxuICAgICAgICAgICAgICAgIG5vZGVQYXRocy51bnNoaWZ0KCdmb3JbJyArIG5vZGVQYXJlbnQuYW5vZGUuZGlyZWN0aXZlc1snZm9yJ10ucmF3ICsgJ10nKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBkb3Qtbm90YXRpb25cbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSBOb2RlVHlwZS5TTE9UOlxuICAgICAgICAgICAgICAgIG5vZGVQYXRocy51bnNoaWZ0KCdzbG90WycgKyAobm9kZVBhcmVudC5uYW1lIHx8ICdkZWZhdWx0JykgKyAnXScpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIE5vZGVUeXBlLlRQTDpcbiAgICAgICAgICAgICAgICBub2RlUGF0aHMudW5zaGlmdCgndGVtcGxhdGUnKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSBOb2RlVHlwZS5DTVBUOlxuICAgICAgICAgICAgICAgIG5vZGVQYXRocy51bnNoaWZ0KCdjb21wb25lbnRbJyArIChub2RlUGFyZW50LnN1YlRhZyB8fCAncm9vdCcpICsgJ10nKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSBOb2RlVHlwZS5URVhUOlxuICAgICAgICAgICAgICAgIG5vZGVQYXRocy51bnNoaWZ0KCd0ZXh0Jyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBub2RlUGFyZW50ID0gbm9kZVBhcmVudC5wYXJlbnQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5vZGVQYXRocztcbn1cbi8vICNbZW5kXVxuXG4vLyBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBnZXROb2RlUGF0aDtcblxuXG4vKipcbiAqIEBmaWxlIHRleHQg6IqC54K557G7XG4gKiBAYXV0aG9yIGVycm9ycmlrKGVycm9ycmlrQGdtYWlsLmNvbSlcbiAqL1xuXG4vLyB2YXIgaXNCcm93c2VyID0gcmVxdWlyZSgnLi4vYnJvd3Nlci9pcy1icm93c2VyJyk7XG4vLyB2YXIgcmVtb3ZlRWwgPSByZXF1aXJlKCcuLi9icm93c2VyL3JlbW92ZS1lbCcpO1xuLy8gdmFyIGluc2VydEJlZm9yZSA9IHJlcXVpcmUoJy4uL2Jyb3dzZXIvaW5zZXJ0LWJlZm9yZScpO1xuLy8gdmFyIGNoYW5nZUV4cHJDb21wYXJlID0gcmVxdWlyZSgnLi4vcnVudGltZS9jaGFuZ2UtZXhwci1jb21wYXJlJyk7XG4vLyB2YXIgZXZhbEV4cHIgPSByZXF1aXJlKCcuLi9ydW50aW1lL2V2YWwtZXhwcicpO1xuLy8gdmFyIE5vZGVUeXBlID0gcmVxdWlyZSgnLi9ub2RlLXR5cGUnKTtcbi8vIHZhciB3YXJuU2V0SFRNTCA9IHJlcXVpcmUoJy4vd2Fybi1zZXQtaHRtbCcpO1xuLy8gdmFyIGlzRW5kU3R1bXAgPSByZXF1aXJlKCcuL2lzLWVuZC1zdHVtcCcpO1xuLy8gdmFyIGdldE5vZGVQYXRoID0gcmVxdWlyZSgnLi9nZXQtbm9kZS1wYXRoJyk7XG5cblxuLyoqXG4gKiB0ZXh0IOiKgueCueexu1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhTm9kZSDmir3osaHoioLngrlcbiAqIEBwYXJhbSB7Q29tcG9uZW50fSBvd25lciDmiYDlsZ7nu4Tku7bnjq/looNcbiAqIEBwYXJhbSB7TW9kZWw9fSBzY29wZSDmiYDlsZ7mlbDmja7njq/looNcbiAqIEBwYXJhbSB7Tm9kZX0gcGFyZW50IOeItuS6suiKgueCuVxuICogQHBhcmFtIHtET01DaGlsZHJlbldhbGtlcj99IHJldmVyc2VXYWxrZXIg5a2Q5YWD57Sg6YGN5Y6G5a+56LGhXG4gKi9cbmZ1bmN0aW9uIFRleHROb2RlKGFOb2RlLCBvd25lciwgc2NvcGUsIHBhcmVudCwgcmV2ZXJzZVdhbGtlcikge1xuICAgIHRoaXMuYU5vZGUgPSBhTm9kZTtcbiAgICB0aGlzLm93bmVyID0gb3duZXI7XG4gICAgdGhpcy5zY29wZSA9IHNjb3BlO1xuICAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xuXG4gICAgLy8gI1tiZWdpbl0gcmV2ZXJzZVxuICAgIGlmIChyZXZlcnNlV2Fsa2VyKSB7XG4gICAgICAgIHZhciBjdXJyZW50Tm9kZSA9IHJldmVyc2VXYWxrZXIuY3VycmVudDtcbiAgICAgICAgaWYgKGN1cnJlbnROb2RlKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKGN1cnJlbnROb2RlLm5vZGVUeXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudE5vZGUuZGF0YSA9PT0gJ3MtdGV4dCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsID0gY3VycmVudE5vZGU7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50Tm9kZS5kYXRhID0gdGhpcy5pZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldmVyc2VXYWxrZXIuZ29OZXh0KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICgxKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50Tm9kZSA9IHJldmVyc2VXYWxrZXIuY3VycmVudDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWN1cnJlbnROb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignW1NBTiBSRVZFUlNFIEVSUk9SXSBUZXh0IGVuZCBmbGFnIG5vdCBmb3VuZC4gXFxuUGF0aHM6ICdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgZ2V0Tm9kZVBhdGgodGhpcykuam9pbignID4gJykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0VuZFN0dW1wKGN1cnJlbnROb2RlLCAndGV4dCcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZWwgPSBjdXJyZW50Tm9kZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV2ZXJzZVdhbGtlci5nb05leHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudE5vZGUuZGF0YSA9IHRoaXMuaWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldmVyc2VXYWxrZXIuZ29OZXh0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIHJldmVyc2VXYWxrZXIuZ29OZXh0KCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5hTm9kZS50ZXh0RXhwci5vcmlnaW5hbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbCA9IGN1cnJlbnROb2RlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5lbCA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTtcbiAgICAgICAgICAgIGluc2VydEJlZm9yZSh0aGlzLmVsLCByZXZlcnNlV2Fsa2VyLnRhcmdldCwgcmV2ZXJzZVdhbGtlci5jdXJyZW50KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyAjW2VuZF1cbn1cblxuVGV4dE5vZGUucHJvdG90eXBlLm5vZGVUeXBlID0gTm9kZVR5cGUuVEVYVDtcblxuLyoqXG4gKiDlsIZ0ZXh0IGF0dGFjaOWIsOmhtemdolxuICpcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHBhcmVudEVsIOimgea3u+WKoOWIsOeahOeItuWFg+e0oFxuICogQHBhcmFtIHtIVE1MRWxlbWVudO+8nX0gYmVmb3JlRWwg6KaB5re75Yqg5Yiw5ZOq5Liq5YWD57Sg5LmL5YmNXG4gKi9cblRleHROb2RlLnByb3RvdHlwZS5hdHRhY2ggPSBmdW5jdGlvbiAocGFyZW50RWwsIGJlZm9yZUVsKSB7XG4gICAgdGhpcy5jb250ZW50ID0gZXZhbEV4cHIodGhpcy5hTm9kZS50ZXh0RXhwciwgdGhpcy5zY29wZSwgdGhpcy5vd25lcik7XG5cbiAgICBpZiAodGhpcy5hTm9kZS50ZXh0RXhwci5vcmlnaW5hbCkge1xuICAgICAgICB0aGlzLnNlbCA9IGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQodGhpcy5pZCk7XG4gICAgICAgIGluc2VydEJlZm9yZSh0aGlzLnNlbCwgcGFyZW50RWwsIGJlZm9yZUVsKTtcblxuICAgICAgICB0aGlzLmVsID0gZG9jdW1lbnQuY3JlYXRlQ29tbWVudCh0aGlzLmlkKTtcbiAgICAgICAgaW5zZXJ0QmVmb3JlKHRoaXMuZWwsIHBhcmVudEVsLCBiZWZvcmVFbCk7XG5cbiAgICAgICAgdmFyIHRlbXBGbGFnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gICAgICAgIHBhcmVudEVsLmluc2VydEJlZm9yZSh0ZW1wRmxhZywgdGhpcy5lbCk7XG4gICAgICAgIHRlbXBGbGFnLmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlYmVnaW4nLCB0aGlzLmNvbnRlbnQpO1xuICAgICAgICBwYXJlbnRFbC5yZW1vdmVDaGlsZCh0ZW1wRmxhZyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0aGlzLmVsID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodGhpcy5jb250ZW50KTtcbiAgICAgICAgaW5zZXJ0QmVmb3JlKHRoaXMuZWwsIHBhcmVudEVsLCBiZWZvcmVFbCk7XG4gICAgfVxufTtcblxuLyoqXG4gKiDplIDmr4EgdGV4dCDoioLngrlcbiAqL1xuVGV4dE5vZGUucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5fcHJldiA9IG51bGw7XG4gICAgdGhpcy5lbCA9IG51bGw7XG4gICAgdGhpcy5zZWwgPSBudWxsO1xufTtcblxudmFyIHRleHRVcGRhdGVQcm9wID0gaXNCcm93c2VyXG4gICAgJiYgKHR5cGVvZiBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJykudGV4dENvbnRlbnQgPT09ICdzdHJpbmcnXG4gICAgICAgID8gJ3RleHRDb250ZW50J1xuICAgICAgICA6ICdkYXRhJyk7XG5cbi8qKlxuICog5pu05pawIHRleHQg6IqC54K555qE6KeG5Zu+XG4gKlxuICogQHBhcmFtIHtBcnJheX0gY2hhbmdlcyDmlbDmja7lj5jljJbkv6Hmga9cbiAqL1xuVGV4dE5vZGUucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoY2hhbmdlcykge1xuICAgIGlmICh0aGlzLmFOb2RlLnRleHRFeHByLnZhbHVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgbGVuID0gY2hhbmdlcyA/IGNoYW5nZXMubGVuZ3RoIDogMDtcbiAgICB3aGlsZSAobGVuLS0pIHtcbiAgICAgICAgaWYgKGNoYW5nZUV4cHJDb21wYXJlKGNoYW5nZXNbbGVuXS5leHByLCB0aGlzLmFOb2RlLnRleHRFeHByLCB0aGlzLnNjb3BlKSkge1xuICAgICAgICAgICAgdmFyIHRleHQgPSBldmFsRXhwcih0aGlzLmFOb2RlLnRleHRFeHByLCB0aGlzLnNjb3BlLCB0aGlzLm93bmVyKTtcblxuICAgICAgICAgICAgaWYgKHRleHQgIT09IHRoaXMuY29udGVudCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY29udGVudCA9IHRleHQ7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5hTm9kZS50ZXh0RXhwci5vcmlnaW5hbCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc3RhcnRSZW1vdmVFbCA9IHRoaXMuc2VsLm5leHRTaWJsaW5nO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcGFyZW50RWwgPSB0aGlzLmVsLnBhcmVudE5vZGU7XG5cbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHN0YXJ0UmVtb3ZlRWwgIT09IHRoaXMuZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZW1vdmVUYXJnZXQgPSBzdGFydFJlbW92ZUVsO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRSZW1vdmVFbCA9IHN0YXJ0UmVtb3ZlRWwubmV4dFNpYmxpbmc7XG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVFbChyZW1vdmVUYXJnZXQpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gI1tiZWdpbl0gZXJyb3JcbiAgICAgICAgICAgICAgICAgICAgd2FyblNldEhUTUwocGFyZW50RWwpO1xuICAgICAgICAgICAgICAgICAgICAvLyAjW2VuZF1cblxuICAgICAgICAgICAgICAgICAgICB2YXIgdGVtcEZsYWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50RWwuaW5zZXJ0QmVmb3JlKHRlbXBGbGFnLCB0aGlzLmVsKTtcbiAgICAgICAgICAgICAgICAgICAgdGVtcEZsYWcuaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmViZWdpbicsIHRleHQpO1xuICAgICAgICAgICAgICAgICAgICBwYXJlbnRFbC5yZW1vdmVDaGlsZCh0ZW1wRmxhZyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVsW3RleHRVcGRhdGVQcm9wXSA9IHRleHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG4vLyBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBUZXh0Tm9kZTtcblxuXG4vKipcbiAqIEBmaWxlIOWIpOaWreWPmOabtOaVsOe7hOaYr+WQpuW9seWTjeWIsOaVsOaNruW8leeUqOaRmOimgVxuICogQGF1dGhvciBlcnJvcnJpayhlcnJvcnJpa0BnbWFpbC5jb20pXG4gKi9cblxuXG4vKipcbiAqIOWIpOaWreWPmOabtOaVsOe7hOaYr+WQpuW9seWTjeWIsOaVsOaNruW8leeUqOaRmOimgVxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGNoYW5nZXMg5Y+Y5pu05pWw57uEXG4gKiBAcGFyYW0ge09iamVjdH0gZGF0YVJlZiDmlbDmja7lvJXnlKjmkZjopoFcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGNoYW5nZXNJc0luRGF0YVJlZihjaGFuZ2VzLCBkYXRhUmVmKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGFuZ2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBjaGFuZ2UgPSBjaGFuZ2VzW2ldO1xuXG4gICAgICAgIGlmICghY2hhbmdlLm92ZXJ2aWV3KSB7XG4gICAgICAgICAgICB2YXIgcGF0aHMgPSBjaGFuZ2UuZXhwci5wYXRocztcbiAgICAgICAgICAgIGNoYW5nZS5vdmVydmlldyA9IHBhdGhzWzBdLnZhbHVlO1xuXG4gICAgICAgICAgICBpZiAocGF0aHMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgIGNoYW5nZS5leHRPdmVydmlldyA9IHBhdGhzWzBdLnZhbHVlICsgJy4nICsgcGF0aHNbMV0udmFsdWU7XG4gICAgICAgICAgICAgICAgY2hhbmdlLndpbGRPdmVydmlldyA9IHBhdGhzWzBdLnZhbHVlICsgJy4qJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkYXRhUmVmW2NoYW5nZS5vdmVydmlld11cbiAgICAgICAgICAgIHx8IGNoYW5nZS53aWxkT3ZlcnZpZXcgJiYgZGF0YVJlZltjaGFuZ2Uud2lsZE92ZXJ2aWV3XVxuICAgICAgICAgICAgfHwgY2hhbmdlLmV4dE92ZXJ2aWV3ICYmIGRhdGFSZWZbY2hhbmdlLmV4dE92ZXJ2aWV3XVxuICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vLyBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBjaGFuZ2VzSXNJbkRhdGFSZWY7XG5cblxuLyoqXG4gKiBAZmlsZSDlhYPntKDlrZDoioLngrnpgY3ljobmk43kvZznsbtcbiAqIEBhdXRob3IgZXJyb3JyaWsoZXJyb3JyaWtAZ21haWwuY29tKVxuICovXG5cbi8vIHZhciByZW1vdmVFbCA9IHJlcXVpcmUoJy4uL2Jyb3dzZXIvcmVtb3ZlLWVsJyk7XG5cbi8vICNbYmVnaW5dIHJldmVyc2Vcbi8qKlxuICog5YWD57Sg5a2Q6IqC54K56YGN5Y6G5pON5L2c57G7XG4gKlxuICogQGlubmVyXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsIOimgemBjeWOhueahOWFg+e0oFxuICovXG5mdW5jdGlvbiBET01DaGlsZHJlbldhbGtlcihlbCkge1xuICAgIHRoaXMucmF3ID0gW107XG4gICAgdGhpcy5pbmRleCA9IDA7XG4gICAgdGhpcy50YXJnZXQgPSBlbDtcblxuICAgIHZhciBjaGlsZCA9IGVsLmZpcnN0Q2hpbGQ7XG4gICAgdmFyIG5leHQ7XG4gICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICAgIG5leHQgPSBjaGlsZC5uZXh0U2libGluZztcblxuICAgICAgICBzd2l0Y2ggKGNoaWxkLm5vZGVUeXBlKSB7XG4gICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgaWYgKC9eXFxzKiQvLnRlc3QoY2hpbGQuZGF0YSB8fCBjaGlsZC50ZXh0Q29udGVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlRWwoY2hpbGQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yYXcucHVzaChjaGlsZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgICAgICAgdGhpcy5yYXcucHVzaChjaGlsZCk7XG4gICAgICAgIH1cblxuICAgICAgICBjaGlsZCA9IG5leHQ7XG4gICAgfVxuXG4gICAgdGhpcy5jdXJyZW50ID0gdGhpcy5yYXdbdGhpcy5pbmRleF07XG4gICAgdGhpcy5uZXh0ID0gdGhpcy5yYXdbdGhpcy5pbmRleCArIDFdO1xufVxuXG4vKipcbiAqIOW+gOS4i+i1sOS4gOS4quWFg+e0oFxuICovXG5ET01DaGlsZHJlbldhbGtlci5wcm90b3R5cGUuZ29OZXh0ID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuY3VycmVudCA9IHRoaXMucmF3WysrdGhpcy5pbmRleF07XG4gICAgdGhpcy5uZXh0ID0gdGhpcy5yYXdbdGhpcy5pbmRleCArIDFdO1xufTtcbi8vICNbZW5kXVxuXG4vLyBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBET01DaGlsZHJlbldhbGtlcjtcblxuXG4vKipcbiAqIEBmaWxlIOWFg+e0oOiKgueCueexu1xuICogQGF1dGhvciBlcnJvcnJpayhlcnJvcnJpa0BnbWFpbC5jb20pXG4gKi9cblxuXG4vLyB2YXIgZWFjaCA9IHJlcXVpcmUoJy4uL3V0aWwvZWFjaCcpO1xuLy8gdmFyIGd1aWQgPSByZXF1aXJlKCcuLi91dGlsL2d1aWQnKTtcbi8vIHZhciByZW1vdmVFbCA9IHJlcXVpcmUoJy4uL2Jyb3dzZXIvcmVtb3ZlLWVsJyk7XG4vLyB2YXIgY2hhbmdlRXhwckNvbXBhcmUgPSByZXF1aXJlKCcuLi9ydW50aW1lL2NoYW5nZS1leHByLWNvbXBhcmUnKTtcbi8vIHZhciBjaGFuZ2VzSXNJbkRhdGFSZWYgPSByZXF1aXJlKCcuLi9ydW50aW1lL2NoYW5nZXMtaXMtaW4tZGF0YS1yZWYnKTtcbi8vIHZhciBldmFsRXhwciA9IHJlcXVpcmUoJy4uL3J1bnRpbWUvZXZhbC1leHByJyk7XG4vLyB2YXIgTGlmZUN5Y2xlID0gcmVxdWlyZSgnLi9saWZlLWN5Y2xlJyk7XG4vLyB2YXIgTm9kZVR5cGUgPSByZXF1aXJlKCcuL25vZGUtdHlwZScpO1xuLy8gdmFyIHJldmVyc2VFbGVtZW50Q2hpbGRyZW4gPSByZXF1aXJlKCcuL3JldmVyc2UtZWxlbWVudC1jaGlsZHJlbicpO1xuLy8gdmFyIGlzRGF0YUNoYW5nZUJ5RWxlbWVudCA9IHJlcXVpcmUoJy4vaXMtZGF0YS1jaGFuZ2UtYnktZWxlbWVudCcpO1xuLy8gdmFyIGVsZW1lbnRVcGRhdGVDaGlsZHJlbiA9IHJlcXVpcmUoJy4vZWxlbWVudC11cGRhdGUtY2hpbGRyZW4nKTtcbi8vIHZhciBlbGVtZW50T3duQ3JlYXRlID0gcmVxdWlyZSgnLi9lbGVtZW50LW93bi1jcmVhdGUnKTtcbi8vIHZhciBlbGVtZW50T3duQXR0YWNoID0gcmVxdWlyZSgnLi9lbGVtZW50LW93bi1hdHRhY2gnKTtcbi8vIHZhciBlbGVtZW50T3duRGV0YWNoID0gcmVxdWlyZSgnLi9lbGVtZW50LW93bi1kZXRhY2gnKTtcbi8vIHZhciBlbGVtZW50T3duRGlzcG9zZSA9IHJlcXVpcmUoJy4vZWxlbWVudC1vd24tZGlzcG9zZScpO1xuLy8gdmFyIGVsZW1lbnRPd25PbkVsID0gcmVxdWlyZSgnLi9lbGVtZW50LW93bi1vbi1lbCcpO1xuLy8gdmFyIGVsZW1lbnRPd25Ub1BoYXNlID0gcmVxdWlyZSgnLi9lbGVtZW50LW93bi10by1waGFzZScpO1xuLy8gdmFyIGVsZW1lbnRPd25BdHRhY2hlZCA9IHJlcXVpcmUoJy4vZWxlbWVudC1vd24tYXR0YWNoZWQnKTtcbi8vIHZhciBlbGVtZW50RGlzcG9zZSA9IHJlcXVpcmUoJy4vZWxlbWVudC1kaXNwb3NlJyk7XG4vLyB2YXIgZWxlbWVudEluaXRUYWdOYW1lID0gcmVxdWlyZSgnLi9lbGVtZW50LWluaXQtdGFnLW5hbWUnKTtcbi8vIHZhciBoYW5kbGVQcm9wID0gcmVxdWlyZSgnLi9oYW5kbGUtcHJvcCcpO1xuLy8gdmFyIHdhcm5TZXRIVE1MID0gcmVxdWlyZSgnLi93YXJuLXNldC1odG1sJyk7XG4vLyB2YXIgZ2V0Tm9kZVBhdGggPSByZXF1aXJlKCcuL2dldC1ub2RlLXBhdGgnKTtcblxuLyoqXG4gKiDlhYPntKDoioLngrnnsbtcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYU5vZGUg5oq96LGh6IqC54K5XG4gKiBAcGFyYW0ge0NvbXBvbmVudH0gb3duZXIg5omA5bGe57uE5Lu2546v5aKDXG4gKiBAcGFyYW0ge01vZGVsPX0gc2NvcGUg5omA5bGe5pWw5o2u546v5aKDXG4gKiBAcGFyYW0ge05vZGV9IHBhcmVudCDniLbkurLoioLngrlcbiAqIEBwYXJhbSB7RE9NQ2hpbGRyZW5XYWxrZXI/fSByZXZlcnNlV2Fsa2VyIOWtkOWFg+e0oOmBjeWOhuWvueixoVxuICovXG5mdW5jdGlvbiBFbGVtZW50KGFOb2RlLCBvd25lciwgc2NvcGUsIHBhcmVudCwgcmV2ZXJzZVdhbGtlcikge1xuICAgIHRoaXMuYU5vZGUgPSBhTm9kZTtcbiAgICB0aGlzLm93bmVyID0gb3duZXI7XG4gICAgdGhpcy5zY29wZSA9IHNjb3BlO1xuICAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xuXG4gICAgdGhpcy5saWZlQ3ljbGUgPSBMaWZlQ3ljbGUuc3RhcnQ7XG4gICAgdGhpcy5jaGlsZHJlbiA9IFtdO1xuICAgIHRoaXMuX2VsRm5zID0gW107XG4gICAgdGhpcy5wYXJlbnRDb21wb25lbnQgPSBwYXJlbnQubm9kZVR5cGUgPT09IE5vZGVUeXBlLkNNUFRcbiAgICAgICAgPyBwYXJlbnRcbiAgICAgICAgOiBwYXJlbnQucGFyZW50Q29tcG9uZW50O1xuXG4gICAgdGhpcy5pZCA9IGd1aWQoKTtcblxuICAgIGVsZW1lbnRJbml0VGFnTmFtZSh0aGlzKTtcblxuICAgIHRoaXMuX3RvUGhhc2UoJ2luaXRlZCcpO1xuXG4gICAgLy8gI1tiZWdpbl0gcmV2ZXJzZVxuICAgIGlmIChyZXZlcnNlV2Fsa2VyKSB7XG4gICAgICAgIHZhciBjdXJyZW50Tm9kZSA9IHJldmVyc2VXYWxrZXIuY3VycmVudDtcblxuICAgICAgICBpZiAoIWN1cnJlbnROb2RlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1tTQU4gUkVWRVJTRSBFUlJPUl0gRWxlbWVudCBub3QgZm91bmQuIFxcblBhdGhzOiAnXG4gICAgICAgICAgICAgICAgKyBnZXROb2RlUGF0aCh0aGlzKS5qb2luKCcgPiAnKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY3VycmVudE5vZGUubm9kZVR5cGUgIT09IDEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignW1NBTiBSRVZFUlNFIEVSUk9SXSBFbGVtZW50IHR5cGUgbm90IG1hdGNoLCBleHBlY3QgMSBidXQgJ1xuICAgICAgICAgICAgICAgICsgY3VycmVudE5vZGUubm9kZVR5cGUgKyAnLlxcblBhdGhzOiAnXG4gICAgICAgICAgICAgICAgKyBnZXROb2RlUGF0aCh0aGlzKS5qb2luKCcgPiAnKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY3VycmVudE5vZGUudGFnTmFtZS50b0xvd2VyQ2FzZSgpICE9PSB0aGlzLnRhZ05hbWUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignW1NBTiBSRVZFUlNFIEVSUk9SXSBFbGVtZW50IHRhZ05hbWUgbm90IG1hdGNoLCBleHBlY3QgJ1xuICAgICAgICAgICAgICAgICsgdGhpcy50YWdOYW1lICsgJyBidXQgbWVhdCAnICsgY3VycmVudE5vZGUudGFnTmFtZS50b0xvd2VyQ2FzZSgpICsgJy5cXG5QYXRoczogJ1xuICAgICAgICAgICAgICAgICsgZ2V0Tm9kZVBhdGgodGhpcykuam9pbignID4gJykpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5lbCA9IGN1cnJlbnROb2RlO1xuICAgICAgICByZXZlcnNlV2Fsa2VyLmdvTmV4dCgpO1xuXG4gICAgICAgIHJldmVyc2VFbGVtZW50Q2hpbGRyZW4odGhpcyk7XG5cbiAgICAgICAgdGhpcy5fYXR0YWNoZWQoKTtcbiAgICB9XG4gICAgLy8gI1tlbmRdXG59XG5cblxuXG5FbGVtZW50LnByb3RvdHlwZS5ub2RlVHlwZSA9IE5vZGVUeXBlLkVMRU07XG5cblxuRWxlbWVudC5wcm90b3R5cGUuYXR0YWNoID0gZWxlbWVudE93bkF0dGFjaDtcbkVsZW1lbnQucHJvdG90eXBlLmRldGFjaCA9IGVsZW1lbnRPd25EZXRhY2g7XG5FbGVtZW50LnByb3RvdHlwZS5kaXNwb3NlID0gZWxlbWVudE93bkRpc3Bvc2U7XG5FbGVtZW50LnByb3RvdHlwZS5fY3JlYXRlID0gZWxlbWVudE93bkNyZWF0ZTtcbkVsZW1lbnQucHJvdG90eXBlLl90b1BoYXNlID0gZWxlbWVudE93blRvUGhhc2U7XG5FbGVtZW50LnByb3RvdHlwZS5fb25FbCA9IGVsZW1lbnRPd25PbkVsO1xuXG5FbGVtZW50LnByb3RvdHlwZS5fZG9uZUxlYXZlID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLmxlYXZlRGlzcG9zZSkge1xuICAgICAgICBpZiAoIXRoaXMubGlmZUN5Y2xlLmRpc3Bvc2VkKSB7XG4gICAgICAgICAgICBlbGVtZW50RGlzcG9zZShcbiAgICAgICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgICAgIHRoaXMuZGlzcG9zZU5vRGV0YWNoLFxuICAgICAgICAgICAgICAgIHRoaXMuZGlzcG9zZU5vVHJhbnNpdGlvblxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICh0aGlzLmxpZmVDeWNsZS5hdHRhY2hlZCkge1xuICAgICAgICByZW1vdmVFbCh0aGlzLmVsKTtcbiAgICAgICAgdGhpcy5fdG9QaGFzZSgnZGV0YWNoZWQnKTtcbiAgICB9XG59O1xuXG4vKipcbiAqIOinhuWbvuabtOaWsFxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGNoYW5nZXMg5pWw5o2u5Y+Y5YyW5L+h5oGvXG4gKi9cbkVsZW1lbnQucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoY2hhbmdlcykge1xuICAgIGlmICghY2hhbmdlc0lzSW5EYXRhUmVmKGNoYW5nZXMsIHRoaXMuYU5vZGUuaG90c3BvdC5kYXRhKSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG1lID0gdGhpcztcblxuICAgIHZhciBkeW5hbWljUHJvcHMgPSB0aGlzLmFOb2RlLmhvdHNwb3QuZHluYW1pY1Byb3BzO1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gZHluYW1pY1Byb3BzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICB2YXIgcHJvcCA9IGR5bmFtaWNQcm9wc1tpXTtcblxuICAgICAgICBmb3IgKHZhciBqID0gMCwgY2hhbmdlTGVuID0gY2hhbmdlcy5sZW5ndGg7IGogPCBjaGFuZ2VMZW47IGorKykge1xuICAgICAgICAgICAgdmFyIGNoYW5nZSA9IGNoYW5nZXNbal07XG5cbiAgICAgICAgICAgIGlmICghaXNEYXRhQ2hhbmdlQnlFbGVtZW50KGNoYW5nZSwgdGhpcywgcHJvcC5uYW1lKVxuICAgICAgICAgICAgICAgICYmIChcbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlRXhwckNvbXBhcmUoY2hhbmdlLmV4cHIsIHByb3AuZXhwciwgdGhpcy5zY29wZSlcbiAgICAgICAgICAgICAgICAgICAgfHwgcHJvcC5oaW50RXhwciAmJiBjaGFuZ2VFeHByQ29tcGFyZShjaGFuZ2UuZXhwciwgcHJvcC5oaW50RXhwciwgdGhpcy5zY29wZSlcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVQcm9wKHRoaXMsIGV2YWxFeHByKHByb3AuZXhwciwgdGhpcy5zY29wZSwgdGhpcy5vd25lciksIHByb3ApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGh0bWxEaXJlY3RpdmUgPSB0aGlzLmFOb2RlLmRpcmVjdGl2ZXMuaHRtbDtcbiAgICBpZiAoaHRtbERpcmVjdGl2ZSkge1xuICAgICAgICBlYWNoKGNoYW5nZXMsIGZ1bmN0aW9uIChjaGFuZ2UpIHtcbiAgICAgICAgICAgIGlmIChjaGFuZ2VFeHByQ29tcGFyZShjaGFuZ2UuZXhwciwgaHRtbERpcmVjdGl2ZS52YWx1ZSwgbWUuc2NvcGUpKSB7XG4gICAgICAgICAgICAgICAgLy8gI1tiZWdpbl0gZXJyb3JcbiAgICAgICAgICAgICAgICB3YXJuU2V0SFRNTChtZS5lbCk7XG4gICAgICAgICAgICAgICAgLy8gI1tlbmRdXG4gICAgICAgICAgICAgICAgbWUuZWwuaW5uZXJIVE1MID0gZXZhbEV4cHIoaHRtbERpcmVjdGl2ZS52YWx1ZSwgbWUuc2NvcGUsIG1lLm93bmVyKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZWxlbWVudFVwZGF0ZUNoaWxkcmVuKHRoaXMsIGNoYW5nZXMpO1xuICAgIH1cbn07XG5cbi8qKlxuICog5omn6KGM5a6M5oiQYXR0YWNoZWTnirbmgIHnmoTooYzkuLpcbiAqL1xuRWxlbWVudC5wcm90b3R5cGUuX2F0dGFjaGVkID0gZWxlbWVudE93bkF0dGFjaGVkO1xuXG4vLyBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBFbGVtZW50O1xuXG5cbi8qKlxuICogQGZpbGUg6ZSA5q+B6IqC54K577yM5riF56m66IqC54K55LiK55qE5peg55So5oiQ5ZGYXG4gKiBAYXV0aG9yIGVycm9ycmlrKGVycm9ycmlrQGdtYWlsLmNvbSlcbiAqL1xuXG5cbi8qKlxuICog6ZSA5q+B6IqC54K5XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG5vZGUg6IqC54K55a+56LGhXG4gKi9cbmZ1bmN0aW9uIG5vZGVEaXNwb3NlKG5vZGUpIHtcbiAgICBub2RlLmVsID0gbnVsbDtcbiAgICBub2RlLnNlbCA9IG51bGw7XG4gICAgbm9kZS5vd25lciA9IG51bGw7XG4gICAgbm9kZS5zY29wZSA9IG51bGw7XG4gICAgbm9kZS5hTm9kZSA9IG51bGw7XG4gICAgbm9kZS5wYXJlbnQgPSBudWxsO1xuICAgIG5vZGUucGFyZW50Q29tcG9uZW50ID0gbnVsbDtcbiAgICBub2RlLmNoaWxkcmVuID0gbnVsbDtcblxuICAgIGlmIChub2RlLl90b1BoYXNlKSB7XG4gICAgICAgIG5vZGUuX3RvUGhhc2UoJ2Rpc3Bvc2VkJyk7XG4gICAgfVxuXG4gICAgaWYgKG5vZGUuX29uZGlzcG9zZWQpIHtcbiAgICAgICAgbm9kZS5fb25kaXNwb3NlZCgpO1xuICAgIH1cbn1cblxuLy8gZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gbm9kZURpc3Bvc2U7XG5cblxuLyoqXG4gKiBAZmlsZSDpgJrov4fnu4Tku7blj43op6PliJvlu7roioLngrnnmoTlt6XljoLmlrnms5VcbiAqIEBhdXRob3IgZXJyb3JyaWsoZXJyb3JyaWtAZ21haWwuY29tKVxuICovXG5cbi8vIHZhciBob3RUYWdzID0gcmVxdWlyZSgnLi4vYnJvd3Nlci9ob3QtdGFncycpO1xuLy8gdmFyIE5vZGVUeXBlID0gcmVxdWlyZSgnLi9ub2RlLXR5cGUnKTtcbi8vIHZhciBUZXh0Tm9kZSA9IHJlcXVpcmUoJy4vdGV4dC1ub2RlJyk7XG4vLyB2YXIgRWxlbWVudCA9IHJlcXVpcmUoJy4vZWxlbWVudCcpO1xuLy8gdmFyIFNsb3ROb2RlID0gcmVxdWlyZSgnLi9zbG90LW5vZGUnKTtcbi8vIHZhciBGb3JOb2RlID0gcmVxdWlyZSgnLi9mb3Itbm9kZScpO1xuLy8gdmFyIElmTm9kZSA9IHJlcXVpcmUoJy4vaWYtbm9kZScpO1xuLy8gdmFyIFRlbXBsYXRlTm9kZSA9IHJlcXVpcmUoJy4vdGVtcGxhdGUtbm9kZScpO1xuXG4vLyAjW2JlZ2luXSByZXZlcnNlXG4vKipcbiAqIOmAmui/h+e7hOS7tuWPjeino+WIm+W7uuiKgueCuVxuICpcbiAqIEBwYXJhbSB7QU5vZGV9IGFOb2RlIOaKveixoeiKgueCuVxuICogQHBhcmFtIHtET01DaGlsZHJlbldhbGtlcn0gcmV2ZXJzZVdhbGtlciDlrZDlhYPntKDpgY3ljoblr7nosaFcbiAqIEBwYXJhbSB7Tm9kZX0gcGFyZW50IOeItuS6suiKgueCuVxuICogQHBhcmFtIHtNb2RlbD19IHNjb3BlIOaJgOWxnuaVsOaNrueOr+Wig1xuICogQHJldHVybiB7Tm9kZX1cbiAqL1xuZnVuY3Rpb24gY3JlYXRlUmV2ZXJzZU5vZGUoYU5vZGUsIHJldmVyc2VXYWxrZXIsIHBhcmVudCwgc2NvcGUpIHtcbiAgICB2YXIgcGFyZW50SXNDb21wb25lbnQgPSBwYXJlbnQubm9kZVR5cGUgPT09IE5vZGVUeXBlLkNNUFQ7XG4gICAgdmFyIG93bmVyID0gcGFyZW50SXNDb21wb25lbnQgPyBwYXJlbnQgOiAocGFyZW50LmNoaWxkT3duZXIgfHwgcGFyZW50Lm93bmVyKTtcbiAgICBzY29wZSA9IHNjb3BlIHx8IChwYXJlbnRJc0NvbXBvbmVudCA/IHBhcmVudC5kYXRhIDogKHBhcmVudC5jaGlsZFNjb3BlIHx8IHBhcmVudC5zY29wZSkpO1xuXG4gICAgaWYgKGFOb2RlLnRleHRFeHByKSB7XG4gICAgICAgIHJldHVybiBuZXcgVGV4dE5vZGUoYU5vZGUsIG93bmVyLCBzY29wZSwgcGFyZW50LCByZXZlcnNlV2Fsa2VyKTtcbiAgICB9XG5cbiAgICBpZiAoYU5vZGUuZGlyZWN0aXZlc1snaWYnXSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGRvdC1ub3RhdGlvblxuICAgICAgICByZXR1cm4gbmV3IElmTm9kZShhTm9kZSwgb3duZXIsIHNjb3BlLCBwYXJlbnQsIHJldmVyc2VXYWxrZXIpO1xuICAgIH1cblxuICAgIGlmIChhTm9kZS5kaXJlY3RpdmVzWydmb3InXSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGRvdC1ub3RhdGlvblxuICAgICAgICByZXR1cm4gbmV3IEZvck5vZGUoYU5vZGUsIG93bmVyLCBzY29wZSwgcGFyZW50LCByZXZlcnNlV2Fsa2VyKTtcbiAgICB9XG5cbiAgICBpZiAoaG90VGFnc1thTm9kZS50YWdOYW1lXSkge1xuICAgICAgICByZXR1cm4gbmV3IEVsZW1lbnQoYU5vZGUsIG93bmVyLCBzY29wZSwgcGFyZW50LCByZXZlcnNlV2Fsa2VyKTtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKGFOb2RlLnRhZ05hbWUpIHtcbiAgICAgICAgY2FzZSAnc2xvdCc6XG4gICAgICAgICAgICByZXR1cm4gbmV3IFNsb3ROb2RlKGFOb2RlLCBvd25lciwgc2NvcGUsIHBhcmVudCwgcmV2ZXJzZVdhbGtlcik7XG5cbiAgICAgICAgY2FzZSAndGVtcGxhdGUnOlxuICAgICAgICAgICAgcmV0dXJuIG5ldyBUZW1wbGF0ZU5vZGUoYU5vZGUsIG93bmVyLCBzY29wZSwgcGFyZW50LCByZXZlcnNlV2Fsa2VyKTtcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdmFyIENvbXBvbmVudFR5cGUgPSBvd25lci5nZXRDb21wb25lbnRUeXBlKGFOb2RlKTtcbiAgICAgICAgICAgIGlmIChDb21wb25lbnRUeXBlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb21wb25lbnRUeXBlKHtcbiAgICAgICAgICAgICAgICAgICAgYU5vZGU6IGFOb2RlLFxuICAgICAgICAgICAgICAgICAgICBvd25lcjogb3duZXIsXG4gICAgICAgICAgICAgICAgICAgIHNjb3BlOiBzY29wZSxcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50OiBwYXJlbnQsXG4gICAgICAgICAgICAgICAgICAgIHN1YlRhZzogYU5vZGUudGFnTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgcmV2ZXJzZVdhbGtlcjogcmV2ZXJzZVdhbGtlclxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBuZXcgRWxlbWVudChhTm9kZSwgb3duZXIsIHNjb3BlLCBwYXJlbnQsIHJldmVyc2VXYWxrZXIpO1xufVxuLy8gI1tlbmRdXG5cbi8vIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZVJldmVyc2VOb2RlO1xuXG5cbi8qKlxuICogQGZpbGUg6ZSA5q+B6YeK5pS+5YWD57Sg55qE5a2Q5YWD57SgXG4gKiBAYXV0aG9yIGVycm9ycmlrKGVycm9ycmlrQGdtYWlsLmNvbSlcbiAqL1xuXG4vKipcbiAqIOmUgOavgemHiuaUvuWFg+e0oOeahOWtkOWFg+e0oFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBlbGVtZW50IOWFg+e0oOiKgueCuVxuICogQHBhcmFtIHtib29sZWFuPX0gbm9EZXRhY2gg5piv5ZCm5LiN6KaB5oqK6IqC54K55LuOZG9t56e76ZmkXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBub1RyYW5zaXRpb24g5piv5ZCm5LiN5pi+56S66L+H5rih5Yqo55S75pWI5p6cXG4gKi9cbmZ1bmN0aW9uIGVsZW1lbnREaXNwb3NlQ2hpbGRyZW4oZWxlbWVudCwgbm9EZXRhY2gsIG5vVHJhbnNpdGlvbikge1xuICAgIHZhciBjaGlsZHJlbiA9IGVsZW1lbnQuY2hpbGRyZW47XG4gICAgdmFyIGxlbiA9IGNoaWxkcmVuICYmIGNoaWxkcmVuLmxlbmd0aDtcbiAgICB3aGlsZSAobGVuLS0pIHtcbiAgICAgICAgY2hpbGRyZW5bbGVuXS5kaXNwb3NlKG5vRGV0YWNoLCBub1RyYW5zaXRpb24pO1xuICAgIH1cbn1cblxuLy8gZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZWxlbWVudERpc3Bvc2VDaGlsZHJlbjtcblxuXG4vKipcbiAqIEBmaWxlIOabtOaWsOWFg+e0oOeahOWtkOWFg+e0oOinhuWbvlxuICogQGF1dGhvciBlcnJvcnJpayhlcnJvcnJpa0BnbWFpbC5jb20pXG4gKi9cblxuXG4vKipcbiAqIOabtOaWsOWFg+e0oOeahOWtkOWFg+e0oOinhuWbvlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBlbGVtZW50IOimgeabtOaWsOeahOWFg+e0oFxuICogQHBhcmFtIHtBcnJheX0gY2hhbmdlcyDmlbDmja7lj5jljJbkv6Hmga9cbiAqL1xuZnVuY3Rpb24gZWxlbWVudFVwZGF0ZUNoaWxkcmVuKGVsZW1lbnQsIGNoYW5nZXMpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IGVsZW1lbnQuY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGVsZW1lbnQuY2hpbGRyZW5baV0uX3VwZGF0ZShjaGFuZ2VzKTtcbiAgICB9XG59XG5cbi8vIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGVsZW1lbnRVcGRhdGVDaGlsZHJlbjtcblxuXG4vKipcbiAqIEBmaWxlIOS9v+WFg+e0oOiKgueCueWIsOi+vuebuOW6lOeahOeUn+WRveWRqOacn1xuICogQGF1dGhvciBlcnJvcnJpayhlcnJvcnJpa0BnbWFpbC5jb20pXG4gKi9cblxuXG4vLyB2YXIgTGlmZUN5Y2xlID0gcmVxdWlyZSgnLi9saWZlLWN5Y2xlJyk7XG5cbi8qKlxuICog5L2/5YWD57Sg6IqC54K55Yiw6L6+55u45bqU55qE55Sf5ZG95ZGo5pyfXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUg55Sf5ZG95ZGo5pyf5ZCN56ewXG4gKi9cbmZ1bmN0aW9uIGVsZW1lbnRPd25Ub1BoYXNlKG5hbWUpIHtcbiAgICB0aGlzLmxpZmVDeWNsZSA9IExpZmVDeWNsZVtuYW1lXSB8fCB0aGlzLmxpZmVDeWNsZTtcbn1cblxuLy8gZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZWxlbWVudE93blRvUGhhc2U7XG5cblxuLyoqXG4gKiBAZmlsZSDliJvlu7roioLngrnnmoTlt6XljoLmlrnms5VcbiAqIEBhdXRob3IgZXJyb3JyaWsoZXJyb3JyaWtAZ21haWwuY29tKVxuICovXG5cbi8vIHZhciBob3RUYWdzID0gcmVxdWlyZSgnLi4vYnJvd3Nlci9ob3QtdGFncycpO1xuLy8gdmFyIE5vZGVUeXBlID0gcmVxdWlyZSgnLi9ub2RlLXR5cGUnKTtcbi8vIHZhciBUZXh0Tm9kZSA9IHJlcXVpcmUoJy4vdGV4dC1ub2RlJyk7XG4vLyB2YXIgRWxlbWVudCA9IHJlcXVpcmUoJy4vZWxlbWVudCcpO1xuLy8gdmFyIFNsb3ROb2RlID0gcmVxdWlyZSgnLi9zbG90LW5vZGUnKTtcbi8vIHZhciBGb3JOb2RlID0gcmVxdWlyZSgnLi9mb3Itbm9kZScpO1xuLy8gdmFyIElmTm9kZSA9IHJlcXVpcmUoJy4vaWYtbm9kZScpO1xuLy8gdmFyIFRlbXBsYXRlTm9kZSA9IHJlcXVpcmUoJy4vdGVtcGxhdGUtbm9kZScpO1xuXG5cbi8qKlxuICog5Yib5bu66IqC54K5XG4gKlxuICogQHBhcmFtIHtBTm9kZX0gYU5vZGUg5oq96LGh6IqC54K5XG4gKiBAcGFyYW0ge05vZGV9IHBhcmVudCDniLbkurLoioLngrlcbiAqIEBwYXJhbSB7TW9kZWw9fSBzY29wZSDmiYDlsZ7mlbDmja7njq/looNcbiAqIEByZXR1cm4ge05vZGV9XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZU5vZGUoYU5vZGUsIHBhcmVudCwgc2NvcGUpIHtcbiAgICB2YXIgcGFyZW50SXNDb21wb25lbnQgPSBwYXJlbnQubm9kZVR5cGUgPT09IE5vZGVUeXBlLkNNUFQ7XG4gICAgdmFyIG93bmVyID0gcGFyZW50SXNDb21wb25lbnQgPyBwYXJlbnQgOiAocGFyZW50LmNoaWxkT3duZXIgfHwgcGFyZW50Lm93bmVyKTtcbiAgICBzY29wZSA9IHNjb3BlIHx8IChwYXJlbnRJc0NvbXBvbmVudCA/IHBhcmVudC5kYXRhIDogKHBhcmVudC5jaGlsZFNjb3BlIHx8IHBhcmVudC5zY29wZSkpO1xuXG5cbiAgICBpZiAoYU5vZGUudGV4dEV4cHIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBUZXh0Tm9kZShhTm9kZSwgb3duZXIsIHNjb3BlLCBwYXJlbnQpO1xuICAgIH1cblxuICAgIGlmIChhTm9kZS5kaXJlY3RpdmVzWydpZiddKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZG90LW5vdGF0aW9uXG4gICAgICAgIHJldHVybiBuZXcgSWZOb2RlKGFOb2RlLCBvd25lciwgc2NvcGUsIHBhcmVudCk7XG4gICAgfVxuXG4gICAgaWYgKGFOb2RlLmRpcmVjdGl2ZXNbJ2ZvciddKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZG90LW5vdGF0aW9uXG4gICAgICAgIHJldHVybiBuZXcgRm9yTm9kZShhTm9kZSwgb3duZXIsIHNjb3BlLCBwYXJlbnQpO1xuICAgIH1cblxuICAgIGlmIChob3RUYWdzW2FOb2RlLnRhZ05hbWVdKSB7XG4gICAgICAgIHJldHVybiBuZXcgRWxlbWVudChhTm9kZSwgb3duZXIsIHNjb3BlLCBwYXJlbnQpO1xuICAgIH1cblxuXG5cbiAgICBzd2l0Y2ggKGFOb2RlLnRhZ05hbWUpIHtcbiAgICAgICAgY2FzZSAnc2xvdCc6XG4gICAgICAgICAgICByZXR1cm4gbmV3IFNsb3ROb2RlKGFOb2RlLCBvd25lciwgc2NvcGUsIHBhcmVudCk7XG5cbiAgICAgICAgY2FzZSAndGVtcGxhdGUnOlxuICAgICAgICAgICAgcmV0dXJuIG5ldyBUZW1wbGF0ZU5vZGUoYU5vZGUsIG93bmVyLCBzY29wZSwgcGFyZW50KTtcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdmFyIENvbXBvbmVudFR5cGUgPSBvd25lci5nZXRDb21wb25lbnRUeXBlKGFOb2RlKTtcbiAgICAgICAgICAgIGlmIChDb21wb25lbnRUeXBlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb21wb25lbnRUeXBlKHtcbiAgICAgICAgICAgICAgICAgICAgYU5vZGU6IGFOb2RlLFxuICAgICAgICAgICAgICAgICAgICBvd25lcjogb3duZXIsXG4gICAgICAgICAgICAgICAgICAgIHNjb3BlOiBzY29wZSxcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50OiBwYXJlbnQsXG4gICAgICAgICAgICAgICAgICAgIHN1YlRhZzogYU5vZGUudGFnTmFtZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBuZXcgRWxlbWVudChhTm9kZSwgb3duZXIsIHNjb3BlLCBwYXJlbnQpO1xufVxuXG4vLyBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVOb2RlO1xuXG5cbi8qKlxuICogQGZpbGUg55Sf5oiQ5a2Q5YWD57SgXG4gKiBAYXV0aG9yIGVycm9ycmlrKGVycm9ycmlrQGdtYWlsLmNvbSlcbiAqL1xuXG4vLyB2YXIgY3JlYXRlTm9kZSA9IHJlcXVpcmUoJy4vY3JlYXRlLW5vZGUnKTtcblxuLyoqXG4gKiDnlJ/miJDlrZDlhYPntKBcbiAqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQg5YWD57SgXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBwYXJlbnRFbCDopoHmt7vliqDliLDnmoTniLblhYPntKBcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnTvvJ19IGJlZm9yZUVsIOimgea3u+WKoOWIsOWTquS4quWFg+e0oOS5i+WJjVxuICovXG5mdW5jdGlvbiBnZW5FbGVtZW50Q2hpbGRyZW4oZWxlbWVudCwgcGFyZW50RWwsIGJlZm9yZUVsKSB7XG4gICAgcGFyZW50RWwgPSBwYXJlbnRFbCB8fCBlbGVtZW50LmVsO1xuXG4gICAgdmFyIGFOb2RlQ2hpbGRyZW4gPSBlbGVtZW50LmFOb2RlLmNoaWxkcmVuO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYU5vZGVDaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgY2hpbGQgPSBjcmVhdGVOb2RlKGFOb2RlQ2hpbGRyZW5baV0sIGVsZW1lbnQpO1xuICAgICAgICBlbGVtZW50LmNoaWxkcmVuLnB1c2goY2hpbGQpO1xuICAgICAgICBjaGlsZC5hdHRhY2gocGFyZW50RWwsIGJlZm9yZUVsKTtcbiAgICB9XG59XG5cbi8vIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGdlbkVsZW1lbnRDaGlsZHJlbjtcblxuXG4vKipcbiAqIEBmaWxlIOWwhuayoeaciSByb290IOWPquaciSBjaGlsZHJlbiDnmoTlhYPntKAgYXR0YWNoIOWIsOmhtemdolxuICogQGF1dGhvciBlcnJvcnJpayhlcnJvcnJpa0BnbWFpbC5jb20pXG4gKi9cblxuXG4vLyB2YXIgaW5zZXJ0QmVmb3JlID0gcmVxdWlyZSgnLi4vYnJvd3Nlci9pbnNlcnQtYmVmb3JlJyk7XG4vLyB2YXIgZ2VuRWxlbWVudENoaWxkcmVuID0gcmVxdWlyZSgnLi9nZW4tZWxlbWVudC1jaGlsZHJlbicpO1xuXG5cbi8qKlxuICog5bCG5rKh5pyJIHJvb3Qg5Y+q5pyJIGNoaWxkcmVuIOeahOWFg+e0oCBhdHRhY2gg5Yiw6aG16Z2iXG4gKiDkuLvopoHnlKjkuo4gc2xvdCDlkowgdGVtcGxhdGVcbiAqXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBwYXJlbnRFbCDopoHmt7vliqDliLDnmoTniLblhYPntKBcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnTvvJ19IGJlZm9yZUVsIOimgea3u+WKoOWIsOWTquS4quWFg+e0oOS5i+WJjVxuICovXG5mdW5jdGlvbiBub2RlT3duT25seUNoaWxkcmVuQXR0YWNoKHBhcmVudEVsLCBiZWZvcmVFbCkge1xuICAgIHRoaXMuc2VsID0gZG9jdW1lbnQuY3JlYXRlQ29tbWVudCh0aGlzLmlkKTtcbiAgICBpbnNlcnRCZWZvcmUodGhpcy5zZWwsIHBhcmVudEVsLCBiZWZvcmVFbCk7XG5cbiAgICBnZW5FbGVtZW50Q2hpbGRyZW4odGhpcywgcGFyZW50RWwsIGJlZm9yZUVsKTtcblxuICAgIHRoaXMuZWwgPSBkb2N1bWVudC5jcmVhdGVDb21tZW50KHRoaXMuaWQpO1xuICAgIGluc2VydEJlZm9yZSh0aGlzLmVsLCBwYXJlbnRFbCwgYmVmb3JlRWwpO1xuXG4gICAgdGhpcy5fdG9QaGFzZSgnYXR0YWNoZWQnKTtcbn1cblxuLy8gZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gbm9kZU93bk9ubHlDaGlsZHJlbkF0dGFjaDtcblxuXG4vKipcbiAqIEBmaWxlIHNsb3Qg6IqC54K557G7XG4gKiBAYXV0aG9yIGVycm9ycmlrKGVycm9ycmlrQGdtYWlsLmNvbSlcbiAqL1xuXG4vLyB2YXIgZWFjaCA9IHJlcXVpcmUoJy4uL3V0aWwvZWFjaCcpO1xuLy8gdmFyIGd1aWQgPSByZXF1aXJlKCcuLi91dGlsL2d1aWQnKTtcbi8vIHZhciBjcmVhdGVBTm9kZSA9IHJlcXVpcmUoJy4uL3BhcnNlci9jcmVhdGUtYS1ub2RlJyk7XG4vLyB2YXIgRXhwclR5cGUgPSByZXF1aXJlKCcuLi9wYXJzZXIvZXhwci10eXBlJyk7XG4vLyB2YXIgY3JlYXRlQWNjZXNzb3IgPSByZXF1aXJlKCcuLi9wYXJzZXIvY3JlYXRlLWFjY2Vzc29yJyk7XG4vLyB2YXIgZXZhbEV4cHIgPSByZXF1aXJlKCcuLi9ydW50aW1lL2V2YWwtZXhwcicpO1xuLy8gdmFyIERhdGEgPSByZXF1aXJlKCcuLi9ydW50aW1lL2RhdGEnKTtcbi8vIHZhciBEYXRhQ2hhbmdlVHlwZSA9IHJlcXVpcmUoJy4uL3J1bnRpbWUvZGF0YS1jaGFuZ2UtdHlwZScpO1xuLy8gdmFyIGNoYW5nZUV4cHJDb21wYXJlID0gcmVxdWlyZSgnLi4vcnVudGltZS9jaGFuZ2UtZXhwci1jb21wYXJlJyk7XG4vLyB2YXIgaW5zZXJ0QmVmb3JlID0gcmVxdWlyZSgnLi4vYnJvd3Nlci9pbnNlcnQtYmVmb3JlJyk7XG4vLyB2YXIgTm9kZVR5cGUgPSByZXF1aXJlKCcuL25vZGUtdHlwZScpO1xuLy8gdmFyIExpZmVDeWNsZSA9IHJlcXVpcmUoJy4vbGlmZS1jeWNsZScpO1xuLy8gdmFyIGdldEFOb2RlUHJvcCA9IHJlcXVpcmUoJy4vZ2V0LWEtbm9kZS1wcm9wJyk7XG4vLyB2YXIgbm9kZURpc3Bvc2UgPSByZXF1aXJlKCcuL25vZGUtZGlzcG9zZScpO1xuLy8gdmFyIGNyZWF0ZVJldmVyc2VOb2RlID0gcmVxdWlyZSgnLi9jcmVhdGUtcmV2ZXJzZS1ub2RlJyk7XG4vLyB2YXIgZWxlbWVudERpc3Bvc2VDaGlsZHJlbiA9IHJlcXVpcmUoJy4vZWxlbWVudC1kaXNwb3NlLWNoaWxkcmVuJyk7XG4vLyB2YXIgZWxlbWVudFVwZGF0ZUNoaWxkcmVuID0gcmVxdWlyZSgnLi9lbGVtZW50LXVwZGF0ZS1jaGlsZHJlbicpO1xuLy8gdmFyIGVsZW1lbnRPd25Ub1BoYXNlID0gcmVxdWlyZSgnLi9lbGVtZW50LW93bi10by1waGFzZScpO1xuLy8gdmFyIG5vZGVPd25Pbmx5Q2hpbGRyZW5BdHRhY2ggPSByZXF1aXJlKCcuL25vZGUtb3duLW9ubHktY2hpbGRyZW4tYXR0YWNoJyk7XG5cblxuLyoqXG4gKiBzbG90IOiKgueCueexu1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhTm9kZSDmir3osaHoioLngrlcbiAqIEBwYXJhbSB7Q29tcG9uZW50fSBvd25lciDmiYDlsZ7nu4Tku7bnjq/looNcbiAqIEBwYXJhbSB7TW9kZWw9fSBzY29wZSDmiYDlsZ7mlbDmja7njq/looNcbiAqIEBwYXJhbSB7Tm9kZX0gcGFyZW50IOeItuS6suiKgueCuVxuICogQHBhcmFtIHtET01DaGlsZHJlbldhbGtlcj99IHJldmVyc2VXYWxrZXIg5a2Q5YWD57Sg6YGN5Y6G5a+56LGhXG4gKi9cbmZ1bmN0aW9uIFNsb3ROb2RlKGFOb2RlLCBvd25lciwgc2NvcGUsIHBhcmVudCwgcmV2ZXJzZVdhbGtlcikge1xuICAgIHZhciByZWFsQU5vZGUgPSBjcmVhdGVBTm9kZSgpO1xuICAgIHRoaXMuYU5vZGUgPSByZWFsQU5vZGU7XG4gICAgdGhpcy5vd25lciA9IG93bmVyO1xuICAgIHRoaXMuc2NvcGUgPSBzY29wZTtcbiAgICB0aGlzLnBhcmVudCA9IHBhcmVudDtcbiAgICB0aGlzLnBhcmVudENvbXBvbmVudCA9IHBhcmVudC5ub2RlVHlwZSA9PT0gTm9kZVR5cGUuQ01QVFxuICAgICAgICA/IHBhcmVudFxuICAgICAgICA6IHBhcmVudC5wYXJlbnRDb21wb25lbnQ7XG5cbiAgICB0aGlzLmlkID0gZ3VpZCgpO1xuXG4gICAgdGhpcy5saWZlQ3ljbGUgPSBMaWZlQ3ljbGUuc3RhcnQ7XG4gICAgdGhpcy5jaGlsZHJlbiA9IFtdO1xuXG4gICAgLy8gY2FsYyBzbG90IG5hbWVcbiAgICB0aGlzLm5hbWVCaW5kID0gZ2V0QU5vZGVQcm9wKGFOb2RlLCAnbmFtZScpO1xuICAgIGlmICh0aGlzLm5hbWVCaW5kKSB7XG4gICAgICAgIHRoaXMuaXNOYW1lZCA9IHRydWU7XG4gICAgICAgIHRoaXMubmFtZSA9IGV2YWxFeHByKHRoaXMubmFtZUJpbmQuZXhwciwgdGhpcy5zY29wZSwgdGhpcy5vd25lcik7XG4gICAgfVxuXG4gICAgLy8gY2FsYyBhTm9kZSBjaGlsZHJlblxuICAgIHZhciBnaXZlblNsb3RzID0gb3duZXIuZ2l2ZW5TbG90cztcbiAgICB2YXIgZ2l2ZW5DaGlsZHJlbjtcbiAgICBpZiAoZ2l2ZW5TbG90cykge1xuICAgICAgICBnaXZlbkNoaWxkcmVuID0gdGhpcy5pc05hbWVkID8gZ2l2ZW5TbG90cy5uYW1lZFt0aGlzLm5hbWVdIDogZ2l2ZW5TbG90cy5ub25hbWU7XG4gICAgfVxuXG4gICAgaWYgKGdpdmVuQ2hpbGRyZW4pIHtcbiAgICAgICAgdGhpcy5pc0luc2VydGVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZWFsQU5vZGUuY2hpbGRyZW4gPSBnaXZlbkNoaWxkcmVuIHx8IGFOb2RlLmNoaWxkcmVuLnNsaWNlKDApO1xuXG4gICAgdmFyIG1lID0gdGhpcztcblxuICAgIC8vIGNhbGMgc2NvcGVkIHNsb3QgdmFyc1xuICAgIHJlYWxBTm9kZS52YXJzID0gYU5vZGUudmFycztcbiAgICB2YXIgaW5pdERhdGEgPSB7fTtcbiAgICBlYWNoKHJlYWxBTm9kZS52YXJzLCBmdW5jdGlvbiAodmFySXRlbSkge1xuICAgICAgICBtZS5pc1Njb3BlZCA9IHRydWU7XG4gICAgICAgIGluaXREYXRhW3Zhckl0ZW0ubmFtZV0gPSBldmFsRXhwcih2YXJJdGVtLmV4cHIsIHNjb3BlLCBvd25lcik7XG4gICAgfSk7XG5cbiAgICAvLyBjaGlsZCBvd25lciAmIGNoaWxkIHNjb3BlXG4gICAgaWYgKHRoaXMuaXNJbnNlcnRlZCkge1xuICAgICAgICB0aGlzLmNoaWxkT3duZXIgPSBvd25lci5vd25lcjtcbiAgICAgICAgdGhpcy5jaGlsZFNjb3BlID0gb3duZXIuc2NvcGU7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaXNTY29wZWQpIHtcbiAgICAgICAgdGhpcy5jaGlsZFNjb3BlID0gbmV3IERhdGEoaW5pdERhdGEsIHRoaXMuY2hpbGRTY29wZSB8fCB0aGlzLnNjb3BlKTtcbiAgICB9XG5cblxuICAgIG93bmVyLnNsb3RDaGlsZHJlbi5wdXNoKHRoaXMpO1xuXG4gICAgLy8gI1tiZWdpbl0gcmV2ZXJzZVxuICAgIGlmIChyZXZlcnNlV2Fsa2VyKSB7XG5cbiAgICAgICAgdGhpcy5zZWwgPSBkb2N1bWVudC5jcmVhdGVDb21tZW50KHRoaXMuaWQpO1xuICAgICAgICBpbnNlcnRCZWZvcmUodGhpcy5zZWwsIHJldmVyc2VXYWxrZXIudGFyZ2V0LCByZXZlcnNlV2Fsa2VyLmN1cnJlbnQpO1xuXG4gICAgICAgIGVhY2godGhpcy5hTm9kZS5jaGlsZHJlbiwgZnVuY3Rpb24gKGFOb2RlQ2hpbGQpIHtcbiAgICAgICAgICAgIG1lLmNoaWxkcmVuLnB1c2goY3JlYXRlUmV2ZXJzZU5vZGUoYU5vZGVDaGlsZCwgcmV2ZXJzZVdhbGtlciwgbWUpKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5lbCA9IGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQodGhpcy5pZCk7XG4gICAgICAgIGluc2VydEJlZm9yZSh0aGlzLmVsLCByZXZlcnNlV2Fsa2VyLnRhcmdldCwgcmV2ZXJzZVdhbGtlci5jdXJyZW50KTtcblxuICAgICAgICB0aGlzLl90b1BoYXNlKCdhdHRhY2hlZCcpO1xuICAgIH1cbiAgICAvLyAjW2VuZF1cbn1cblxuU2xvdE5vZGUucHJvdG90eXBlLm5vZGVUeXBlID0gTm9kZVR5cGUuU0xPVDtcblxuLyoqXG4gKiDplIDmr4Hph4rmlL4gc2xvdFxuICpcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG5vRGV0YWNoIOaYr+WQpuS4jeimgeaKiuiKgueCueS7jmRvbeenu+mZpFxuICogQHBhcmFtIHtib29sZWFuPX0gbm9UcmFuc2l0aW9uIOaYr+WQpuS4jeaYvuekuui/h+a4oeWKqOeUu+aViOaenFxuICovXG5TbG90Tm9kZS5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uIChub0RldGFjaCwgbm9UcmFuc2l0aW9uKSB7XG4gICAgdGhpcy5jaGlsZE93bmVyID0gbnVsbDtcbiAgICB0aGlzLmNoaWxkU2NvcGUgPSBudWxsO1xuXG4gICAgZWxlbWVudERpc3Bvc2VDaGlsZHJlbih0aGlzLCBub0RldGFjaCwgbm9UcmFuc2l0aW9uKTtcbiAgICBub2RlRGlzcG9zZSh0aGlzKTtcbn07XG5cblNsb3ROb2RlLnByb3RvdHlwZS5hdHRhY2ggPSBub2RlT3duT25seUNoaWxkcmVuQXR0YWNoO1xuU2xvdE5vZGUucHJvdG90eXBlLl90b1BoYXNlID0gZWxlbWVudE93blRvUGhhc2U7XG5cbi8qKlxuICog6KeG5Zu+5pu05paw5Ye95pWwXG4gKlxuICogQHBhcmFtIHtBcnJheX0gY2hhbmdlcyDmlbDmja7lj5jljJbkv6Hmga9cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IGlzRnJvbU91dGVyIOWPmOWMluS/oeaBr+aYr+WQpuadpea6kOS6jueItue7hOS7tuS5i+WklueahOe7hOS7tlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuU2xvdE5vZGUucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoY2hhbmdlcywgaXNGcm9tT3V0ZXIpIHtcbiAgICB2YXIgbWUgPSB0aGlzO1xuXG4gICAgaWYgKHRoaXMubmFtZUJpbmQgJiYgZXZhbEV4cHIodGhpcy5uYW1lQmluZC5leHByLCB0aGlzLnNjb3BlLCB0aGlzLm93bmVyKSAhPT0gbWUubmFtZSkge1xuICAgICAgICB0aGlzLm93bmVyLl9ub3RpZnlOZWVkUmVsb2FkKCk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoaXNGcm9tT3V0ZXIpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNJbnNlcnRlZCkge1xuICAgICAgICAgICAgZWxlbWVudFVwZGF0ZUNoaWxkcmVuKHRoaXMsIGNoYW5nZXMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpZiAodGhpcy5pc1Njb3BlZCkge1xuICAgICAgICAgICAgZWFjaCh0aGlzLmFOb2RlLnZhcnMsIGZ1bmN0aW9uICh2YXJJdGVtKSB7XG4gICAgICAgICAgICAgICAgbWUuY2hpbGRTY29wZS5zZXQodmFySXRlbS5uYW1lLCBldmFsRXhwcih2YXJJdGVtLmV4cHIsIG1lLnNjb3BlLCBtZS5vd25lcikpO1xuICAgICAgICAgICAgfSk7XG5cblxuICAgICAgICAgICAgdmFyIHNjb3BlZENoYW5nZXMgPSBbXTtcbiAgICAgICAgICAgIGVhY2goY2hhbmdlcywgZnVuY3Rpb24gKGNoYW5nZSkge1xuICAgICAgICAgICAgICAgIGlmICghbWUuaXNJbnNlcnRlZCkge1xuICAgICAgICAgICAgICAgICAgICBzY29wZWRDaGFuZ2VzLnB1c2goY2hhbmdlKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBlYWNoKG1lLmFOb2RlLnZhcnMsIGZ1bmN0aW9uICh2YXJJdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuYW1lID0gdmFySXRlbS5uYW1lO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmVsYXRpb24gPSBjaGFuZ2VFeHByQ29tcGFyZShjaGFuZ2UuZXhwciwgdmFySXRlbS5leHByLCBtZS5zY29wZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlbGF0aW9uIDwgMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoYW5nZS50eXBlICE9PSBEYXRhQ2hhbmdlVHlwZS5TUExJQ0UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlZENoYW5nZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogRGF0YUNoYW5nZVR5cGUuU0VULFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHI6IGNyZWF0ZUFjY2Vzc29yKFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3R5cGU6IEV4cHJUeXBlLlNUUklORywgdmFsdWU6IG5hbWV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IG1lLmNoaWxkU2NvcGUuZ2V0KG5hbWUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbjogY2hhbmdlLm9wdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAocmVsYXRpb24gPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlZENoYW5nZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwcjogY3JlYXRlQWNjZXNzb3IoW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dHlwZTogRXhwclR5cGUuU1RSSU5HLCB2YWx1ZTogbmFtZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBEYXRhQ2hhbmdlVHlwZS5TUExJQ0UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXg6IGNoYW5nZS5pbmRleCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGVDb3VudDogY2hhbmdlLmRlbGV0ZUNvdW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBjaGFuZ2UudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zZXJ0aW9uczogY2hhbmdlLmluc2VydGlvbnMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uOiBjaGFuZ2Uub3B0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGVsZW1lbnRVcGRhdGVDaGlsZHJlbih0aGlzLCBzY29wZWRDaGFuZ2VzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghdGhpcy5pc0luc2VydGVkKSB7XG4gICAgICAgICAgICBlbGVtZW50VXBkYXRlQ2hpbGRyZW4odGhpcywgY2hhbmdlcyk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG4vLyBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBTbG90Tm9kZTtcblxuXG4vKipcbiAqIEBmaWxlIOWkjeWItuaMh+S7pOmbhuWQiOWvueixoVxuICogQGF1dGhvciBlcnJvcnJpayhlcnJvcnJpa0BnbWFpbC5jb20pXG4gKi9cblxuLyoqXG4gKiDlpI3liLbmjIfku6Tpm4blkIjlr7nosaFcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIOimgeWkjeWItueahOaMh+S7pOmbhuWQiOWvueixoVxuICogQHBhcmFtIHtPYmplY3Q9fSBleGNsdWRlcyDpnIDopoHmjpLpmaTnmoRrZXnpm4blkIhcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuZnVuY3Rpb24gY2xvbmVEaXJlY3RpdmVzKHNvdXJjZSwgZXhjbHVkZXMpIHtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgZXhjbHVkZXMgPSBleGNsdWRlcyB8fCB7fTtcblxuICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKCFleGNsdWRlc1trZXldKSB7XG4gICAgICAgICAgICByZXN1bHRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLy8gZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gY2xvbmVEaXJlY3RpdmVzO1xuXG5cbi8qKlxuICogQGZpbGUg566A5Y2V5omn6KGM6ZSA5q+B6IqC54K555qE6KGM5Li6XG4gKiBAYXV0aG9yIGVycm9ycmlrKGVycm9ycmlrQGdtYWlsLmNvbSlcbiAqL1xuXG4vLyB2YXIgcmVtb3ZlRWwgPSByZXF1aXJlKCcuLi9icm93c2VyL3JlbW92ZS1lbCcpO1xuLy8gdmFyIG5vZGVEaXNwb3NlID0gcmVxdWlyZSgnLi9ub2RlLWRpc3Bvc2UnKTtcbi8vIHZhciBlbGVtZW50RGlzcG9zZUNoaWxkcmVuID0gcmVxdWlyZSgnLi9lbGVtZW50LWRpc3Bvc2UtY2hpbGRyZW4nKTtcblxuLyoqXG4gKiDnroDljZXmiafooYzplIDmr4HoioLngrnnmoTooYzkuLpcbiAqXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBub0RldGFjaCDmmK/lkKbkuI3opoHmioroioLngrnku45kb23np7vpmaRcbiAqL1xuZnVuY3Rpb24gbm9kZU93blNpbXBsZURpc3Bvc2Uobm9EZXRhY2gpIHtcbiAgICBlbGVtZW50RGlzcG9zZUNoaWxkcmVuKHRoaXMsIG5vRGV0YWNoLCAxKTtcblxuICAgIGlmICghbm9EZXRhY2gpIHtcbiAgICAgICAgcmVtb3ZlRWwodGhpcy5lbCk7XG4gICAgfVxuXG4gICAgbm9kZURpc3Bvc2UodGhpcyk7XG59XG5cbi8vIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IG5vZGVPd25TaW1wbGVEaXNwb3NlO1xuXG5cbi8qKlxuICogQGZpbGUg5Yib5bu66IqC54K55a+55bqU55qEIHN0dW1wIGNvbW1lbnQg5YWD57SgXG4gKiBAYXV0aG9yIGVycm9ycmlrKGVycm9ycmlrQGdtYWlsLmNvbSlcbiAqL1xuXG5cblxuLyoqXG4gKiDliJvlu7roioLngrnlr7nlupTnmoQgc3R1bXAgY29tbWVudCDkuLvlhYPntKBcbiAqL1xuZnVuY3Rpb24gbm9kZU93bkNyZWF0ZVN0dW1wKCkge1xuICAgIHRoaXMuZWwgPSB0aGlzLmVsIHx8IGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQodGhpcy5pZCk7XG59XG5cbi8vIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IG5vZGVPd25DcmVhdGVTdHVtcDtcblxuXG4vKipcbiAqIEBmaWxlIGZvciDmjIfku6ToioLngrnnsbtcbiAqIEBhdXRob3IgZXJyb3JyaWsoZXJyb3JyaWtAZ21haWwuY29tKVxuICovXG5cbi8vIHZhciBpbmhlcml0cyA9IHJlcXVpcmUoJy4uL3V0aWwvaW5oZXJpdHMnKTtcbi8vIHZhciBlYWNoID0gcmVxdWlyZSgnLi4vdXRpbC9lYWNoJyk7XG4vLyB2YXIgZ3VpZCA9IHJlcXVpcmUoJy4uL3V0aWwvZ3VpZCcpO1xuLy8gdmFyIGNyZWF0ZUFOb2RlID0gcmVxdWlyZSgnLi4vcGFyc2VyL2NyZWF0ZS1hLW5vZGUnKTtcbi8vIHZhciBFeHByVHlwZSA9IHJlcXVpcmUoJy4uL3BhcnNlci9leHByLXR5cGUnKTtcbi8vIHZhciBwYXJzZUV4cHIgPSByZXF1aXJlKCcuLi9wYXJzZXIvcGFyc2UtZXhwcicpO1xuLy8gdmFyIGNyZWF0ZUFjY2Vzc29yID0gcmVxdWlyZSgnLi4vcGFyc2VyL2NyZWF0ZS1hY2Nlc3NvcicpO1xuLy8gdmFyIGNsb25lRGlyZWN0aXZlcyA9IHJlcXVpcmUoJy4uL3BhcnNlci9jbG9uZS1kaXJlY3RpdmVzJyk7XG4vLyB2YXIgRGF0YSA9IHJlcXVpcmUoJy4uL3J1bnRpbWUvZGF0YScpO1xuLy8gdmFyIERhdGFDaGFuZ2VUeXBlID0gcmVxdWlyZSgnLi4vcnVudGltZS9kYXRhLWNoYW5nZS10eXBlJyk7XG4vLyB2YXIgY2hhbmdlRXhwckNvbXBhcmUgPSByZXF1aXJlKCcuLi9ydW50aW1lL2NoYW5nZS1leHByLWNvbXBhcmUnKTtcbi8vIHZhciBldmFsRXhwciA9IHJlcXVpcmUoJy4uL3J1bnRpbWUvZXZhbC1leHByJyk7XG4vLyB2YXIgY2hhbmdlc0lzSW5EYXRhUmVmID0gcmVxdWlyZSgnLi4vcnVudGltZS9jaGFuZ2VzLWlzLWluLWRhdGEtcmVmJyk7XG4vLyB2YXIgcmVtb3ZlRWwgPSByZXF1aXJlKCcuLi9icm93c2VyL3JlbW92ZS1lbCcpO1xuLy8gdmFyIGluc2VydEJlZm9yZSA9IHJlcXVpcmUoJy4uL2Jyb3dzZXIvaW5zZXJ0LWJlZm9yZScpO1xuLy8gdmFyIExpZmVDeWNsZSA9IHJlcXVpcmUoJy4vbGlmZS1jeWNsZScpO1xuLy8gdmFyIE5vZGVUeXBlID0gcmVxdWlyZSgnLi9ub2RlLXR5cGUnKTtcbi8vIHZhciBjcmVhdGVOb2RlID0gcmVxdWlyZSgnLi9jcmVhdGUtbm9kZScpO1xuLy8gdmFyIGNyZWF0ZVJldmVyc2VOb2RlID0gcmVxdWlyZSgnLi9jcmVhdGUtcmV2ZXJzZS1ub2RlJyk7XG4vLyB2YXIgbm9kZU93blNpbXBsZURpc3Bvc2UgPSByZXF1aXJlKCcuL25vZGUtb3duLXNpbXBsZS1kaXNwb3NlJyk7XG4vLyB2YXIgbm9kZU93bkNyZWF0ZVN0dW1wID0gcmVxdWlyZSgnLi9ub2RlLW93bi1jcmVhdGUtc3R1bXAnKTtcbi8vIHZhciBlbGVtZW50RGlzcG9zZUNoaWxkcmVuID0gcmVxdWlyZSgnLi9lbGVtZW50LWRpc3Bvc2UtY2hpbGRyZW4nKTtcbi8vIHZhciBkYXRhQ2FjaGUgPSByZXF1aXJlKCcuLi9ydW50aW1lL2RhdGEtY2FjaGUnKTtcblxuXG4vKipcbiAqIOW+queOr+mhueeahOaVsOaNruWuueWZqOexu1xuICpcbiAqIEBpbm5lclxuICogQGNsYXNzXG4gKiBAcGFyYW0ge09iamVjdH0gZm9yRWxlbWVudCBmb3LlhYPntKDlr7nosaFcbiAqIEBwYXJhbSB7Kn0gaXRlbSDlvZPliY3pobnnmoTmlbDmja5cbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCDlvZPliY3pobnnmoTntKLlvJVcbiAqL1xuZnVuY3Rpb24gRm9ySXRlbURhdGEoZm9yRWxlbWVudCwgaXRlbSwgaW5kZXgpIHtcbiAgICB0aGlzLmlkID0gZ3VpZCgpO1xuICAgIHRoaXMucGFyZW50ID0gZm9yRWxlbWVudC5zY29wZTtcbiAgICB0aGlzLnJhdyA9IHt9O1xuICAgIHRoaXMubGlzdGVuZXJzID0gW107XG5cbiAgICB0aGlzLmRpcmVjdGl2ZSA9IGZvckVsZW1lbnQuYU5vZGUuZGlyZWN0aXZlc1snZm9yJ107IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZG90LW5vdGF0aW9uXG4gICAgdGhpcy5yYXdbdGhpcy5kaXJlY3RpdmUuaXRlbS5yYXddID0gaXRlbTtcbiAgICB0aGlzLnJhd1t0aGlzLmRpcmVjdGl2ZS5pbmRleC5yYXddID0gaW5kZXg7XG59XG5cbi8qKlxuICog5bCG5pWw5o2u5pON5L2c55qE6KGo6L6+5byP77yM6L2s5o2i5oiQ5Li65a+5cGFyZW505pWw5o2u5pON5L2c55qE6KGo6L6+5byPXG4gKiDkuLvopoHmmK/lr7lpdGVt5ZKMaW5kZXjov5vooYzlpITnkIZcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZXhwciDooajovr7lvI9cbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuRm9ySXRlbURhdGEucHJvdG90eXBlLmV4cHJSZXNvbHZlID0gZnVuY3Rpb24gKGV4cHIpIHtcbiAgICB2YXIgZGlyZWN0aXZlID0gdGhpcy5kaXJlY3RpdmU7XG4gICAgdmFyIG1lID0gdGhpcztcblxuICAgIGZ1bmN0aW9uIHJlc29sdmVJdGVtKGV4cHIpIHtcbiAgICAgICAgaWYgKGV4cHIudHlwZSA9PT0gRXhwclR5cGUuQUNDRVNTT1JcbiAgICAgICAgICAgICYmIGV4cHIucGF0aHNbMF0udmFsdWUgPT09IGRpcmVjdGl2ZS5pdGVtLnBhdGhzWzBdLnZhbHVlXG4gICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUFjY2Vzc29yKFxuICAgICAgICAgICAgICAgIGRpcmVjdGl2ZS52YWx1ZS5wYXRocy5jb25jYXQoXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IEV4cHJUeXBlLk5VTUJFUixcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBtZS5nZXQoZGlyZWN0aXZlLmluZGV4KVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBleHByLnBhdGhzLnNsaWNlKDEpXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBleHByO1xuICAgIH1cblxuICAgIGV4cHIgPSByZXNvbHZlSXRlbShleHByKTtcblxuICAgIHZhciByZXNvbHZlZFBhdGhzID0gW107XG5cbiAgICBlYWNoKGV4cHIucGF0aHMsIGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHJlc29sdmVkUGF0aHMucHVzaChcbiAgICAgICAgICAgIGl0ZW0udHlwZSA9PT0gRXhwclR5cGUuQUNDRVNTT1JcbiAgICAgICAgICAgICAgICAmJiBpdGVtLnBhdGhzWzBdLnZhbHVlID09PSBkaXJlY3RpdmUuaW5kZXgucGF0aHNbMF0udmFsdWVcbiAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgIHR5cGU6IEV4cHJUeXBlLk5VTUJFUixcbiAgICAgICAgICAgICAgICB2YWx1ZTogbWUuZ2V0KGRpcmVjdGl2ZS5pbmRleClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDogcmVzb2x2ZUl0ZW0oaXRlbSlcbiAgICAgICAgKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBjcmVhdGVBY2Nlc3NvcihyZXNvbHZlZFBhdGhzKTtcbn07XG5cbi8vIOS7o+eQhuaVsOaNruaTjeS9nOaWueazlVxuaW5oZXJpdHMoRm9ySXRlbURhdGEsIERhdGEpO1xuZWFjaChcbiAgICBbJ3NldCcsICdyZW1vdmUnLCAndW5zaGlmdCcsICdzaGlmdCcsICdwdXNoJywgJ3BvcCcsICdzcGxpY2UnXSxcbiAgICBmdW5jdGlvbiAobWV0aG9kKSB7XG4gICAgICAgIEZvckl0ZW1EYXRhLnByb3RvdHlwZVsnXycgKyBtZXRob2RdID0gRGF0YS5wcm90b3R5cGVbbWV0aG9kXTtcbiAgICAgICAgRm9ySXRlbURhdGEucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbiAoZXhwcikge1xuICAgICAgICAgICAgZXhwciA9IHRoaXMuZXhwclJlc29sdmUocGFyc2VFeHByKGV4cHIpKTtcbiAgICAgICAgICAgIGRhdGFDYWNoZS5jbGVhcigpO1xuICAgICAgICAgICAgdGhpcy5wYXJlbnRbbWV0aG9kXS5hcHBseShcbiAgICAgICAgICAgICAgICB0aGlzLnBhcmVudCxcbiAgICAgICAgICAgICAgICBbZXhwcl0uY29uY2F0KEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSkpXG4gICAgICAgICAgICApO1xuICAgICAgICB9O1xuICAgIH1cbik7XG5cbi8qKlxuICog5Yib5bu6IGZvciDmjIfku6TlhYPntKDnmoTlrZDlhYPntKBcbiAqXG4gKiBAaW5uZXJcbiAqIEBwYXJhbSB7Rm9yRGlyZWN0aXZlfSBmb3JFbGVtZW50IGZvciDmjIfku6TlhYPntKDlr7nosaFcbiAqIEBwYXJhbSB7Kn0gaXRlbSDlrZDlhYPntKDlr7nlupTmlbDmja5cbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCDlrZDlhYPntKDlr7nlupTluo/lj7dcbiAqIEByZXR1cm4ge0VsZW1lbnR9XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUZvckRpcmVjdGl2ZUNoaWxkKGZvckVsZW1lbnQsIGl0ZW0sIGluZGV4KSB7XG4gICAgdmFyIGl0ZW1TY29wZSA9IG5ldyBGb3JJdGVtRGF0YShmb3JFbGVtZW50LCBpdGVtLCBpbmRleCk7XG4gICAgcmV0dXJuIGNyZWF0ZU5vZGUoZm9yRWxlbWVudC5pdGVtQU5vZGUsIGZvckVsZW1lbnQsIGl0ZW1TY29wZSk7XG59XG5cbi8qKlxuICogZm9yIOaMh+S7pOiKgueCueexu1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhTm9kZSDmir3osaHoioLngrlcbiAqIEBwYXJhbSB7Q29tcG9uZW50fSBvd25lciDmiYDlsZ7nu4Tku7bnjq/looNcbiAqIEBwYXJhbSB7TW9kZWw9fSBzY29wZSDmiYDlsZ7mlbDmja7njq/looNcbiAqIEBwYXJhbSB7Tm9kZX0gcGFyZW50IOeItuS6suiKgueCuVxuICogQHBhcmFtIHtET01DaGlsZHJlbldhbGtlcj99IHJldmVyc2VXYWxrZXIg5a2Q5YWD57Sg6YGN5Y6G5a+56LGhXG4gKi9cbmZ1bmN0aW9uIEZvck5vZGUoYU5vZGUsIG93bmVyLCBzY29wZSwgcGFyZW50LCByZXZlcnNlV2Fsa2VyKSB7XG4gICAgdGhpcy5hTm9kZSA9IGFOb2RlO1xuICAgIHRoaXMub3duZXIgPSBvd25lcjtcbiAgICB0aGlzLnNjb3BlID0gc2NvcGU7XG4gICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgdGhpcy5wYXJlbnRDb21wb25lbnQgPSBwYXJlbnQubm9kZVR5cGUgPT09IE5vZGVUeXBlLkNNUFRcbiAgICAgICAgPyBwYXJlbnRcbiAgICAgICAgOiBwYXJlbnQucGFyZW50Q29tcG9uZW50O1xuXG4gICAgdGhpcy5pZCA9IGd1aWQoKTtcbiAgICB0aGlzLmNoaWxkcmVuID0gW107XG5cbiAgICB0aGlzLml0ZW1BTm9kZSA9IGNyZWF0ZUFOb2RlKHtcbiAgICAgICAgY2hpbGRyZW46IGFOb2RlLmNoaWxkcmVuLFxuICAgICAgICBwcm9wczogYU5vZGUucHJvcHMsXG4gICAgICAgIGV2ZW50czogYU5vZGUuZXZlbnRzLFxuICAgICAgICB0YWdOYW1lOiBhTm9kZS50YWdOYW1lLFxuICAgICAgICB2YXJzOiBhTm9kZS52YXJzLFxuICAgICAgICBob3RzcG90OiBhTm9kZS5ob3RzcG90LFxuICAgICAgICBkaXJlY3RpdmVzOiBjbG9uZURpcmVjdGl2ZXMoYU5vZGUuZGlyZWN0aXZlcywge1xuICAgICAgICAgICAgJ2Zvcic6IDFcbiAgICAgICAgfSlcbiAgICB9KTtcblxuICAgIHRoaXMucGFyYW0gPSBhTm9kZS5kaXJlY3RpdmVzWydmb3InXTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBkb3Qtbm90YXRpb25cblxuICAgIC8vICNbYmVnaW5dIHJldmVyc2VcbiAgICBpZiAocmV2ZXJzZVdhbGtlcikge1xuICAgICAgICB2YXIgbWUgPSB0aGlzO1xuICAgICAgICBlYWNoKFxuICAgICAgICAgICAgZXZhbEV4cHIodGhpcy5wYXJhbS52YWx1ZSwgdGhpcy5zY29wZSwgdGhpcy5vd25lciksXG4gICAgICAgICAgICBmdW5jdGlvbiAoaXRlbSwgaSkge1xuICAgICAgICAgICAgICAgIHZhciBpdGVtU2NvcGUgPSBuZXcgRm9ySXRlbURhdGEobWUsIGl0ZW0sIGkpO1xuICAgICAgICAgICAgICAgIHZhciBjaGlsZCA9IGNyZWF0ZVJldmVyc2VOb2RlKG1lLml0ZW1BTm9kZSwgcmV2ZXJzZVdhbGtlciwgbWUsIGl0ZW1TY29wZSk7XG4gICAgICAgICAgICAgICAgbWUuY2hpbGRyZW4ucHVzaChjaGlsZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG5cbiAgICAgICAgdGhpcy5fY3JlYXRlKCk7XG4gICAgICAgIGluc2VydEJlZm9yZSh0aGlzLmVsLCByZXZlcnNlV2Fsa2VyLnRhcmdldCwgcmV2ZXJzZVdhbGtlci5jdXJyZW50KTtcbiAgICB9XG4gICAgLy8gI1tlbmRdXG59XG5cblxuRm9yTm9kZS5wcm90b3R5cGUubm9kZVR5cGUgPSBOb2RlVHlwZS5GT1I7XG5Gb3JOb2RlLnByb3RvdHlwZS5fY3JlYXRlID0gbm9kZU93bkNyZWF0ZVN0dW1wO1xuRm9yTm9kZS5wcm90b3R5cGUuZGlzcG9zZSA9IG5vZGVPd25TaW1wbGVEaXNwb3NlO1xuXG4vKipcbiAqIOWwhuWFg+e0oGF0dGFjaOWIsOmhtemdoueahOihjOS4ulxuICpcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHBhcmVudEVsIOimgea3u+WKoOWIsOeahOeItuWFg+e0oFxuICogQHBhcmFtIHtIVE1MRWxlbWVudO+8nX0gYmVmb3JlRWwg6KaB5re75Yqg5Yiw5ZOq5Liq5YWD57Sg5LmL5YmNXG4gKi9cbkZvck5vZGUucHJvdG90eXBlLmF0dGFjaCA9IGZ1bmN0aW9uIChwYXJlbnRFbCwgYmVmb3JlRWwpIHtcbiAgICB0aGlzLl9jcmVhdGUoKTtcbiAgICBpbnNlcnRCZWZvcmUodGhpcy5lbCwgcGFyZW50RWwsIGJlZm9yZUVsKTtcblxuICAgIC8vIHBhaW50IGxpc3RcbiAgICB2YXIgZWwgPSB0aGlzLmVsIHx8IHBhcmVudEVsLmZpcnN0Q2hpbGQ7XG4gICAgdmFyIGRhdGEgPSBldmFsRXhwcih0aGlzLnBhcmFtLnZhbHVlLCB0aGlzLnNjb3BlLCB0aGlzLm93bmVyKTtcbiAgICB2YXIgbGVuID0gZGF0YSAmJiBkYXRhLmxlbmd0aCB8fCAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgdmFyIGNoaWxkID0gY3JlYXRlRm9yRGlyZWN0aXZlQ2hpbGQodGhpcywgZGF0YVtpXSwgaSk7XG4gICAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaChjaGlsZCk7XG4gICAgICAgIGNoaWxkLmF0dGFjaChwYXJlbnRFbCwgZWwpO1xuICAgIH1cbn07XG5cbi8qKlxuICog5bCG5YWD57Sg5LuO6aG16Z2i5LiK56e76Zmk55qE6KGM5Li6XG4gKi9cbkZvck5vZGUucHJvdG90eXBlLmRldGFjaCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5saWZlQ3ljbGUuYXR0YWNoZWQpIHtcbiAgICAgICAgZWxlbWVudERpc3Bvc2VDaGlsZHJlbih0aGlzKTtcbiAgICAgICAgdGhpcy5jaGlsZHJlbiA9IFtdO1xuICAgICAgICByZW1vdmVFbCh0aGlzLmVsKTtcbiAgICAgICAgdGhpcy5saWZlQ3ljbGUgPSBMaWZlQ3ljbGUuZGV0YWNoZWQ7XG4gICAgfVxufTtcblxuLyogZXNsaW50LWRpc2FibGUgZmVjcy1tYXgtc3RhdGVtZW50cyAqL1xuXG4vKipcbiAqIOinhuWbvuabtOaWsOWHveaVsFxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGNoYW5nZXMg5pWw5o2u5Y+Y5YyW5L+h5oGvXG4gKi9cbkZvck5vZGUucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoY2hhbmdlcykge1xuXG4gICAgdmFyIG1lID0gdGhpcztcbiAgICAvLyDmjqfliLbliJfooajmm7TmlrDnrZbnlaXmmK/lkKbljp/moLfmm7TmlrDnmoTlj5jph49cbiAgICB2YXIgb3JpZ2luYWxVcGRhdGUgPSB0aGlzLmFOb2RlLmRpcmVjdGl2ZXMudHJhbnNpdGlvbjtcblxuXG4gICAgdmFyIG9sZENoaWxkcmVuTGVuID0gdGhpcy5jaGlsZHJlbi5sZW5ndGg7XG4gICAgdmFyIGNoaWxkcmVuQ2hhbmdlcyA9IG5ldyBBcnJheShvbGRDaGlsZHJlbkxlbik7XG5cbiAgICBmdW5jdGlvbiBwdXNoVG9DaGlsZHJlbkNoYW5nZXMoY2hhbmdlKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gY2hpbGRyZW5DaGFuZ2VzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgKGNoaWxkcmVuQ2hhbmdlc1tpXSA9IGNoaWxkcmVuQ2hhbmdlc1tpXSB8fCBbXSkucHVzaChjaGFuZ2UpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGRpc3Bvc2VDaGlsZHJlbiA9IFtdO1xuXG5cbiAgICAvLyDliKTmlq3liJfooajmmK/lkKbniLblhYPntKDkuIvllK/kuIDnmoTlhYPntKBcbiAgICAvLyDlpoLmnpzmmK/nmoTor53vvIzlj6/ku6XlgZrkuIDkupvmm7TmlrDkvJjljJZcbiAgICB2YXIgcGFyZW50RWwgPSB0aGlzLmVsLnBhcmVudE5vZGU7XG4gICAgdmFyIHBhcmVudEZpcnN0Q2hpbGQgPSBwYXJlbnRFbC5maXJzdENoaWxkO1xuICAgIHZhciBwYXJlbnRMYXN0Q2hpbGQgPSBwYXJlbnRFbC5sYXN0Q2hpbGQ7XG4gICAgdmFyIGlzT25seVBhcmVudENoaWxkID0gb2xkQ2hpbGRyZW5MZW4gPiAwIC8vIOacieWtqeWtkOaXtlxuICAgICAgICAgICAgJiYgcGFyZW50Rmlyc3RDaGlsZCA9PT0gdGhpcy5jaGlsZHJlblswXS5lbFxuICAgICAgICAgICAgJiYgKHBhcmVudExhc3RDaGlsZCA9PT0gdGhpcy5lbCB8fCBwYXJlbnRMYXN0Q2hpbGQgPT09IHRoaXMuY2hpbGRyZW5bb2xkQ2hpbGRyZW5MZW4gLSAxXS5lbClcbiAgICAgICAgfHwgb2xkQ2hpbGRyZW5MZW4gPT09IDAgLy8g5peg5a2p5a2Q5pe2XG4gICAgICAgICAgICAmJiBwYXJlbnRGaXJzdENoaWxkID09PSB0aGlzLmVsXG4gICAgICAgICAgICAmJiBwYXJlbnRMYXN0Q2hpbGQgPT09IHRoaXMuZWw7XG5cbiAgICAvLyDmjqfliLbliJfooajmmK/lkKbmlbTkvZPmm7TmlrDnmoTlj5jph49cbiAgICB2YXIgaXNDaGlsZHJlblJlYnVpbGQ7XG5cbiAgICB2YXIgbmV3TGlzdCA9IGV2YWxFeHByKHRoaXMucGFyYW0udmFsdWUsIHRoaXMuc2NvcGUsIHRoaXMub3duZXIpO1xuICAgIHZhciBuZXdMZW4gPSBuZXdMaXN0ICYmIG5ld0xpc3QubGVuZ3RoIHx8IDA7XG5cbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1yZWRlY2xhcmUgKi9cbiAgICBmb3IgKHZhciBjSW5kZXggPSAwLCBjTGVuID0gY2hhbmdlcy5sZW5ndGg7IGNJbmRleCA8IGNMZW47IGNJbmRleCsrKSB7XG4gICAgICAgIHZhciBjaGFuZ2UgPSBjaGFuZ2VzW2NJbmRleF07XG4gICAgICAgIHZhciByZWxhdGlvbiA9IGNoYW5nZUV4cHJDb21wYXJlKGNoYW5nZS5leHByLCB0aGlzLnBhcmFtLnZhbHVlLCB0aGlzLnNjb3BlKTtcblxuICAgICAgICBpZiAoIXJlbGF0aW9uKSB7XG4gICAgICAgICAgICAvLyDml6DlhbPml7bvvIznm7TmjqXkvKDpgJLnu5nlrZDlhYPntKDmm7TmlrDvvIzliJfooajmnKzouqvkuI3pnIDopoHliqhcbiAgICAgICAgICAgIHB1c2hUb0NoaWxkcmVuQ2hhbmdlcyhjaGFuZ2UpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHJlbGF0aW9uID4gMikge1xuICAgICAgICAgICAgLy8g5Y+Y5pu06KGo6L6+5byP5pivbGlzdOe7keWumuihqOi+vuW8j+eahOWtkOmhuVxuICAgICAgICAgICAgLy8g5Y+q6ZyA6KaB5a+555u45bqU55qE5a2Q6aG56L+b6KGM5pu05pawXG4gICAgICAgICAgICB2YXIgY2hhbmdlUGF0aHMgPSBjaGFuZ2UuZXhwci5wYXRocztcbiAgICAgICAgICAgIHZhciBmb3JMZW4gPSB0aGlzLnBhcmFtLnZhbHVlLnBhdGhzLmxlbmd0aDtcbiAgICAgICAgICAgIHZhciBjaGFuZ2VJbmRleCA9ICtldmFsRXhwcihjaGFuZ2VQYXRoc1tmb3JMZW5dLCB0aGlzLnNjb3BlLCB0aGlzLm93bmVyKTtcblxuICAgICAgICAgICAgaWYgKGlzTmFOKGNoYW5nZUluZGV4KSkge1xuICAgICAgICAgICAgICAgIHB1c2hUb0NoaWxkcmVuQ2hhbmdlcyhjaGFuZ2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY2hhbmdlID0ge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBjaGFuZ2UudHlwZSxcbiAgICAgICAgICAgICAgICAgICAgZXhwcjogY3JlYXRlQWNjZXNzb3IoXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcmFtLml0ZW0ucGF0aHMuY29uY2F0KGNoYW5nZVBhdGhzLnNsaWNlKGZvckxlbiArIDEpKVxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogY2hhbmdlLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICBpbmRleDogY2hhbmdlLmluZGV4LFxuICAgICAgICAgICAgICAgICAgICBkZWxldGVDb3VudDogY2hhbmdlLmRlbGV0ZUNvdW50LFxuICAgICAgICAgICAgICAgICAgICBpbnNlcnRpb25zOiBjaGFuZ2UuaW5zZXJ0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uOiBjaGFuZ2Uub3B0aW9uXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIChjaGlsZHJlbkNoYW5nZXNbY2hhbmdlSW5kZXhdID0gY2hpbGRyZW5DaGFuZ2VzW2NoYW5nZUluZGV4XSB8fCBbXSlcbiAgICAgICAgICAgICAgICAgICAgLnB1c2goY2hhbmdlKTtcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNoaWxkcmVuW2NoYW5nZUluZGV4XSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2hhbmdlLnR5cGUgPT09IERhdGFDaGFuZ2VUeXBlLlNQTElDRSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGlsZHJlbltjaGFuZ2VJbmRleF0uc2NvcGUuX3NwbGljZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2UuZXhwcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXS5jb25jYXQoY2hhbmdlLmluZGV4LCBjaGFuZ2UuZGVsZXRlQ291bnQsIGNoYW5nZS5pbnNlcnRpb25zKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IHNpbGVudDogMSB9XG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGlsZHJlbltjaGFuZ2VJbmRleF0uc2NvcGUuX3NldChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2UuZXhwcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2UudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBzaWxlbnQ6IDEgfVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjaGFuZ2UudHlwZSAhPT0gRGF0YUNoYW5nZVR5cGUuU1BMSUNFKSB7XG4gICAgICAgICAgICAvLyDlj5jmm7Tooajovr7lvI/mmK9saXN057uR5a6a6KGo6L6+5byP5pys6Lqr5oiW5q+N6aG555qE6YeN5paw6K6+5YC8XG4gICAgICAgICAgICAvLyDmraTml7bpnIDopoHmm7TmlrDmlbTkuKrliJfooahcblxuXG4gICAgICAgICAgICAvLyDogIHnmoTmr5TmlrDnmoTlpJrnmoTpg6jliIbvvIzmoIforrDpnIDopoFkaXNwb3NlXG4gICAgICAgICAgICBpZiAob2xkQ2hpbGRyZW5MZW4gPiBuZXdMZW4pIHtcbiAgICAgICAgICAgICAgICBkaXNwb3NlQ2hpbGRyZW4gPSBkaXNwb3NlQ2hpbGRyZW4uY29uY2F0KHRoaXMuY2hpbGRyZW4uc2xpY2UobmV3TGVuKSk7XG5cbiAgICAgICAgICAgICAgICBjaGlsZHJlbkNoYW5nZXMgPSBjaGlsZHJlbkNoYW5nZXMuc2xpY2UoMCwgbmV3TGVuKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbi5zbGljZSgwLCBuZXdMZW4pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyDmlbTpobnlj5jmm7RcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmV3TGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICAoY2hpbGRyZW5DaGFuZ2VzW2ldID0gY2hpbGRyZW5DaGFuZ2VzW2ldIHx8IFtdKS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogRGF0YUNoYW5nZVR5cGUuU0VULFxuICAgICAgICAgICAgICAgICAgICBvcHRpb246IGNoYW5nZS5vcHRpb24sXG4gICAgICAgICAgICAgICAgICAgIGV4cHI6IGNyZWF0ZUFjY2Vzc29yKHRoaXMucGFyYW0uaXRlbS5wYXRocy5zbGljZSgwKSksXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBuZXdMaXN0W2ldXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAvLyDlr7lsaXN05pu05LiK57qn5pWw5o2u55qE55u05o6l6K6+572uXG4gICAgICAgICAgICAgICAgaWYgKHJlbGF0aW9uIDwgMikge1xuICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbkNoYW5nZXNbaV0ucHVzaChjaGFuZ2UpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNoaWxkcmVuW2ldKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hpbGRyZW5baV0uc2NvcGUuX3NldChcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGFyYW0uaXRlbSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0xpc3RbaV0sXG4gICAgICAgICAgICAgICAgICAgICAgICB7c2lsZW50OiAxfVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGlsZHJlbltpXSA9IDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpc0NoaWxkcmVuUmVidWlsZCA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocmVsYXRpb24gPT09IDIgJiYgY2hhbmdlLnR5cGUgPT09IERhdGFDaGFuZ2VUeXBlLlNQTElDRSAmJiAhaXNDaGlsZHJlblJlYnVpbGQpIHtcbiAgICAgICAgICAgIC8vIOWPmOabtOihqOi+vuW8j+aYr2xpc3Tnu5Hlrprooajovr7lvI/mnKzouqvmlbDnu4TnmoRzcGxpY2Xmk43kvZxcbiAgICAgICAgICAgIC8vIOatpOaXtumcgOimgeWIoOmZpOmDqOWIhumhue+8jOWIm+W7uumDqOWIhumhuVxuICAgICAgICAgICAgdmFyIGNoYW5nZVN0YXJ0ID0gY2hhbmdlLmluZGV4O1xuICAgICAgICAgICAgdmFyIGRlbGV0ZUNvdW50ID0gY2hhbmdlLmRlbGV0ZUNvdW50O1xuICAgICAgICAgICAgdmFyIGluc2VydGlvbnNMZW4gPSBjaGFuZ2UuaW5zZXJ0aW9ucy5sZW5ndGg7XG4gICAgICAgICAgICB2YXIgbmV3Q291bnQgPSBpbnNlcnRpb25zTGVuIC0gZGVsZXRlQ291bnQ7XG5cbiAgICAgICAgICAgIGlmIChuZXdDb3VudCkge1xuICAgICAgICAgICAgICAgIHZhciBpbmRleENoYW5nZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogRGF0YUNoYW5nZVR5cGUuU0VULFxuICAgICAgICAgICAgICAgICAgICBvcHRpb246IGNoYW5nZS5vcHRpb24sXG4gICAgICAgICAgICAgICAgICAgIGV4cHI6IHRoaXMucGFyYW0uaW5kZXhcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IGNoYW5nZVN0YXJ0ICsgZGVsZXRlQ291bnQ7IGkgPCB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIChjaGlsZHJlbkNoYW5nZXNbaV0gPSBjaGlsZHJlbkNoYW5nZXNbaV0gfHwgW10pLnB1c2goaW5kZXhDaGFuZ2UpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoaWxkcmVuW2ldICYmIHRoaXMuY2hpbGRyZW5baV0uc2NvcGUuX3NldChcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4Q2hhbmdlLmV4cHIsXG4gICAgICAgICAgICAgICAgICAgICAgICBpIC0gZGVsZXRlQ291bnQgKyBpbnNlcnRpb25zTGVuLFxuICAgICAgICAgICAgICAgICAgICAgICAge3NpbGVudDogMX1cbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBkZWxldGVMZW4gPSBkZWxldGVDb3VudDtcbiAgICAgICAgICAgIHdoaWxlIChkZWxldGVMZW4tLSkge1xuICAgICAgICAgICAgICAgIGlmIChkZWxldGVMZW4gPCBpbnNlcnRpb25zTGVuKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpID0gY2hhbmdlU3RhcnQgKyBkZWxldGVMZW47XG4gICAgICAgICAgICAgICAgICAgIC8vIHVwZGF0ZVxuICAgICAgICAgICAgICAgICAgICAoY2hpbGRyZW5DaGFuZ2VzW2ldID0gY2hpbGRyZW5DaGFuZ2VzW2ldIHx8IFtdKS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IERhdGFDaGFuZ2VUeXBlLlNFVCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbjogY2hhbmdlLm9wdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4cHI6IGNyZWF0ZUFjY2Vzc29yKHRoaXMucGFyYW0uaXRlbS5wYXRocy5zbGljZSgwKSksXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogY2hhbmdlLmluc2VydGlvbnNbZGVsZXRlTGVuXVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY2hpbGRyZW5baV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2hpbGRyZW5baV0uc2NvcGUuX3NldChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcmFtLml0ZW0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhbmdlLmluc2VydGlvbnNbZGVsZXRlTGVuXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7c2lsZW50OiAxfVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG5ld0NvdW50IDwgMCkge1xuICAgICAgICAgICAgICAgIGRpc3Bvc2VDaGlsZHJlbiA9IGRpc3Bvc2VDaGlsZHJlbi5jb25jYXQodGhpcy5jaGlsZHJlbi5zcGxpY2UoY2hhbmdlU3RhcnQgKyBpbnNlcnRpb25zTGVuLCAtbmV3Q291bnQpKTtcbiAgICAgICAgICAgICAgICBjaGlsZHJlbkNoYW5nZXMuc3BsaWNlKGNoYW5nZVN0YXJ0ICsgaW5zZXJ0aW9uc0xlbiwgLW5ld0NvdW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKG5ld0NvdW50ID4gMCkge1xuICAgICAgICAgICAgICAgIHZhciBzcGxpY2VBcmdzID0gW2NoYW5nZVN0YXJ0ICsgZGVsZXRlQ291bnQsIDBdLmNvbmNhdChuZXcgQXJyYXkobmV3Q291bnQpKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNoaWxkcmVuLnNwbGljZS5hcHBseSh0aGlzLmNoaWxkcmVuLCBzcGxpY2VBcmdzKTtcbiAgICAgICAgICAgICAgICBjaGlsZHJlbkNoYW5nZXMuc3BsaWNlLmFwcGx5KGNoaWxkcmVuQ2hhbmdlcywgc3BsaWNlQXJncyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgbmV3Q2hpbGRyZW5MZW4gPSB0aGlzLmNoaWxkcmVuLmxlbmd0aDtcblxuICAgIC8vIOagh+iusCBsZW5ndGgg5piv5ZCm5Y+R55Sf5Y+Y5YyWXG4gICAgaWYgKG5ld0NoaWxkcmVuTGVuICE9PSBvbGRDaGlsZHJlbkxlbikge1xuICAgICAgICB2YXIgbGVuZ3RoQ2hhbmdlID0ge1xuICAgICAgICAgICAgdHlwZTogRGF0YUNoYW5nZVR5cGUuU0VULFxuICAgICAgICAgICAgb3B0aW9uOiB7fSxcbiAgICAgICAgICAgIGV4cHI6IGNyZWF0ZUFjY2Vzc29yKFxuICAgICAgICAgICAgICAgIHRoaXMucGFyYW0udmFsdWUucGF0aHMuY29uY2F0KHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogRXhwclR5cGUuU1RSSU5HLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogJ2xlbmd0aCdcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChjaGFuZ2VzSXNJbkRhdGFSZWYoW2xlbmd0aENoYW5nZV0sIHRoaXMuYU5vZGUuaG90c3BvdC5kYXRhKSkge1xuICAgICAgICAgICAgcHVzaFRvQ2hpbGRyZW5DaGFuZ2VzKGxlbmd0aENoYW5nZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyDmuIXpmaTlupTor6XlubLmjonnmoQgY2hpbGRcbiAgICB0aGlzLl9kb0NyZWF0ZUFuZFVwZGF0ZSA9IGRvQ3JlYXRlQW5kVXBkYXRlO1xuXG4gICAgLy8g6L+Z6YeM5LiN55SoZ2V0VHJhbnNpdGlvbu+8jGdldFRyYW5zaXRpb27lkoxzY29wZeebuOWFs++8jGZvcuWSjGZvckl0ZW3nmoRzY29wZeaYr+S4jeWQjOeahFxuICAgIC8vIOaJgOS7pWdldFRyYW5zaXRpb27nu5PmnpzmnKzouqvkuZ/mmK/kuI3kuIDoh7TnmoTjgILkuI3lpoLnm7TmjqXliKTmlq3mjIfku6TmmK/lkKblrZjlnKjvvIzlpoLmnpzlrZjlnKjlsLHkuI3ov5vlhaXmmrTlipvmuIXpmaTmqKHlvI9cbiAgICAvLyB2YXIgdmlvbGVudENsZWFyID0gaXNPbmx5UGFyZW50Q2hpbGQgJiYgbmV3Q2hpbGRyZW5MZW4gPT09IDAgJiYgIWVsZW1lbnRHZXRUcmFuc2l0aW9uKG1lKTtcbiAgICB2YXIgdmlvbGVudENsZWFyID0gIW9yaWdpbmFsVXBkYXRlICYmIGlzT25seVBhcmVudENoaWxkICYmIG5ld0NoaWxkcmVuTGVuID09PSAwO1xuXG4gICAgdmFyIGRpc3Bvc2VkQ2hpbGRDb3VudCA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkaXNwb3NlQ2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGRpc3Bvc2VDaGlsZCA9IGRpc3Bvc2VDaGlsZHJlbltpXTtcbiAgICAgICAgaWYgKGRpc3Bvc2VDaGlsZCkge1xuICAgICAgICAgICAgZGlzcG9zZUNoaWxkLl9vbmRpc3Bvc2VkID0gY2hpbGREaXNwb3NlZDtcbiAgICAgICAgICAgIGRpc3Bvc2VDaGlsZC5kaXNwb3NlKHZpb2xlbnRDbGVhciwgdmlvbGVudENsZWFyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNoaWxkRGlzcG9zZWQoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmICh2aW9sZW50Q2xlYXIpIHtcbiAgICAgICAgLy8gY2xvbmVOb2RlICsgcmVwbGFjZUNoaWxkIGlzIGZhc3RlclxuICAgICAgICAvLyBwYXJlbnRFbC5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgdmFyIHJlcGxhY2VOb2RlID0gcGFyZW50RWwuY2xvbmVOb2RlKGZhbHNlKTtcbiAgICAgICAgcGFyZW50RWwucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQocmVwbGFjZU5vZGUsIHBhcmVudEVsKTtcbiAgICAgICAgdGhpcy5lbCA9IGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQodGhpcy5pZCk7XG4gICAgICAgIHJlcGxhY2VOb2RlLmFwcGVuZENoaWxkKHRoaXMuZWwpO1xuICAgIH1cblxuICAgIGlmIChkaXNwb3NlQ2hpbGRyZW4ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGRvQ3JlYXRlQW5kVXBkYXRlKCk7XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBjaGlsZERpc3Bvc2VkKCkge1xuICAgICAgICBkaXNwb3NlZENoaWxkQ291bnQrKztcbiAgICAgICAgaWYgKGRpc3Bvc2VkQ2hpbGRDb3VudCA9PT0gZGlzcG9zZUNoaWxkcmVuLmxlbmd0aFxuICAgICAgICAgICAgJiYgZG9DcmVhdGVBbmRVcGRhdGUgPT09IG1lLl9kb0NyZWF0ZUFuZFVwZGF0ZVxuICAgICAgICApIHtcbiAgICAgICAgICAgIGRvQ3JlYXRlQW5kVXBkYXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkb0NyZWF0ZUFuZFVwZGF0ZSgpIHtcbiAgICAgICAgbWUuX2RvQ3JlYXRlQW5kVXBkYXRlID0gbnVsbDtcbiAgICAgICAgaWYgKHZpb2xlbnRDbGVhcikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cblxuICAgICAgICB2YXIgYmVmb3JlRWwgPSBtZS5lbDtcblxuICAgICAgICAvLyDlr7nnm7jlupTnmoTpobnov5vooYzmm7TmlrBcbiAgICAgICAgaWYgKG9sZENoaWxkcmVuTGVuID09PSAwICYmIGlzT25seVBhcmVudENoaWxkKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5ld0NoaWxkcmVuTGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICBtZS5jaGlsZHJlbltpXSA9IGNyZWF0ZUZvckRpcmVjdGl2ZUNoaWxkKG1lLCBuZXdMaXN0W2ldLCBpKTtcbiAgICAgICAgICAgICAgICBtZS5jaGlsZHJlbltpXS5hdHRhY2gocGFyZW50RWwsIGJlZm9yZUVsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIOWmguaenOS4jWF0dGFjaGVk5YiZ55u05o6l5Yib5bu677yM5aaC5p6c5a2Y5Zyo5YiZ6LCD55So5pu05paw5Ye95pWwXG4gICAgICAgICAgICB2YXIgaiA9IC0xO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuZXdDaGlsZHJlbkxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNoaWxkID0gbWUuY2hpbGRyZW5baV07XG5cbiAgICAgICAgICAgICAgICBpZiAoY2hpbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW5DaGFuZ2VzW2ldICYmIGNoaWxkLl91cGRhdGUoY2hpbGRyZW5DaGFuZ2VzW2ldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChqIDwgaSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaiA9IGkgKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgYmVmb3JlRWwgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGogPCBuZXdDaGlsZHJlbkxlbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuZXh0Q2hpbGQgPSBtZS5jaGlsZHJlbltqXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV4dENoaWxkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlZm9yZUVsID0gbmV4dENoaWxkLnNlbCB8fCBuZXh0Q2hpbGQuZWw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqKys7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBtZS5jaGlsZHJlbltpXSA9IGNyZWF0ZUZvckRpcmVjdGl2ZUNoaWxkKG1lLCBuZXdMaXN0W2ldLCBpKTtcbiAgICAgICAgICAgICAgICAgICAgbWUuY2hpbGRyZW5baV0uYXR0YWNoKHBhcmVudEVsLCBiZWZvcmVFbCB8fCBtZS5lbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufTtcblxuXG4vLyBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBGb3JOb2RlO1xuXG5cbi8qKlxuICogQGZpbGUg5riF5rSX5p2h5Lu2IGFOb2RlXG4gKiBAYXV0aG9yIGVycm9ycmlrKGVycm9ycmlrQGdtYWlsLmNvbSlcbiAqL1xuXG5cbi8vIHZhciBjcmVhdGVBTm9kZSA9IHJlcXVpcmUoJy4uL3BhcnNlci9jcmVhdGUtYS1ub2RlJyk7XG4vLyB2YXIgY2xvbmVEaXJlY3RpdmVzID0gcmVxdWlyZSgnLi4vcGFyc2VyL2Nsb25lLWRpcmVjdGl2ZXMnKTtcblxuXG4vKipcbiAqIOa4hea0l+adoeS7tiBhTm9kZe+8jOi/lOWbnue6r+WHgOaXoOadoeS7tuaMh+S7pOeahCBhTm9kZVxuICpcbiAqIEBwYXJhbSB7QU5vZGV9IGFOb2RlIOadoeS7tuiKgueCueWvueixoVxuICogQHJldHVybiB7QU5vZGV9XG4gKi9cbmZ1bmN0aW9uIHJpbnNlQ29uZEFOb2RlKGFOb2RlKSB7XG4gICAgdmFyIGNsZWFyQU5vZGUgPSBjcmVhdGVBTm9kZSh7XG4gICAgICAgIGNoaWxkcmVuOiBhTm9kZS5jaGlsZHJlbixcbiAgICAgICAgcHJvcHM6IGFOb2RlLnByb3BzLFxuICAgICAgICBldmVudHM6IGFOb2RlLmV2ZW50cyxcbiAgICAgICAgdGFnTmFtZTogYU5vZGUudGFnTmFtZSxcbiAgICAgICAgdmFyczogYU5vZGUudmFycyxcbiAgICAgICAgaG90c3BvdDogYU5vZGUuaG90c3BvdCxcbiAgICAgICAgZGlyZWN0aXZlczogY2xvbmVEaXJlY3RpdmVzKGFOb2RlLmRpcmVjdGl2ZXMsIHtcbiAgICAgICAgICAgICdpZic6IDEsXG4gICAgICAgICAgICAnZWxzZSc6IDEsXG4gICAgICAgICAgICAnZWxpZic6IDFcbiAgICAgICAgfSlcbiAgICB9KTtcblxuICAgIHJldHVybiBjbGVhckFOb2RlO1xufVxuXG4vLyBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByaW5zZUNvbmRBTm9kZTtcblxuXG4vKipcbiAqIEBmaWxlIGlmIOaMh+S7pOiKgueCueexu1xuICogQGF1dGhvciBlcnJvcnJpayhlcnJvcnJpa0BnbWFpbC5jb20pXG4gKi9cblxuLy8gdmFyIGVhY2ggPSByZXF1aXJlKCcuLi91dGlsL2VhY2gnKTtcbi8vIHZhciBndWlkID0gcmVxdWlyZSgnLi4vdXRpbC9ndWlkJyk7XG4vLyB2YXIgaW5zZXJ0QmVmb3JlID0gcmVxdWlyZSgnLi4vYnJvd3Nlci9pbnNlcnQtYmVmb3JlJyk7XG4vLyB2YXIgZXZhbEV4cHIgPSByZXF1aXJlKCcuLi9ydW50aW1lL2V2YWwtZXhwcicpO1xuLy8gdmFyIE5vZGVUeXBlID0gcmVxdWlyZSgnLi9ub2RlLXR5cGUnKTtcbi8vIHZhciByaW5zZUNvbmRBTm9kZSA9IHJlcXVpcmUoJy4vcmluc2UtY29uZC1hbm9kZScpO1xuLy8gdmFyIGNyZWF0ZU5vZGUgPSByZXF1aXJlKCcuL2NyZWF0ZS1ub2RlJyk7XG4vLyB2YXIgY3JlYXRlUmV2ZXJzZU5vZGUgPSByZXF1aXJlKCcuL2NyZWF0ZS1yZXZlcnNlLW5vZGUnKTtcbi8vIHZhciBub2RlT3duQ3JlYXRlU3R1bXAgPSByZXF1aXJlKCcuL25vZGUtb3duLWNyZWF0ZS1zdHVtcCcpO1xuLy8gdmFyIGVsZW1lbnRVcGRhdGVDaGlsZHJlbiA9IHJlcXVpcmUoJy4vZWxlbWVudC11cGRhdGUtY2hpbGRyZW4nKTtcbi8vIHZhciBub2RlT3duU2ltcGxlRGlzcG9zZSA9IHJlcXVpcmUoJy4vbm9kZS1vd24tc2ltcGxlLWRpc3Bvc2UnKTtcblxuLyoqXG4gKiBpZiDmjIfku6ToioLngrnnsbtcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYU5vZGUg5oq96LGh6IqC54K5XG4gKiBAcGFyYW0ge0NvbXBvbmVudH0gb3duZXIg5omA5bGe57uE5Lu2546v5aKDXG4gKiBAcGFyYW0ge01vZGVsPX0gc2NvcGUg5omA5bGe5pWw5o2u546v5aKDXG4gKiBAcGFyYW0ge05vZGV9IHBhcmVudCDniLbkurLoioLngrlcbiAqIEBwYXJhbSB7RE9NQ2hpbGRyZW5XYWxrZXI/fSByZXZlcnNlV2Fsa2VyIOWtkOWFg+e0oOmBjeWOhuWvueixoVxuICovXG5mdW5jdGlvbiBJZk5vZGUoYU5vZGUsIG93bmVyLCBzY29wZSwgcGFyZW50LCByZXZlcnNlV2Fsa2VyKSB7XG4gICAgdGhpcy5hTm9kZSA9IGFOb2RlO1xuICAgIHRoaXMub3duZXIgPSBvd25lcjtcbiAgICB0aGlzLnNjb3BlID0gc2NvcGU7XG4gICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgdGhpcy5wYXJlbnRDb21wb25lbnQgPSBwYXJlbnQubm9kZVR5cGUgPT09IE5vZGVUeXBlLkNNUFRcbiAgICAgICAgPyBwYXJlbnRcbiAgICAgICAgOiBwYXJlbnQucGFyZW50Q29tcG9uZW50O1xuXG4gICAgdGhpcy5pZCA9IGd1aWQoKTtcbiAgICB0aGlzLmNoaWxkcmVuID0gW107XG5cbiAgICB0aGlzLmNvbmQgPSB0aGlzLmFOb2RlLmRpcmVjdGl2ZXNbJ2lmJ10udmFsdWU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZG90LW5vdGF0aW9uXG5cbiAgICAvLyAjW2JlZ2luXSByZXZlcnNlXG4gICAgaWYgKHJldmVyc2VXYWxrZXIpIHtcbiAgICAgICAgaWYgKGV2YWxFeHByKHRoaXMuY29uZCwgdGhpcy5zY29wZSwgdGhpcy5vd25lcikpIHtcbiAgICAgICAgICAgIHRoaXMuZWxzZUluZGV4ID0gLTE7XG4gICAgICAgICAgICB0aGlzLmNoaWxkcmVuWzBdID0gY3JlYXRlUmV2ZXJzZU5vZGUoXG4gICAgICAgICAgICAgICAgcmluc2VDb25kQU5vZGUoYU5vZGUpLFxuICAgICAgICAgICAgICAgIHJldmVyc2VXYWxrZXIsXG4gICAgICAgICAgICAgICAgdGhpc1xuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBtZSA9IHRoaXM7XG4gICAgICAgICAgICBlYWNoKGFOb2RlLmVsc2VzLCBmdW5jdGlvbiAoZWxzZUFOb2RlLCBpbmRleCkge1xuICAgICAgICAgICAgICAgIHZhciBlbGlmID0gZWxzZUFOb2RlLmRpcmVjdGl2ZXMuZWxpZjtcblxuICAgICAgICAgICAgICAgIGlmICghZWxpZiB8fCBlbGlmICYmIGV2YWxFeHByKGVsaWYudmFsdWUsIG1lLnNjb3BlLCBtZS5vd25lcikpIHtcbiAgICAgICAgICAgICAgICAgICAgbWUuZWxzZUluZGV4ID0gaW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIG1lLmNoaWxkcmVuWzBdID0gY3JlYXRlUmV2ZXJzZU5vZGUoXG4gICAgICAgICAgICAgICAgICAgICAgICByaW5zZUNvbmRBTm9kZShlbHNlQU5vZGUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV2ZXJzZVdhbGtlcixcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2NyZWF0ZSgpO1xuICAgICAgICBpbnNlcnRCZWZvcmUodGhpcy5lbCwgcmV2ZXJzZVdhbGtlci50YXJnZXQsIHJldmVyc2VXYWxrZXIuY3VycmVudCk7XG4gICAgfVxuICAgIC8vICNbZW5kXVxufVxuXG5JZk5vZGUucHJvdG90eXBlLm5vZGVUeXBlID0gTm9kZVR5cGUuSUY7XG5cbklmTm9kZS5wcm90b3R5cGUuX2NyZWF0ZSA9IG5vZGVPd25DcmVhdGVTdHVtcDtcbklmTm9kZS5wcm90b3R5cGUuZGlzcG9zZSA9IG5vZGVPd25TaW1wbGVEaXNwb3NlO1xuXG5JZk5vZGUucHJvdG90eXBlLmF0dGFjaCA9IGZ1bmN0aW9uIChwYXJlbnRFbCwgYmVmb3JlRWwpIHtcbiAgICB2YXIgbWUgPSB0aGlzO1xuICAgIHZhciBlbHNlSW5kZXg7XG4gICAgdmFyIGNoaWxkO1xuXG4gICAgaWYgKGV2YWxFeHByKHRoaXMuY29uZCwgdGhpcy5zY29wZSwgdGhpcy5vd25lcikpIHtcbiAgICAgICAgY2hpbGQgPSBjcmVhdGVOb2RlKHJpbnNlQ29uZEFOb2RlKG1lLmFOb2RlKSwgbWUpO1xuICAgICAgICBlbHNlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGVhY2gobWUuYU5vZGUuZWxzZXMsIGZ1bmN0aW9uIChlbHNlQU5vZGUsIGluZGV4KSB7XG4gICAgICAgICAgICB2YXIgZWxpZiA9IGVsc2VBTm9kZS5kaXJlY3RpdmVzLmVsaWY7XG5cbiAgICAgICAgICAgIGlmICghZWxpZiB8fCBlbGlmICYmIGV2YWxFeHByKGVsaWYudmFsdWUsIG1lLnNjb3BlLCBtZS5vd25lcikpIHtcbiAgICAgICAgICAgICAgICBjaGlsZCA9IGNyZWF0ZU5vZGUocmluc2VDb25kQU5vZGUoZWxzZUFOb2RlKSwgbWUpO1xuICAgICAgICAgICAgICAgIGVsc2VJbmRleCA9IGluZGV4O1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKGNoaWxkKSB7XG4gICAgICAgIG1lLmNoaWxkcmVuWzBdID0gY2hpbGQ7XG4gICAgICAgIGNoaWxkLmF0dGFjaChwYXJlbnRFbCwgYmVmb3JlRWwpO1xuICAgICAgICBtZS5lbHNlSW5kZXggPSBlbHNlSW5kZXg7XG4gICAgfVxuXG5cbiAgICB0aGlzLl9jcmVhdGUoKTtcbiAgICBpbnNlcnRCZWZvcmUodGhpcy5lbCwgcGFyZW50RWwsIGJlZm9yZUVsKTtcbn07XG5cblxuLyoqXG4gKiDop4blm77mm7TmlrDlh73mlbBcbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBjaGFuZ2VzIOaVsOaNruWPmOWMluS/oeaBr1xuICovXG5JZk5vZGUucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoY2hhbmdlcykge1xuICAgIHZhciBtZSA9IHRoaXM7XG4gICAgdmFyIGNoaWxkQU5vZGUgPSBtZS5hTm9kZTtcbiAgICB2YXIgZWxzZUluZGV4O1xuXG4gICAgaWYgKGV2YWxFeHByKHRoaXMuY29uZCwgdGhpcy5zY29wZSwgdGhpcy5vd25lcikpIHtcbiAgICAgICAgZWxzZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBlYWNoKG1lLmFOb2RlLmVsc2VzLCBmdW5jdGlvbiAoZWxzZUFOb2RlLCBpbmRleCkge1xuICAgICAgICAgICAgdmFyIGVsaWYgPSBlbHNlQU5vZGUuZGlyZWN0aXZlcy5lbGlmO1xuXG4gICAgICAgICAgICBpZiAoZWxpZiAmJiBldmFsRXhwcihlbGlmLnZhbHVlLCBtZS5zY29wZSwgbWUub3duZXIpIHx8ICFlbGlmKSB7XG4gICAgICAgICAgICAgICAgZWxzZUluZGV4ID0gaW5kZXg7XG4gICAgICAgICAgICAgICAgY2hpbGRBTm9kZSA9IGVsc2VBTm9kZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChlbHNlSW5kZXggPT09IG1lLmVsc2VJbmRleCkge1xuICAgICAgICBlbGVtZW50VXBkYXRlQ2hpbGRyZW4obWUsIGNoYW5nZXMpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdmFyIGNoaWxkID0gbWUuY2hpbGRyZW5bMF07XG4gICAgICAgIG1lLmNoaWxkcmVuID0gW107XG4gICAgICAgIGlmIChjaGlsZCkge1xuICAgICAgICAgICAgY2hpbGQuX29uZGlzcG9zZWQgPSBuZXdDaGlsZDtcbiAgICAgICAgICAgIGNoaWxkLmRpc3Bvc2UoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG5ld0NoaWxkKCk7XG4gICAgICAgIH1cblxuICAgICAgICBtZS5lbHNlSW5kZXggPSBlbHNlSW5kZXg7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbmV3Q2hpbGQoKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZWxzZUluZGV4ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdmFyIGNoaWxkID0gY3JlYXRlTm9kZShyaW5zZUNvbmRBTm9kZShjaGlsZEFOb2RlKSwgbWUpO1xuICAgICAgICAgICAgLy8gdmFyIHBhcmVudEVsID0gZ2V0Tm9kZVN0dW1wUGFyZW50KG1lKTtcbiAgICAgICAgICAgIGNoaWxkLmF0dGFjaChtZS5lbC5wYXJlbnROb2RlLCBtZS5lbCk7XG5cbiAgICAgICAgICAgIG1lLmNoaWxkcmVuWzBdID0gY2hpbGQ7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG4vLyBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBJZk5vZGU7XG5cblxuLyoqXG4gKiBAZmlsZSB0ZW1wbGF0ZSDoioLngrnnsbtcbiAqIEBhdXRob3IgZXJyb3JyaWsoZXJyb3JyaWtAZ21haWwuY29tKVxuICovXG5cbi8vIHZhciBlYWNoID0gcmVxdWlyZSgnLi4vdXRpbC9lYWNoJyk7XG4vLyB2YXIgZ3VpZCA9IHJlcXVpcmUoJy4uL3V0aWwvZ3VpZCcpO1xuLy8gdmFyIGluc2VydEJlZm9yZSA9IHJlcXVpcmUoJy4uL2Jyb3dzZXIvaW5zZXJ0LWJlZm9yZScpO1xuLy8gdmFyIE5vZGVUeXBlID0gcmVxdWlyZSgnLi9ub2RlLXR5cGUnKTtcbi8vIHZhciBMaWZlQ3ljbGUgPSByZXF1aXJlKCcuL2xpZmUtY3ljbGUnKTtcbi8vIHZhciBub2RlRGlzcG9zZSA9IHJlcXVpcmUoJy4vbm9kZS1kaXNwb3NlJyk7XG4vLyB2YXIgY3JlYXRlUmV2ZXJzZU5vZGUgPSByZXF1aXJlKCcuL2NyZWF0ZS1yZXZlcnNlLW5vZGUnKTtcbi8vIHZhciBlbGVtZW50RGlzcG9zZUNoaWxkcmVuID0gcmVxdWlyZSgnLi9lbGVtZW50LWRpc3Bvc2UtY2hpbGRyZW4nKTtcbi8vIHZhciBlbGVtZW50T3duVG9QaGFzZSA9IHJlcXVpcmUoJy4vZWxlbWVudC1vd24tdG8tcGhhc2UnKTtcbi8vIHZhciBlbGVtZW50VXBkYXRlQ2hpbGRyZW4gPSByZXF1aXJlKCcuL2VsZW1lbnQtdXBkYXRlLWNoaWxkcmVuJyk7XG4vLyB2YXIgbm9kZU93bk9ubHlDaGlsZHJlbkF0dGFjaCA9IHJlcXVpcmUoJy4vbm9kZS1vd24tb25seS1jaGlsZHJlbi1hdHRhY2gnKTtcblxuLyoqXG4gKiB0ZW1wbGF0ZSDoioLngrnnsbtcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYU5vZGUg5oq96LGh6IqC54K5XG4gKiBAcGFyYW0ge0NvbXBvbmVudH0gb3duZXIg5omA5bGe57uE5Lu2546v5aKDXG4gKiBAcGFyYW0ge01vZGVsPX0gc2NvcGUg5omA5bGe5pWw5o2u546v5aKDXG4gKiBAcGFyYW0ge05vZGV9IHBhcmVudCDniLbkurLoioLngrlcbiAqIEBwYXJhbSB7RE9NQ2hpbGRyZW5XYWxrZXI/fSByZXZlcnNlV2Fsa2VyIOWtkOWFg+e0oOmBjeWOhuWvueixoVxuICovXG5mdW5jdGlvbiBUZW1wbGF0ZU5vZGUoYU5vZGUsIG93bmVyLCBzY29wZSwgcGFyZW50LCByZXZlcnNlV2Fsa2VyKSB7XG4gICAgdGhpcy5hTm9kZSA9IGFOb2RlO1xuICAgIHRoaXMub3duZXIgPSBvd25lcjtcbiAgICB0aGlzLnNjb3BlID0gc2NvcGU7XG4gICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgdGhpcy5wYXJlbnRDb21wb25lbnQgPSBwYXJlbnQubm9kZVR5cGUgPT09IE5vZGVUeXBlLkNNUFRcbiAgICAgICAgPyBwYXJlbnRcbiAgICAgICAgOiBwYXJlbnQucGFyZW50Q29tcG9uZW50O1xuXG4gICAgdGhpcy5pZCA9IGd1aWQoKTtcbiAgICB0aGlzLmxpZmVDeWNsZSA9IExpZmVDeWNsZS5zdGFydDtcbiAgICB0aGlzLmNoaWxkcmVuID0gW107XG5cbiAgICAvLyAjW2JlZ2luXSByZXZlcnNlXG4gICAgaWYgKHJldmVyc2VXYWxrZXIpIHtcbiAgICAgICAgdGhpcy5zZWwgPSBkb2N1bWVudC5jcmVhdGVDb21tZW50KHRoaXMuaWQpO1xuICAgICAgICBpbnNlcnRCZWZvcmUodGhpcy5zZWwsIHJldmVyc2VXYWxrZXIudGFyZ2V0LCByZXZlcnNlV2Fsa2VyLmN1cnJlbnQpO1xuXG4gICAgICAgIHZhciBtZSA9IHRoaXM7XG4gICAgICAgIGVhY2godGhpcy5hTm9kZS5jaGlsZHJlbiwgZnVuY3Rpb24gKGFOb2RlQ2hpbGQpIHtcbiAgICAgICAgICAgIG1lLmNoaWxkcmVuLnB1c2goY3JlYXRlUmV2ZXJzZU5vZGUoYU5vZGVDaGlsZCwgcmV2ZXJzZVdhbGtlciwgbWUpKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5lbCA9IGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQodGhpcy5pZCk7XG4gICAgICAgIGluc2VydEJlZm9yZSh0aGlzLmVsLCByZXZlcnNlV2Fsa2VyLnRhcmdldCwgcmV2ZXJzZVdhbGtlci5jdXJyZW50KTtcblxuICAgICAgICB0aGlzLl90b1BoYXNlKCdhdHRhY2hlZCcpO1xuICAgIH1cbiAgICAvLyAjW2VuZF1cbn1cblxuXG5cblRlbXBsYXRlTm9kZS5wcm90b3R5cGUubm9kZVR5cGUgPSBOb2RlVHlwZS5UUEw7XG5cblRlbXBsYXRlTm9kZS5wcm90b3R5cGUuYXR0YWNoID0gbm9kZU93bk9ubHlDaGlsZHJlbkF0dGFjaDtcblxuLyoqXG4gKiDplIDmr4Hph4rmlL5cbiAqXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBub0RldGFjaCDmmK/lkKbkuI3opoHmioroioLngrnku45kb23np7vpmaRcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG5vVHJhbnNpdGlvbiDmmK/lkKbkuI3mmL7npLrov4fmuKHliqjnlLvmlYjmnpxcbiAqL1xuVGVtcGxhdGVOb2RlLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKG5vRGV0YWNoLCBub1RyYW5zaXRpb24pIHtcbiAgICBlbGVtZW50RGlzcG9zZUNoaWxkcmVuKHRoaXMsIG5vRGV0YWNoLCBub1RyYW5zaXRpb24pO1xuICAgIG5vZGVEaXNwb3NlKHRoaXMpO1xufTtcblxuXG5UZW1wbGF0ZU5vZGUucHJvdG90eXBlLl90b1BoYXNlID0gZWxlbWVudE93blRvUGhhc2U7XG5cbi8qKlxuICog6KeG5Zu+5pu05paw5Ye95pWwXG4gKlxuICogQHBhcmFtIHtBcnJheX0gY2hhbmdlcyDmlbDmja7lj5jljJbkv6Hmga9cbiAqL1xuVGVtcGxhdGVOb2RlLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKGNoYW5nZXMpIHtcbiAgICBlbGVtZW50VXBkYXRlQ2hpbGRyZW4odGhpcywgY2hhbmdlcyk7XG59O1xuXG4vLyBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBUZW1wbGF0ZU5vZGU7XG5cblxuLyoqXG4gKiBAZmlsZSDlr7nlhYPntKDnmoTlrZDoioLngrnov5vooYzlj43op6NcbiAqIEBhdXRob3IgZXJyb3JyaWsoZXJyb3JyaWtAZ21haWwuY29tKVxuICovXG5cblxuLy8gdmFyIGVhY2ggPSByZXF1aXJlKCcuLi91dGlsL2VhY2gnKTtcbi8vIHZhciBET01DaGlsZHJlbldhbGtlciA9IHJlcXVpcmUoJy4vZG9tLWNoaWxkcmVuLXdhbGtlcicpO1xuLy8gdmFyIGNyZWF0ZVJldmVyc2VOb2RlID0gcmVxdWlyZSgnLi9jcmVhdGUtcmV2ZXJzZS1ub2RlJyk7XG5cbi8vICNbYmVnaW5dIHJldmVyc2VcblxuLyoqXG4gKiDlr7nlhYPntKDnmoTlrZDoioLngrnov5vooYzlj43op6NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZWxlbWVudCDlhYPntKBcbiAqL1xuZnVuY3Rpb24gcmV2ZXJzZUVsZW1lbnRDaGlsZHJlbihlbGVtZW50KSB7XG4gICAgdmFyIGh0bWxEaXJlY3RpdmUgPSBlbGVtZW50LmFOb2RlLmRpcmVjdGl2ZXMuaHRtbDtcblxuICAgIGlmICghaHRtbERpcmVjdGl2ZSkge1xuICAgICAgICB2YXIgcmV2ZXJzZVdhbGtlciA9IG5ldyBET01DaGlsZHJlbldhbGtlcihlbGVtZW50LmVsKTtcblxuICAgICAgICBlYWNoKGVsZW1lbnQuYU5vZGUuY2hpbGRyZW4sIGZ1bmN0aW9uIChhTm9kZUNoaWxkKSB7XG4gICAgICAgICAgICBlbGVtZW50LmNoaWxkcmVuLnB1c2goY3JlYXRlUmV2ZXJzZU5vZGUoYU5vZGVDaGlsZCwgcmV2ZXJzZVdhbGtlciwgZWxlbWVudCkpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG4vLyAjW2VuZF1cblxuLy8gZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmV2ZXJzZUVsZW1lbnRDaGlsZHJlbjtcblxuXG4vKipcbiAqIEBmaWxlIOWkhOeQhuWFg+e0oOeahOWxnuaAp+aTjeS9nFxuICogQGF1dGhvciBlcnJvcnJpayhlcnJvcnJpa0BnbWFpbC5jb20pXG4gKi9cblxuLy8gdmFyIGdldFByb3BIYW5kbGVyID0gcmVxdWlyZSgnLi9nZXQtcHJvcC1oYW5kbGVyJyk7XG5cbi8qKlxuICog5aSE55CG5YWD57Sg5bGe5oCn5pON5L2cXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGVsZW1lbnQg5YWD57Sg5a+56LGhXG4gKiBAcGFyYW0geyp9IHZhbHVlIOWxnuaAp+WAvFxuICogQHBhcmFtIHtPYmplY3R9IHByb3Ag5bGe5oCn5L+h5oGv5a+56LGhXG4gKi9cbmZ1bmN0aW9uIGhhbmRsZVByb3AoZWxlbWVudCwgdmFsdWUsIHByb3ApIHtcbiAgICB2YXIgbmFtZSA9IHByb3AubmFtZTtcbiAgICBnZXRQcm9wSGFuZGxlcihlbGVtZW50LnRhZ05hbWUsIG5hbWUpLnByb3AoZWxlbWVudC5lbCwgdmFsdWUsIG5hbWUsIGVsZW1lbnQsIHByb3ApO1xufVxuXG4vLyBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBoYW5kbGVQcm9wO1xuXG5cbi8qKlxuICogQGZpbGUg5Yib5bu66IqC54K55a+55bqU55qEIEhUTUxFbGVtZW50IOS4u+WFg+e0oFxuICogQGF1dGhvciBlcnJvcnJpayhlcnJvcnJpa0BnbWFpbC5jb20pXG4gKi9cblxuXG4vLyB2YXIgZXZhbEV4cHIgPSByZXF1aXJlKCcuLi9ydW50aW1lL2V2YWwtZXhwcicpO1xuLy8gdmFyIGNyZWF0ZUVsID0gcmVxdWlyZSgnLi4vYnJvd3Nlci9jcmVhdGUtZWwnKTtcbi8vIHZhciBoYW5kbGVQcm9wID0gcmVxdWlyZSgnLi9oYW5kbGUtcHJvcCcpO1xuLy8gdmFyIExpZmVDeWNsZSA9IHJlcXVpcmUoJy4vbGlmZS1jeWNsZScpO1xuLy8gdmFyIE5vZGVUeXBlID0gcmVxdWlyZSgnLi9ub2RlLXR5cGUnKTtcblxudmFyIGVtcHR5UHJvcFdoZW5DcmVhdGUgPSB7XG4gICAgJ2NsYXNzJzogMSxcbiAgICAnc3R5bGUnOiAxLFxuICAgICdpZCc6IDFcbn07XG5cbi8qKlxuICog5Yib5bu66IqC54K55a+55bqU55qEIEhUTUxFbGVtZW50IOS4u+WFg+e0oFxuICovXG5mdW5jdGlvbiBlbGVtZW50T3duQ3JlYXRlKCkge1xuICAgIGlmICghdGhpcy5saWZlQ3ljbGUuY3JlYXRlZCkge1xuICAgICAgICB0aGlzLmxpZmVDeWNsZSA9IExpZmVDeWNsZS5wYWludGluZztcblxuICAgICAgICB2YXIgaXNDb21wb25lbnQgPSB0aGlzLm5vZGVUeXBlID09PSBOb2RlVHlwZS5DTVBUO1xuICAgICAgICB2YXIgc291cmNlTm9kZSA9IHRoaXMuYU5vZGUuaG90c3BvdC5zb3VyY2VOb2RlO1xuICAgICAgICB2YXIgcHJvcHMgPSB0aGlzLmFOb2RlLnByb3BzO1xuXG4gICAgICAgIGlmIChzb3VyY2VOb2RlKSB7XG4gICAgICAgICAgICB0aGlzLmVsID0gc291cmNlTm9kZS5jbG9uZU5vZGUoKTtcbiAgICAgICAgICAgIHByb3BzID0gdGhpcy5hTm9kZS5ob3RzcG90LmR5bmFtaWNQcm9wcztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZWwgPSBjcmVhdGVFbCh0aGlzLnRhZ05hbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBwcm9wcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBwcm9wID0gcHJvcHNbaV07XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBpc0NvbXBvbmVudFxuICAgICAgICAgICAgICAgID8gZXZhbEV4cHIocHJvcC5leHByLCB0aGlzLmRhdGEsIHRoaXMpXG4gICAgICAgICAgICAgICAgOiBldmFsRXhwcihwcm9wLmV4cHIsIHRoaXMuc2NvcGUsIHRoaXMub3duZXIpO1xuXG4gICAgICAgICAgICBpZiAodmFsdWUgfHwgIWVtcHR5UHJvcFdoZW5DcmVhdGVbcHJvcC5uYW1lXSkge1xuICAgICAgICAgICAgICAgIGhhbmRsZVByb3AodGhpcywgdmFsdWUsIHByb3ApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fdG9QaGFzZSgnY3JlYXRlZCcpO1xuICAgIH1cbn1cblxuLy8gZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZWxlbWVudE93bkNyZWF0ZTtcblxuXG4vKipcbiAqIEBmaWxlIOWwhuWFg+e0oGF0dGFjaOWIsOmhtemdolxuICogQGF1dGhvciBlcnJvcnJpayhlcnJvcnJpa0BnbWFpbC5jb20pXG4gKi9cblxuLy8gdmFyIGNyZWF0ZU5vZGUgPSByZXF1aXJlKCcuL2NyZWF0ZS1ub2RlJyk7XG4vLyB2YXIgZXZhbEV4cHIgPSByZXF1aXJlKCcuLi9ydW50aW1lL2V2YWwtZXhwcicpO1xuLy8gdmFyIGluc2VydEJlZm9yZSA9IHJlcXVpcmUoJy4uL2Jyb3dzZXIvaW5zZXJ0LWJlZm9yZScpO1xuXG4vKipcbiAqIOWwhuWFg+e0oGF0dGFjaOWIsOmhtemdolxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBlbGVtZW50IOWFg+e0oOiKgueCuVxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcGFyZW50RWwg6KaB5re75Yqg5Yiw55qE54i25YWD57SgXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW5077ydfSBiZWZvcmVFbCDopoHmt7vliqDliLDlk6rkuKrlhYPntKDkuYvliY1cbiAqL1xuZnVuY3Rpb24gZWxlbWVudEF0dGFjaChlbGVtZW50LCBwYXJlbnRFbCwgYmVmb3JlRWwpIHtcbiAgICBlbGVtZW50Ll9jcmVhdGUoKTtcbiAgICBpbnNlcnRCZWZvcmUoZWxlbWVudC5lbCwgcGFyZW50RWwsIGJlZm9yZUVsKTtcblxuICAgIGlmICghZWxlbWVudC5fY29udGVudFJlYWR5KSB7XG4gICAgICAgIHZhciBodG1sRGlyZWN0aXZlID0gZWxlbWVudC5hTm9kZS5kaXJlY3RpdmVzLmh0bWw7XG5cbiAgICAgICAgaWYgKGh0bWxEaXJlY3RpdmUpIHtcbiAgICAgICAgICAgIGVsZW1lbnQuZWwuaW5uZXJIVE1MID0gZXZhbEV4cHIoaHRtbERpcmVjdGl2ZS52YWx1ZSwgZWxlbWVudC5zY29wZSwgZWxlbWVudC5vd25lcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgYU5vZGVDaGlsZHJlbiA9IGVsZW1lbnQuYU5vZGUuY2hpbGRyZW47XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFOb2RlQ2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgY2hpbGQgPSBjcmVhdGVOb2RlKGFOb2RlQ2hpbGRyZW5baV0sIGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuY2hpbGRyZW4ucHVzaChjaGlsZCk7XG4gICAgICAgICAgICAgICAgY2hpbGQuYXR0YWNoKGVsZW1lbnQuZWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZWxlbWVudC5fY29udGVudFJlYWR5ID0gMTtcbiAgICB9XG59XG5cblxuLy8gZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZWxlbWVudEF0dGFjaDtcblxuXG4vKipcbiAqIEBmaWxlIOWwhuWFg+e0oGF0dGFjaOWIsOmhtemdolxuICogQGF1dGhvciBlcnJvcnJpayhlcnJvcnJpa0BnbWFpbC5jb20pXG4gKi9cblxuXG4vLyB2YXIgZWxlbWVudEF0dGFjaCA9IHJlcXVpcmUoJy4vZWxlbWVudC1hdHRhY2gnKTtcblxuLyoqXG4gKiDlsIblhYPntKBhdHRhY2jliLDpobXpnaJcbiAqXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBwYXJlbnRFbCDopoHmt7vliqDliLDnmoTniLblhYPntKBcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnTvvJ19IGJlZm9yZUVsIOimgea3u+WKoOWIsOWTquS4quWFg+e0oOS5i+WJjVxuICovXG5mdW5jdGlvbiBlbGVtZW50T3duQXR0YWNoKHBhcmVudEVsLCBiZWZvcmVFbCkge1xuICAgIGlmICghdGhpcy5saWZlQ3ljbGUuYXR0YWNoZWQpIHtcbiAgICAgICAgZWxlbWVudEF0dGFjaCh0aGlzLCBwYXJlbnRFbCwgYmVmb3JlRWwpO1xuICAgICAgICB0aGlzLl9hdHRhY2hlZCgpO1xuICAgIH1cbn1cblxuLy8gZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZWxlbWVudE93bkF0dGFjaDtcblxuXG4vKipcbiAqIEBmaWxlIOiOt+WPliBlbGVtZW50IOeahCB0cmFuc2l0aW9uIOaOp+WItuWvueixoVxuICogQGF1dGhvciBlcnJvcnJpayhlcnJvcnJpa0BnbWFpbC5jb20pXG4gKi9cblxuLy8gdmFyIGV2YWxBcmdzID0gcmVxdWlyZSgnLi4vcnVudGltZS9ldmFsLWFyZ3MnKTtcbi8vIHZhciBmaW5kTWV0aG9kID0gcmVxdWlyZSgnLi4vcnVudGltZS9maW5kLW1ldGhvZCcpO1xuLy8gdmFyIE5vZGVUeXBlID0gcmVxdWlyZSgnLi9ub2RlLXR5cGUnKTtcblxuLyoqXG4gKiDojrflj5YgZWxlbWVudCDnmoQgdHJhbnNpdGlvbiDmjqfliLblr7nosaFcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZWxlbWVudCDlhYPntKBcbiAqIEByZXR1cm4ge09iamVjdD99XG4gKi9cbmZ1bmN0aW9uIGVsZW1lbnRHZXRUcmFuc2l0aW9uKGVsZW1lbnQpIHtcbiAgICB2YXIgYU5vZGUgPSBlbGVtZW50Lm5vZGVUeXBlID09PSBOb2RlVHlwZS5DTVBUID8gZWxlbWVudC5naXZlbkFOb2RlIDogZWxlbWVudC5hTm9kZTtcbiAgICB2YXIgZGlyZWN0aXZlID0gYU5vZGUgJiYgYU5vZGUuZGlyZWN0aXZlcy50cmFuc2l0aW9uO1xuICAgIHZhciBvd25lciA9IGVsZW1lbnQub3duZXI7XG5cbiAgICB2YXIgdHJhbnNpdGlvbjtcbiAgICBpZiAoZGlyZWN0aXZlICYmIG93bmVyKSB7XG4gICAgICAgIHRyYW5zaXRpb24gPSBmaW5kTWV0aG9kKG93bmVyLCBkaXJlY3RpdmUudmFsdWUubmFtZSk7XG5cbiAgICAgICAgaWYgKHR5cGVvZiB0cmFuc2l0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0cmFuc2l0aW9uID0gdHJhbnNpdGlvbi5hcHBseShcbiAgICAgICAgICAgICAgICBvd25lcixcbiAgICAgICAgICAgICAgICBldmFsQXJncyhkaXJlY3RpdmUudmFsdWUuYXJncywgZWxlbWVudC5zY29wZSwgb3duZXIpXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRyYW5zaXRpb24gfHwgZWxlbWVudC50cmFuc2l0aW9uO1xufVxuXG4vLyBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBlbGVtZW50R2V0VHJhbnNpdGlvbjtcblxuXG4vKipcbiAqIEBmaWxlIOWFg+e0oOiKgueCueaJp+ihjGxlYXZl6KGM5Li6XG4gKiBAYXV0aG9yIGVycm9ycmlrKGVycm9ycmlrQGdtYWlsLmNvbSlcbiAqL1xuXG4vLyB2YXIgZWxlbWVudEdldFRyYW5zaXRpb24gPSByZXF1aXJlKCcuL2VsZW1lbnQtZ2V0LXRyYW5zaXRpb24nKTtcblxuXG4vKipcbiAqIOWFg+e0oOiKgueCueaJp+ihjGxlYXZl6KGM5Li6XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGVsZW1lbnQg5YWD57SgXG4gKi9cbmZ1bmN0aW9uIGVsZW1lbnRMZWF2ZShlbGVtZW50KSB7XG4gICAgdmFyIGxpZmVDeWNsZSA9IGVsZW1lbnQubGlmZUN5Y2xlO1xuICAgIGlmIChsaWZlQ3ljbGUubGVhdmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGVsZW1lbnQuZGlzcG9zZU5vVHJhbnNpdGlvbikge1xuICAgICAgICBlbGVtZW50Ll9kb25lTGVhdmUoKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHZhciB0cmFuc2l0aW9uID0gZWxlbWVudEdldFRyYW5zaXRpb24oZWxlbWVudCk7XG5cbiAgICAgICAgaWYgKHRyYW5zaXRpb24gJiYgdHJhbnNpdGlvbi5sZWF2ZSkge1xuICAgICAgICAgICAgZWxlbWVudC5fdG9QaGFzZSgnbGVhdmluZycpO1xuICAgICAgICAgICAgdHJhbnNpdGlvbi5sZWF2ZShlbGVtZW50LmVsLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5fZG9uZUxlYXZlKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGVsZW1lbnQuX2RvbmVMZWF2ZSgpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vLyBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBlbGVtZW50TGVhdmU7XG5cblxuLyoqXG4gKiBAZmlsZSDlsIblhYPntKDku47pobXpnaLkuIrnp7vpmaRcbiAqIEBhdXRob3IgZXJyb3JyaWsoZXJyb3JyaWtAZ21haWwuY29tKVxuICovXG5cbi8vIHZhciBlbGVtZW50TGVhdmUgPSByZXF1aXJlKCcuL2VsZW1lbnQtbGVhdmUnKTtcblxuLyoqXG4gKiDlsIblhYPntKDku47pobXpnaLkuIrnp7vpmaRcbiAqL1xuZnVuY3Rpb24gZWxlbWVudE93bkRldGFjaCgpIHtcbiAgICBlbGVtZW50TGVhdmUodGhpcyk7XG59XG5cblxuLy8gZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZWxlbWVudE93bkRldGFjaDtcblxuXG4vKipcbiAqIEBmaWxlIOmUgOavgemHiuaUvuWFg+e0oFxuICogQGF1dGhvciBlcnJvcnJpayhlcnJvcnJpa0BnbWFpbC5jb20pXG4gKi9cblxuLy8gdmFyIGVsZW1lbnRMZWF2ZSA9IHJlcXVpcmUoJy4vZWxlbWVudC1sZWF2ZScpO1xuXG4vKipcbiAqIOmUgOavgemHiuaUvuWFg+e0oFxuICpcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG5vRGV0YWNoIOaYr+WQpuS4jeimgeaKiuiKgueCueS7jmRvbeenu+mZpFxuICogQHBhcmFtIHtib29sZWFuPX0gbm9UcmFuc2l0aW9uIOaYr+WQpuS4jeaYvuekuui/h+a4oeWKqOeUu+aViOaenFxuICovXG5mdW5jdGlvbiBlbGVtZW50T3duRGlzcG9zZShub0RldGFjaCwgbm9UcmFuc2l0aW9uKSB7XG4gICAgdGhpcy5sZWF2ZURpc3Bvc2UgPSAxO1xuICAgIHRoaXMuZGlzcG9zZU5vRGV0YWNoID0gbm9EZXRhY2g7XG4gICAgdGhpcy5kaXNwb3NlTm9UcmFuc2l0aW9uID0gbm9UcmFuc2l0aW9uO1xuXG4gICAgZWxlbWVudExlYXZlKHRoaXMpO1xufVxuXG4vLyBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBlbGVtZW50T3duRGlzcG9zZTtcblxuXG4vKipcbiAqIEBmaWxlIOS4uuWFg+e0oOeahCBlbCDnu5Hlrprkuovku7ZcbiAqIEBhdXRob3IgZXJyb3JyaWsoZXJyb3JyaWtAZ21haWwuY29tKVxuICovXG5cbi8vIHZhciBvbiA9IHJlcXVpcmUoJy4uL2Jyb3dzZXIvb24nKTtcblxuLyoqXG4gKiDkuLrlhYPntKDnmoQgZWwg57uR5a6a5LqL5Lu2XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUg5LqL5Lu25ZCNXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciDnm5HlkKzlmahcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gY2FwdHVyZSDmmK/lkKbmmK/mjZXojrfpmLbmrrXop6blj5FcbiAqL1xuZnVuY3Rpb24gZWxlbWVudE93bk9uRWwobmFtZSwgbGlzdGVuZXIsIGNhcHR1cmUpIHtcbiAgICBpZiAodHlwZW9mIGxpc3RlbmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGNhcHR1cmUgPSAhIWNhcHR1cmU7XG4gICAgICAgIHRoaXMuX2VsRm5zLnB1c2goW25hbWUsIGxpc3RlbmVyLCBjYXB0dXJlXSk7XG4gICAgICAgIG9uKHRoaXMuZWwsIG5hbWUsIGxpc3RlbmVyLCBjYXB0dXJlKTtcbiAgICB9XG59XG5cbi8vIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGVsZW1lbnRPd25PbkVsO1xuXG5cbi8qKlxuICogQGZpbGUgIOS6i+S7tue7keWumuS4jeWtmOWcqOeahCB3YXJuaW5nXG4gKiBAYXV0aG9yIHZhcnNoYSh3YW5nc2h1b25wdUBnbWFpbC5jb20pXG4gKi9cblxuLy8gdmFyIGVhY2ggPSByZXF1aXJlKCcuLi91dGlsL2VhY2gnKTtcblxuLy8gI1tiZWdpbl0gZXJyb3Jcbi8qKlxuICog5LqL5Lu257uR5a6a5LiN5a2Y5Zyo55qEIHdhcm5pbmdcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZXZlbnRCaW5kIOS6i+S7tue7keWumuWvueixoVxuICogQHBhcmFtIHtDb21wb25lbnR9IG93bmVyIOaJgOWxnueahOe7hOS7tuWvueixoVxuICovXG5mdW5jdGlvbiB3YXJuRXZlbnRMaXN0ZW5NZXRob2QoZXZlbnRCaW5kLCBvd25lcikge1xuICAgIHZhciB2YWxpZCA9IHRydWU7XG4gICAgdmFyIG1ldGhvZCA9IG93bmVyO1xuICAgIGVhY2goZXZlbnRCaW5kLmV4cHIubmFtZS5wYXRocywgZnVuY3Rpb24gKHBhdGgpIHtcbiAgICAgICAgaWYgKCFwYXRoLnZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBtZXRob2QgPSBtZXRob2RbcGF0aC52YWx1ZV07XG4gICAgICAgIHZhbGlkID0gISFtZXRob2Q7XG4gICAgICAgIHJldHVybiB2YWxpZDtcbiAgICB9KTtcblxuICAgIGlmICghdmFsaWQpIHtcbiAgICAgICAgdmFyIHBhdGhzID0gW107XG4gICAgICAgIGVhY2goZXZlbnRCaW5kLmV4cHIubmFtZS5wYXRocywgZnVuY3Rpb24gKHBhdGgpIHtcbiAgICAgICAgICAgIHBhdGhzLnB1c2gocGF0aC52YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgbWVzc2FnZSA9ICdbU0FOIFdBUk5JTkddICcgKyBldmVudEJpbmQubmFtZSArICcgbGlzdGVuIGZhaWwsXCInICsgcGF0aHMuam9pbignLicpICsgJ1wiIG5vdCBleGlzdCc7XG5cbiAgICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUgPT09ICdvYmplY3QnICYmIGNvbnNvbGUud2Fybikge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKG1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICAgIC8qIGVzbGludC1lbmFibGUgbm8tY29uc29sZSAqL1xuICAgIH1cbn1cbi8vICNbZW5kXVxuXG4vLyBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSB3YXJuRXZlbnRMaXN0ZW5NZXRob2Q7XG5cblxuLyoqXG4gKiBAZmlsZSDlrozmiJDlhYPntKAgYXR0YWNoZWQg5ZCO55qE6KGM5Li6XG4gKiBAYXV0aG9yIGVycm9ycmlrKGVycm9ycmlrQGdtYWlsLmNvbSlcbiAqL1xuXG5cbi8vIHZhciBiaW5kID0gcmVxdWlyZSgnLi4vdXRpbC9iaW5kJyk7XG4vLyB2YXIgZW1wdHkgPSByZXF1aXJlKCcuLi91dGlsL2VtcHR5Jyk7XG4vLyB2YXIgaXNCcm93c2VyID0gcmVxdWlyZSgnLi4vYnJvd3Nlci9pcy1icm93c2VyJyk7XG4vLyB2YXIgdHJpZ2dlciA9IHJlcXVpcmUoJy4uL2Jyb3dzZXIvdHJpZ2dlcicpO1xuLy8gdmFyIE5vZGVUeXBlID0gcmVxdWlyZSgnLi9ub2RlLXR5cGUnKTtcbi8vIHZhciBlbGVtZW50R2V0VHJhbnNpdGlvbiA9IHJlcXVpcmUoJy4vZWxlbWVudC1nZXQtdHJhbnNpdGlvbicpO1xuLy8gdmFyIGV2ZW50RGVjbGFyYXRpb25MaXN0ZW5lciA9IHJlcXVpcmUoJy4vZXZlbnQtZGVjbGFyYXRpb24tbGlzdGVuZXInKTtcbi8vIHZhciBnZXRQcm9wSGFuZGxlciA9IHJlcXVpcmUoJy4vZ2V0LXByb3AtaGFuZGxlcicpO1xuLy8gdmFyIHdhcm5FdmVudExpc3Rlbk1ldGhvZCA9IHJlcXVpcmUoJy4vd2Fybi1ldmVudC1saXN0ZW4tbWV0aG9kJyk7XG5cbi8qKlxuICog5Y+M57uR6L6T5YWl5qGGQ29tcG9zaXRpb25FbmTkuovku7bnm5HlkKzlh73mlbBcbiAqXG4gKiBAaW5uZXJcbiAqL1xuZnVuY3Rpb24gaW5wdXRPbkNvbXBvc2l0aW9uRW5kKCkge1xuICAgIGlmICghdGhpcy5jb21wb3NpbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuY29tcG9zaW5nID0gMDtcblxuICAgIHRyaWdnZXIodGhpcywgJ2lucHV0Jyk7XG59XG5cbi8qKlxuICog5Y+M57uR6L6T5YWl5qGGQ29tcG9zaXRpb25TdGFydOS6i+S7tuebkeWQrOWHveaVsFxuICpcbiAqIEBpbm5lclxuICovXG5mdW5jdGlvbiBpbnB1dE9uQ29tcG9zaXRpb25TdGFydCgpIHtcbiAgICB0aGlzLmNvbXBvc2luZyA9IDE7XG59XG5cbmZ1bmN0aW9uIHhQcm9wT3V0cHV0ZXIoeFByb3AsIGRhdGEpIHtcbiAgICBnZXRQcm9wSGFuZGxlcih0aGlzLnRhZ05hbWUsIHhQcm9wLm5hbWUpLm91dHB1dCh0aGlzLCB4UHJvcCwgZGF0YSk7XG59XG5cbmZ1bmN0aW9uIGlucHV0WFByb3BPdXRwdXRlcihlbGVtZW50LCB4UHJvcCwgZGF0YSkge1xuICAgIHZhciBvdXRwdXRlciA9IGJpbmQoeFByb3BPdXRwdXRlciwgZWxlbWVudCwgeFByb3AsIGRhdGEpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoZSkge1xuICAgICAgICBpZiAoIXRoaXMuY29tcG9zaW5nKSB7XG4gICAgICAgICAgICBvdXRwdXRlcihlKTtcbiAgICAgICAgfVxuICAgIH07XG59XG5cbi8qKlxuICog5a6M5oiQ5YWD57SgIGF0dGFjaGVkIOWQjueahOihjOS4ulxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBlbGVtZW50IOWFg+e0oOiKgueCuVxuICovXG5mdW5jdGlvbiBlbGVtZW50T3duQXR0YWNoZWQoKSB7XG4gICAgdGhpcy5fdG9QaGFzZSgnY3JlYXRlZCcpO1xuXG4gICAgdmFyIGlzQ29tcG9uZW50ID0gdGhpcy5ub2RlVHlwZSA9PT0gTm9kZVR5cGUuQ01QVDtcbiAgICB2YXIgZGF0YSA9IGlzQ29tcG9uZW50ID8gdGhpcy5kYXRhIDogdGhpcy5zY29wZTtcblxuICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXJlZGVjbGFyZSAqL1xuXG4gICAgLy8g5aSE55CG6Ieq6Lqr5Y+Y5YyW5pe25Y+M5ZCR57uR5a6a55qE6YC76L6RXG4gICAgdmFyIHhQcm9wcyA9IHRoaXMuYU5vZGUuaG90c3BvdC54UHJvcHM7XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSB4UHJvcHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHZhciB4UHJvcCA9IHhQcm9wc1tpXTtcblxuICAgICAgICBzd2l0Y2ggKHhQcm9wLm5hbWUpIHtcbiAgICAgICAgICAgIGNhc2UgJ3ZhbHVlJzpcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMudGFnTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdpbnB1dCc6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3RleHRhcmVhJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0Jyb3dzZXIgJiYgd2luZG93LkNvbXBvc2l0aW9uRXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9vbkVsKCdjaGFuZ2UnLCBpbnB1dE9uQ29tcG9zaXRpb25FbmQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX29uRWwoJ2NvbXBvc2l0aW9uc3RhcnQnLCBpbnB1dE9uQ29tcG9zaXRpb25TdGFydCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fb25FbCgnY29tcG9zaXRpb25lbmQnLCBpbnB1dE9uQ29tcG9zaXRpb25FbmQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9vbkVsKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICgnb25pbnB1dCcgaW4gdGhpcy5lbCkgPyAnaW5wdXQnIDogJ3Byb3BlcnR5Y2hhbmdlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dFhQcm9wT3V0cHV0ZXIodGhpcywgeFByb3AsIGRhdGEpXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICBjYXNlICdzZWxlY3QnOlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fb25FbCgnY2hhbmdlJywgYmluZCh4UHJvcE91dHB1dGVyLCB0aGlzLCB4UHJvcCwgZGF0YSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlICdjaGVja2VkJzpcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMudGFnTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdpbnB1dCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZWwudHlwZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2NoZWNrYm94JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdyYWRpbyc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX29uRWwoJ2NsaWNrJywgYmluZCh4UHJvcE91dHB1dGVyLCB0aGlzLCB4UHJvcCwgZGF0YSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGJpbmQgZXZlbnRzXG4gICAgdmFyIGV2ZW50cyA9IGlzQ29tcG9uZW50XG4gICAgICAgID8gdGhpcy5hTm9kZS5ldmVudHMuY29uY2F0KHRoaXMubmF0aXZlRXZlbnRzKVxuICAgICAgICA6IHRoaXMuYU5vZGUuZXZlbnRzO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBldmVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHZhciBldmVudEJpbmQgPSBldmVudHNbaV07XG4gICAgICAgIHZhciBvd25lciA9IGlzQ29tcG9uZW50ID8gdGhpcyA6IHRoaXMub3duZXI7XG5cbiAgICAgICAgLy8g5Yik5pat5piv5ZCm5pivbmF0aXZlRXZlbnTvvIzkuIvpnaLnmoR3YXJu5pa55rOV5ZKM5LqL5Lu257uR5a6a6YO96ZyA6KaBXG4gICAgICAgIC8vIOS+neatpOaMh+WummV2ZW50QmluZC5leHByLm5hbWXkvY3kuo5vd25lcui/mOaYr293bmVyLm93bmVy5LiKXG4gICAgICAgIGlmIChldmVudEJpbmQubW9kaWZpZXIubmF0aXZlKSB7XG4gICAgICAgICAgICBvd25lciA9IG93bmVyLm93bmVyO1xuICAgICAgICAgICAgZGF0YSA9IHRoaXMuc2NvcGUgfHwgb3duZXIuZGF0YTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vICNbYmVnaW5dIGVycm9yXG4gICAgICAgIHdhcm5FdmVudExpc3Rlbk1ldGhvZChldmVudEJpbmQsIG93bmVyKTtcbiAgICAgICAgLy8gI1tlbmRdXG5cbiAgICAgICAgdGhpcy5fb25FbChcbiAgICAgICAgICAgIGV2ZW50QmluZC5uYW1lLFxuICAgICAgICAgICAgYmluZChcbiAgICAgICAgICAgICAgICBldmVudERlY2xhcmF0aW9uTGlzdGVuZXIsXG4gICAgICAgICAgICAgICAgb3duZXIsXG4gICAgICAgICAgICAgICAgZXZlbnRCaW5kLFxuICAgICAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAgICAgZGF0YVxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIGV2ZW50QmluZC5tb2RpZmllci5jYXB0dXJlXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgdGhpcy5fdG9QaGFzZSgnYXR0YWNoZWQnKTtcblxuXG4gICAgaWYgKHRoaXMuX2lzSW5pdEZyb21FbCkge1xuICAgICAgICB0aGlzLl9pc0luaXRGcm9tRWwgPSBmYWxzZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHZhciB0cmFuc2l0aW9uID0gZWxlbWVudEdldFRyYW5zaXRpb24odGhpcyk7XG4gICAgICAgIGlmICh0cmFuc2l0aW9uICYmIHRyYW5zaXRpb24uZW50ZXIpIHtcbiAgICAgICAgICAgIHRyYW5zaXRpb24uZW50ZXIodGhpcy5lbCwgZW1wdHkpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vLyBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBlbGVtZW50T3duQXR0YWNoZWQ7XG5cblxuLyoqXG4gKiBAZmlsZSDplIDmr4HlhYPntKDoioLngrlcbiAqIEBhdXRob3IgZXJyb3JyaWsoZXJyb3JyaWtAZ21haWwuY29tKVxuICovXG5cblxuLy8gdmFyIHVuID0gcmVxdWlyZSgnLi4vYnJvd3Nlci91bicpO1xuLy8gdmFyIHJlbW92ZUVsID0gcmVxdWlyZSgnLi4vYnJvd3Nlci9yZW1vdmUtZWwnKTtcbi8vIHZhciBlbGVtZW50RGlzcG9zZUNoaWxkcmVuID0gcmVxdWlyZSgnLi9lbGVtZW50LWRpc3Bvc2UtY2hpbGRyZW4nKTtcbi8vIHZhciBub2RlRGlzcG9zZSA9IHJlcXVpcmUoJy4vbm9kZS1kaXNwb3NlJyk7XG5cbi8qKlxuICog6ZSA5q+B5YWD57Sg6IqC54K5XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGVsZW1lbnQg6KaB6ZSA5q+B55qE5YWD57Sg6IqC54K5XG4gKiBAcGFyYW0ge09iamVjdD19IG9wdGlvbnMg6ZSA5q+B6KGM5Li655qE5Y+C5pWwXG4gKi9cbmZ1bmN0aW9uIGVsZW1lbnREaXNwb3NlKGVsZW1lbnQpIHtcbiAgICBlbGVtZW50RGlzcG9zZUNoaWxkcmVuKGVsZW1lbnQsIDEsIDEpO1xuXG4gICAgLy8gZWwg5LqL5Lu26Kej57uRXG4gICAgdmFyIGxlbiA9IGVsZW1lbnQuX2VsRm5zLmxlbmd0aDtcbiAgICB3aGlsZSAobGVuLS0pIHtcbiAgICAgICAgdmFyIGZuID0gZWxlbWVudC5fZWxGbnNbbGVuXTtcbiAgICAgICAgdW4oZWxlbWVudC5lbCwgZm5bMF0sIGZuWzFdLCBmblsyXSk7XG4gICAgfVxuICAgIGVsZW1lbnQuX2VsRm5zID0gbnVsbDtcblxuXG4gICAgLy8g5aaC5p6c5rKh5pyJcGFyZW5077yM6K+05piO5piv5LiA5Liqcm9vdCBjb21wb25lbnTvvIzkuIDlrpropoHku45kb23moJHkuK1yZW1vdmVcbiAgICBpZiAoIWVsZW1lbnQuZGlzcG9zZU5vRGV0YWNoIHx8ICFlbGVtZW50LnBhcmVudCkge1xuICAgICAgICByZW1vdmVFbChlbGVtZW50LmVsKTtcbiAgICB9XG5cbiAgICBpZiAoZWxlbWVudC5fdG9QaGFzZSkge1xuICAgICAgICBlbGVtZW50Ll90b1BoYXNlKCdkZXRhY2hlZCcpO1xuICAgIH1cblxuICAgIG5vZGVEaXNwb3NlKGVsZW1lbnQpO1xufVxuXG5cbi8vIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGVsZW1lbnREaXNwb3NlO1xuXG5cbi8qKlxuICogQGZpbGUg5Yid5aeL5YyWIGVsZW1lbnQg6IqC54K555qEIHRhZ05hbWUg5aSE55CGXG4gKiBAYXV0aG9yIGVycm9ycmlrKGVycm9ycmlrQGdtYWlsLmNvbSlcbiAqL1xuXG4vLyB2YXIgaWVPbGRUaGFuOSA9IHJlcXVpcmUoJy4uL2Jyb3dzZXIvaWUtb2xkLXRoYW4tOScpO1xuXG4vKipcbiAqIOWIneWni+WMliBlbGVtZW50IOiKgueCueeahCB0YWdOYW1lIOWkhOeQhlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBub2RlIOiKgueCueWvueixoVxuICovXG5mdW5jdGlvbiBlbGVtZW50SW5pdFRhZ05hbWUobm9kZSkge1xuICAgIG5vZGUudGFnTmFtZSA9IG5vZGUudGFnTmFtZSB8fCBub2RlLmFOb2RlLnRhZ05hbWUgfHwgJ2Rpdic7XG5cbiAgICAvLyAjW2JlZ2luXSBhbGx1YVxuICAgIC8vIGllOC0g5LiN5pSv5oyBaW5uZXJIVE1M6L6T5Ye66Ieq5a6a5LmJ5qCH562+XG4gICAgaWYgKGllT2xkVGhhbjkgJiYgbm9kZS50YWdOYW1lLmluZGV4T2YoJy0nKSA+IDApIHtcbiAgICAgICAgbm9kZS50YWdOYW1lID0gJ2Rpdic7XG4gICAgfVxuICAgIC8vICNbZW5kXVxufVxuXG5cbi8vIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGVsZW1lbnRJbml0VGFnTmFtZTtcblxuXG4vKipcbiAqIEBmaWxlIOe7mSBkZXZ0b29sIOWPkemAmuefpea2iOaBr1xuICogQGF1dGhvciBlcnJvcnJpayhlcnJvcnJpa0BnbWFpbC5jb20pXG4gKi9cblxuLy8gdmFyIGlzQnJvd3NlciA9IHJlcXVpcmUoJy4uL2Jyb3dzZXIvaXMtYnJvd3NlcicpO1xuXG4vLyAjW2JlZ2luXSBkZXZ0b29sXG52YXIgc2FuNGRldnRvb2w7XG5cbi8qKlxuICog57uZIGRldnRvb2wg5Y+R6YCa55+l5raI5oGvXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUg5raI5oGv5ZCN56ewXG4gKiBAcGFyYW0geyp9IGFyZyDmtojmga/lj4LmlbBcbiAqL1xuZnVuY3Rpb24gZW1pdERldnRvb2wobmFtZSwgYXJnKSB7XG4gICAgaWYgKGlzQnJvd3NlciAmJiBzYW40ZGV2dG9vbCAmJiBzYW40ZGV2dG9vbC5kZWJ1ZyAmJiB3aW5kb3cuX19zYW5fZGV2dG9vbF9fKSB7XG4gICAgICAgIHdpbmRvdy5fX3Nhbl9kZXZ0b29sX18uZW1pdChuYW1lLCBhcmcpO1xuICAgIH1cbn1cblxuZW1pdERldnRvb2wuc3RhcnQgPSBmdW5jdGlvbiAobWFpbikge1xuICAgIHNhbjRkZXZ0b29sID0gbWFpbjtcbiAgICBlbWl0RGV2dG9vbCgnc2FuJywgbWFpbik7XG59O1xuLy8gI1tlbmRdXG5cbi8vIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGVtaXREZXZ0b29sO1xuXG5cbi8qKlxuICogQGZpbGUg57uE5Lu257G7XG4gKiBAYXV0aG9yIGVycm9ycmlrKGVycm9ycmlrQGdtYWlsLmNvbSlcbiAqL1xuXG4vLyB2YXIgYmluZCA9IHJlcXVpcmUoJy4uL3V0aWwvYmluZCcpO1xuLy8gdmFyIGVhY2ggPSByZXF1aXJlKCcuLi91dGlsL2VhY2gnKTtcbi8vIHZhciBndWlkID0gcmVxdWlyZSgnLi4vdXRpbC9ndWlkJyk7XG4vLyB2YXIgZXh0ZW5kID0gcmVxdWlyZSgnLi4vdXRpbC9leHRlbmQnKTtcbi8vIHZhciBuZXh0VGljayA9IHJlcXVpcmUoJy4uL3V0aWwvbmV4dC10aWNrJyk7XG4vLyB2YXIgZW1pdERldnRvb2wgPSByZXF1aXJlKCcuLi91dGlsL2VtaXQtZGV2dG9vbCcpO1xuLy8gdmFyIEV4cHJUeXBlID0gcmVxdWlyZSgnLi4vcGFyc2VyL2V4cHItdHlwZScpO1xuLy8gdmFyIHBhcnNlRXhwciA9IHJlcXVpcmUoJy4uL3BhcnNlci9wYXJzZS1leHByJyk7XG4vLyB2YXIgY3JlYXRlQWNjZXNzb3IgPSByZXF1aXJlKCcuLi9wYXJzZXIvY3JlYXRlLWFjY2Vzc29yJyk7XG4vLyB2YXIgcG9zdFByb3AgPSByZXF1aXJlKCcuLi9wYXJzZXIvcG9zdC1wcm9wJyk7XG4vLyB2YXIgcmVtb3ZlRWwgPSByZXF1aXJlKCcuLi9icm93c2VyL3JlbW92ZS1lbCcpO1xuLy8gdmFyIERhdGEgPSByZXF1aXJlKCcuLi9ydW50aW1lL2RhdGEnKTtcbi8vIHZhciBldmFsRXhwciA9IHJlcXVpcmUoJy4uL3J1bnRpbWUvZXZhbC1leHByJyk7XG4vLyB2YXIgY2hhbmdlRXhwckNvbXBhcmUgPSByZXF1aXJlKCcuLi9ydW50aW1lL2NoYW5nZS1leHByLWNvbXBhcmUnKTtcbi8vIHZhciBjb21waWxlQ29tcG9uZW50ID0gcmVxdWlyZSgnLi9jb21waWxlLWNvbXBvbmVudCcpO1xuLy8gdmFyIGNvbXBvbmVudFByZWhlYXQgPSByZXF1aXJlKCcuL2NvbXBvbmVudC1wcmVoZWF0Jyk7XG4vLyB2YXIgTGlmZUN5Y2xlID0gcmVxdWlyZSgnLi9saWZlLWN5Y2xlJyk7XG4vLyB2YXIgZ2V0QU5vZGVQcm9wID0gcmVxdWlyZSgnLi9nZXQtYS1ub2RlLXByb3AnKTtcbi8vIHZhciBpc0RhdGFDaGFuZ2VCeUVsZW1lbnQgPSByZXF1aXJlKCcuL2lzLWRhdGEtY2hhbmdlLWJ5LWVsZW1lbnQnKTtcbi8vIHZhciBldmVudERlY2xhcmF0aW9uTGlzdGVuZXIgPSByZXF1aXJlKCcuL2V2ZW50LWRlY2xhcmF0aW9uLWxpc3RlbmVyJyk7XG4vLyB2YXIgcmV2ZXJzZUVsZW1lbnRDaGlsZHJlbiA9IHJlcXVpcmUoJy4vcmV2ZXJzZS1lbGVtZW50LWNoaWxkcmVuJyk7XG4vLyB2YXIgY2FtZWxDb21wb25lbnRCaW5kcyA9IHJlcXVpcmUoJy4vY2FtZWwtY29tcG9uZW50LWJpbmRzJyk7XG4vLyB2YXIgTm9kZVR5cGUgPSByZXF1aXJlKCcuL25vZGUtdHlwZScpO1xuLy8gdmFyIGVsZW1lbnRJbml0VGFnTmFtZSA9IHJlcXVpcmUoJy4vZWxlbWVudC1pbml0LXRhZy1uYW1lJyk7XG4vLyB2YXIgZWxlbWVudE93bkF0dGFjaGVkID0gcmVxdWlyZSgnLi9lbGVtZW50LW93bi1hdHRhY2hlZCcpO1xuLy8gdmFyIGVsZW1lbnREaXNwb3NlID0gcmVxdWlyZSgnLi9lbGVtZW50LWRpc3Bvc2UnKTtcbi8vIHZhciBlbGVtZW50VXBkYXRlQ2hpbGRyZW4gPSByZXF1aXJlKCcuL2VsZW1lbnQtdXBkYXRlLWNoaWxkcmVuJyk7XG4vLyB2YXIgZWxlbWVudE93bk9uRWwgPSByZXF1aXJlKCcuL2VsZW1lbnQtb3duLW9uLWVsJyk7XG4vLyB2YXIgZWxlbWVudE93bkNyZWF0ZSA9IHJlcXVpcmUoJy4vZWxlbWVudC1vd24tY3JlYXRlJyk7XG4vLyB2YXIgZWxlbWVudE93bkF0dGFjaCA9IHJlcXVpcmUoJy4vZWxlbWVudC1vd24tYXR0YWNoJyk7XG4vLyB2YXIgZWxlbWVudE93bkRldGFjaCA9IHJlcXVpcmUoJy4vZWxlbWVudC1vd24tZGV0YWNoJyk7XG4vLyB2YXIgZWxlbWVudE93bkRpc3Bvc2UgPSByZXF1aXJlKCcuL2VsZW1lbnQtb3duLWRpc3Bvc2UnKTtcbi8vIHZhciB3YXJuRXZlbnRMaXN0ZW5NZXRob2QgPSByZXF1aXJlKCcuL3dhcm4tZXZlbnQtbGlzdGVuLW1ldGhvZCcpO1xuLy8gdmFyIGVsZW1lbnREaXNwb3NlQ2hpbGRyZW4gPSByZXF1aXJlKCcuL2VsZW1lbnQtZGlzcG9zZS1jaGlsZHJlbicpO1xuLy8gdmFyIGVsZW1lbnRBdHRhY2ggPSByZXF1aXJlKCcuL2VsZW1lbnQtYXR0YWNoJyk7XG4vLyB2YXIgaGFuZGxlUHJvcCA9IHJlcXVpcmUoJy4vaGFuZGxlLXByb3AnKTtcbi8vIHZhciBjcmVhdGVEYXRhVHlwZXNDaGVja2VyID0gcmVxdWlyZSgnLi4vdXRpbC9jcmVhdGUtZGF0YS10eXBlcy1jaGVja2VyJyk7XG5cblxuXG4vKipcbiAqIOe7hOS7tuexu1xuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMg5Yid5aeL5YyW5Y+C5pWwXG4gKi9cbmZ1bmN0aW9uIENvbXBvbmVudChvcHRpb25zKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgIHRoaXMubGlmZUN5Y2xlID0gTGlmZUN5Y2xlLnN0YXJ0O1xuICAgIHRoaXMuY2hpbGRyZW4gPSBbXTtcbiAgICB0aGlzLl9lbEZucyA9IFtdO1xuICAgIHRoaXMubGlzdGVuZXJzID0ge307XG4gICAgdGhpcy5zbG90Q2hpbGRyZW4gPSBbXTtcblxuICAgIHZhciBjbGF6eiA9IHRoaXMuY29uc3RydWN0b3I7XG5cbiAgICB0aGlzLmZpbHRlcnMgPSB0aGlzLmZpbHRlcnMgfHwgY2xhenouZmlsdGVycyB8fCB7fTtcbiAgICB0aGlzLmNvbXB1dGVkID0gdGhpcy5jb21wdXRlZCB8fCBjbGF6ei5jb21wdXRlZCB8fCB7fTtcbiAgICB0aGlzLm1lc3NhZ2VzID0gdGhpcy5tZXNzYWdlcyB8fCBjbGF6ei5tZXNzYWdlcyB8fCB7fTtcbiAgICB0aGlzLnN1YlRhZyA9IG9wdGlvbnMuc3ViVGFnO1xuXG4gICAgLy8gY29tcGlsZVxuICAgIGNvbXBpbGVDb21wb25lbnQoY2xhenopO1xuICAgIGNvbXBvbmVudFByZWhlYXQoY2xhenopO1xuXG4gICAgdmFyIG1lID0gdGhpcztcbiAgICB2YXIgcHJvdG9BTm9kZSA9IGNsYXp6LnByb3RvdHlwZS5hTm9kZTtcblxuICAgIG1lLmdpdmVuQU5vZGUgPSBvcHRpb25zLmFOb2RlO1xuICAgIG1lLmdpdmVuTmFtZWRTbG90QmluZHMgPSBbXTtcbiAgICBtZS5naXZlblNsb3RzID0ge1xuICAgICAgICBuYW1lZDoge31cbiAgICB9O1xuXG4gICAgdGhpcy5vd25lciA9IG9wdGlvbnMub3duZXI7XG4gICAgdGhpcy5zY29wZSA9IG9wdGlvbnMuc2NvcGU7XG4gICAgdGhpcy5lbCA9IG9wdGlvbnMuZWw7XG5cbiAgICB2YXIgcGFyZW50ID0gb3B0aW9ucy5wYXJlbnQ7XG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgICB0aGlzLnBhcmVudCA9IHBhcmVudDtcbiAgICAgICAgdGhpcy5wYXJlbnRDb21wb25lbnQgPSBwYXJlbnQubm9kZVR5cGUgPT09IE5vZGVUeXBlLkNNUFRcbiAgICAgICAgICAgID8gcGFyZW50XG4gICAgICAgICAgICA6IHBhcmVudCAmJiBwYXJlbnQucGFyZW50Q29tcG9uZW50O1xuICAgIH1cblxuICAgIHRoaXMuaWQgPSBndWlkKCk7XG5cbiAgICAvLyAjW2JlZ2luXSByZXZlcnNlXG4gICAgaWYgKHRoaXMuZWwpIHtcbiAgICAgICAgdmFyIGZpcnN0Q29tbWVudE5vZGUgPSB0aGlzLmVsLmZpcnN0Q2hpbGQ7XG4gICAgICAgIGlmIChmaXJzdENvbW1lbnROb2RlLm5vZGVUeXBlID09PSAzKSB7XG4gICAgICAgICAgICBmaXJzdENvbW1lbnROb2RlID0gZmlyc3RDb21tZW50Tm9kZS5uZXh0U2libGluZztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChmaXJzdENvbW1lbnROb2RlICYmIGZpcnN0Q29tbWVudE5vZGUubm9kZVR5cGUgPT09IDgpIHtcbiAgICAgICAgICAgIHZhciBzdHVtcE1hdGNoID0gZmlyc3RDb21tZW50Tm9kZS5kYXRhLm1hdGNoKC9eXFxzKnMtZGF0YTooW1xcc1xcU10rKT8kLyk7XG4gICAgICAgICAgICBpZiAoc3R1bXBNYXRjaCkge1xuICAgICAgICAgICAgICAgIHZhciBzdHVtcFRleHQgPSBzdHVtcE1hdGNoWzFdO1xuXG4gICAgICAgICAgICAgICAgLy8gZmlsbCBjb21wb25lbnQgZGF0YVxuICAgICAgICAgICAgICAgIG9wdGlvbnMuZGF0YSA9IChuZXcgRnVuY3Rpb24oXG4gICAgICAgICAgICAgICAgICAgICdyZXR1cm4gJyArIHN0dW1wVGV4dC5yZXBsYWNlKC9eW1xcc1xcbl0qLywgJycpXG4gICAgICAgICAgICAgICAgKSkoKTtcblxuICAgICAgICAgICAgICAgIGlmIChmaXJzdENvbW1lbnROb2RlLnByZXZpb3VzU2libGluZykge1xuICAgICAgICAgICAgICAgICAgICByZW1vdmVFbChmaXJzdENvbW1lbnROb2RlLnByZXZpb3VzU2libGluZyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlbW92ZUVsKGZpcnN0Q29tbWVudE5vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8vICNbZW5kXVxuXG4gICAgLy8gbmF0aXZl5LqL5Lu25pWw57uEXG4gICAgdGhpcy5uYXRpdmVFdmVudHMgPSBbXTtcblxuICAgIGlmICh0aGlzLmdpdmVuQU5vZGUpIHtcbiAgICAgICAgLy8g57uE5Lu26L+Q6KGM5pe25Lyg5YWl55qE57uT5p6E77yM5YGac2xvdOino+aekFxuICAgICAgICB0aGlzLl9jcmVhdGVHaXZlblNsb3RzKCk7XG5cbiAgICAgICAgZWFjaCh0aGlzLmdpdmVuQU5vZGUuZXZlbnRzLCBmdW5jdGlvbiAoZXZlbnRCaW5kKSB7XG4gICAgICAgICAgICAvLyDkv53lrZjlvZPliY3lrp7kvovnmoRuYXRpdmXkuovku7bvvIzkuIvpnaLliJvlu7phTm9kZeaXtuWAmeWBmuWQiOW5tlxuICAgICAgICAgICAgaWYgKGV2ZW50QmluZC5tb2RpZmllci5uYXRpdmUpIHtcbiAgICAgICAgICAgICAgICBtZS5uYXRpdmVFdmVudHMucHVzaChldmVudEJpbmQpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gI1tiZWdpbl0gZXJyb3JcbiAgICAgICAgICAgIHdhcm5FdmVudExpc3Rlbk1ldGhvZChldmVudEJpbmQsIG9wdGlvbnMub3duZXIpO1xuICAgICAgICAgICAgLy8gI1tlbmRdXG5cbiAgICAgICAgICAgIG1lLm9uKFxuICAgICAgICAgICAgICAgIGV2ZW50QmluZC5uYW1lLFxuICAgICAgICAgICAgICAgIGJpbmQoZXZlbnREZWNsYXJhdGlvbkxpc3RlbmVyLCBvcHRpb25zLm93bmVyLCBldmVudEJpbmQsIDEsIG9wdGlvbnMuc2NvcGUpLFxuICAgICAgICAgICAgICAgIGV2ZW50QmluZFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy50YWdOYW1lID0gcHJvdG9BTm9kZS50YWdOYW1lIHx8IG1lLmdpdmVuQU5vZGUudGFnTmFtZTtcbiAgICAgICAgdGhpcy5iaW5kcyA9IGNhbWVsQ29tcG9uZW50QmluZHModGhpcy5naXZlbkFOb2RlLnByb3BzKTtcbiAgICB9XG5cbiAgICB0aGlzLl90b1BoYXNlKCdjb21waWxlZCcpO1xuXG4gICAgLy8gaW5pdCBkYXRhXG4gICAgdGhpcy5kYXRhID0gbmV3IERhdGEoXG4gICAgICAgIGV4dGVuZChcbiAgICAgICAgICAgIHR5cGVvZiB0aGlzLmluaXREYXRhID09PSAnZnVuY3Rpb24nICYmIHRoaXMuaW5pdERhdGEoKSB8fCB7fSxcbiAgICAgICAgICAgIG9wdGlvbnMuZGF0YVxuICAgICAgICApXG4gICAgKTtcblxuICAgIGVsZW1lbnRJbml0VGFnTmFtZSh0aGlzKTtcblxuICAgIGVhY2godGhpcy5iaW5kcywgZnVuY3Rpb24gKGJpbmQpIHtcbiAgICAgICAgcG9zdFByb3AoYmluZCk7XG5cbiAgICAgICAgaWYgKG1lLnNjb3BlKSB7XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBldmFsRXhwcihiaW5kLmV4cHIsIG1lLnNjb3BlLCBtZS5vd25lcik7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2Vjb21mZS9zYW4vaXNzdWVzLzE5MVxuICAgICAgICAgICAgICAgIG1lLmRhdGEuc2V0KGJpbmQubmFtZSwgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyAjW2JlZ2luXSBlcnJvclxuICAgIC8vIOWcqOWIneWni+WMliArIOaVsOaNrue7keWumuWQju+8jOW8gOWni+aVsOaNruagoemqjFxuICAgIC8vIE5PVEU6IOWPquWcqOW8gOWPkeeJiOacrOS4rei/m+ihjOWxnuaAp+agoemqjFxuICAgIHZhciBkYXRhVHlwZXMgPSB0aGlzLmRhdGFUeXBlcyB8fCBjbGF6ei5kYXRhVHlwZXM7XG4gICAgaWYgKGRhdGFUeXBlcykge1xuICAgICAgICB2YXIgZGF0YVR5cGVDaGVja2VyID0gY3JlYXRlRGF0YVR5cGVzQ2hlY2tlcihcbiAgICAgICAgICAgIGRhdGFUeXBlcyxcbiAgICAgICAgICAgIHRoaXMuc3ViVGFnIHx8IHRoaXMubmFtZSB8fCBjbGF6ei5uYW1lXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuZGF0YS5zZXRUeXBlQ2hlY2tlcihkYXRhVHlwZUNoZWNrZXIpO1xuICAgICAgICB0aGlzLmRhdGEuY2hlY2tEYXRhVHlwZXMoKTtcbiAgICB9XG4gICAgLy8gI1tlbmRdXG5cbiAgICB0aGlzLmNvbXB1dGVkRGVwcyA9IHt9O1xuICAgIC8qIGVzbGludC1kaXNhYmxlIGd1YXJkLWZvci1pbiAqL1xuICAgIGZvciAodmFyIGV4cHIgaW4gdGhpcy5jb21wdXRlZCkge1xuICAgICAgICBpZiAoIXRoaXMuY29tcHV0ZWREZXBzW2V4cHJdKSB7XG4gICAgICAgICAgICB0aGlzLl9jYWxjQ29tcHV0ZWQoZXhwcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyogZXNsaW50LWVuYWJsZSBndWFyZC1mb3ItaW4gKi9cblxuICAgIGlmICghdGhpcy5kYXRhQ2hhbmdlcikge1xuICAgICAgICB0aGlzLmRhdGFDaGFuZ2VyID0gYmluZCh0aGlzLl9kYXRhQ2hhbmdlciwgdGhpcyk7XG4gICAgICAgIHRoaXMuZGF0YS5saXN0ZW4odGhpcy5kYXRhQ2hhbmdlcik7XG4gICAgfVxuICAgIHRoaXMuX3RvUGhhc2UoJ2luaXRlZCcpO1xuXG4gICAgLy8gI1tiZWdpbl0gcmV2ZXJzZVxuICAgIGlmICh0aGlzLmVsKSB7XG4gICAgICAgIHJldmVyc2VFbGVtZW50Q2hpbGRyZW4odGhpcyk7XG4gICAgICAgIHRoaXMuX2F0dGFjaGVkKCk7XG4gICAgfVxuXG4gICAgdmFyIHdhbGtlciA9IG9wdGlvbnMucmV2ZXJzZVdhbGtlcjtcbiAgICBpZiAod2Fsa2VyKSB7XG4gICAgICAgIHZhciBjdXJyZW50Tm9kZSA9IHdhbGtlci5jdXJyZW50O1xuICAgICAgICBpZiAoY3VycmVudE5vZGUgJiYgY3VycmVudE5vZGUubm9kZVR5cGUgPT09IDEpIHtcbiAgICAgICAgICAgIHRoaXMuZWwgPSBjdXJyZW50Tm9kZTtcbiAgICAgICAgICAgIHdhbGtlci5nb05leHQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldmVyc2VFbGVtZW50Q2hpbGRyZW4odGhpcyk7XG5cbiAgICAgICAgdGhpcy5fYXR0YWNoZWQoKTtcbiAgICB9XG4gICAgLy8gI1tlbmRdXG59XG5cblxuXG5Db21wb25lbnQucHJvdG90eXBlLmdldENvbXBvbmVudFR5cGUgPSBmdW5jdGlvbiAoYU5vZGUpIHtcbiAgICByZXR1cm4gdGhpcy5jb21wb25lbnRzW2FOb2RlLnRhZ05hbWVdO1xufTtcblxuLyoqXG4gKiDliJ3lp4vljJbliJvlu7rnu4Tku7blpJbpg6jkvKDlhaXnmoTmj5Lmp73lr7nosaFcbiAqXG4gKiBAcHJvdGVjdGVkXG4gKi9cbkNvbXBvbmVudC5wcm90b3R5cGUuX2NyZWF0ZUdpdmVuU2xvdHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG1lID0gdGhpcztcbiAgICBtZS5naXZlblNsb3RzLm5hbWVkID0ge307XG5cbiAgICAvLyDnu4Tku7bov5DooYzml7bkvKDlhaXnmoTnu5PmnoTvvIzlgZpzbG906Kej5p6QXG4gICAgbWUuZ2l2ZW5BTm9kZSAmJiBtZS5zY29wZSAmJiBlYWNoKG1lLmdpdmVuQU5vZGUuY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICB2YXIgdGFyZ2V0O1xuXG4gICAgICAgIHZhciBzbG90QmluZCA9ICFjaGlsZC50ZXh0RXhwciAmJiBnZXRBTm9kZVByb3AoY2hpbGQsICdzbG90Jyk7XG4gICAgICAgIGlmIChzbG90QmluZCkge1xuICAgICAgICAgICAgIW1lLmdpdmVuU2xvdEluaXRlZCAmJiBtZS5naXZlbk5hbWVkU2xvdEJpbmRzLnB1c2goc2xvdEJpbmQpO1xuXG4gICAgICAgICAgICB2YXIgc2xvdE5hbWUgPSBldmFsRXhwcihzbG90QmluZC5leHByLCBtZS5zY29wZSwgbWUub3duZXIpO1xuICAgICAgICAgICAgdGFyZ2V0ID0gbWUuZ2l2ZW5TbG90cy5uYW1lZFtzbG90TmFtZV07XG4gICAgICAgICAgICBpZiAoIXRhcmdldCkge1xuICAgICAgICAgICAgICAgIHRhcmdldCA9IG1lLmdpdmVuU2xvdHMubmFtZWRbc2xvdE5hbWVdID0gW107XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIW1lLmdpdmVuU2xvdEluaXRlZCkge1xuICAgICAgICAgICAgdGFyZ2V0ID0gbWUuZ2l2ZW5TbG90cy5ub25hbWU7XG4gICAgICAgICAgICBpZiAoIXRhcmdldCkge1xuICAgICAgICAgICAgICAgIHRhcmdldCA9IG1lLmdpdmVuU2xvdHMubm9uYW1lID0gW107XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0YXJnZXQgJiYgdGFyZ2V0LnB1c2goY2hpbGQpO1xuICAgIH0pO1xuXG4gICAgbWUuZ2l2ZW5TbG90SW5pdGVkID0gdHJ1ZTtcbn07XG5cbi8qKlxuICog57G75Z6L5qCH6K+GXG4gKlxuICogQHR5cGUge3N0cmluZ31cbiAqL1xuQ29tcG9uZW50LnByb3RvdHlwZS5ub2RlVHlwZSA9IE5vZGVUeXBlLkNNUFQ7XG5cbi8qKlxuICog5Zyo5LiL5LiA5Liq5pu05paw5ZGo5pyf6L+Q6KGM5Ye95pWwXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4g6KaB6L+Q6KGM55qE5Ye95pWwXG4gKi9cbkNvbXBvbmVudC5wcm90b3R5cGUubmV4dFRpY2sgPSBuZXh0VGljaztcblxuLyogZXNsaW50LWRpc2FibGUgb3BlcmF0b3ItbGluZWJyZWFrICovXG4vKipcbiAqIOS9v+iKgueCueWIsOi+vuebuOW6lOeahOeUn+WRveWRqOacn1xuICpcbiAqIEBwcm90ZWN0ZWRcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIOeUn+WRveWRqOacn+WQjeensFxuICovXG5Db21wb25lbnQucHJvdG90eXBlLl9jYWxsSG9vayA9XG5Db21wb25lbnQucHJvdG90eXBlLl90b1BoYXNlID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBpZiAoIXRoaXMubGlmZUN5Y2xlW25hbWVdKSB7XG4gICAgICAgIHRoaXMubGlmZUN5Y2xlID0gTGlmZUN5Y2xlW25hbWVdIHx8IHRoaXMubGlmZUN5Y2xlO1xuICAgICAgICBpZiAodHlwZW9mIHRoaXNbbmFtZV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRoaXNbbmFtZV0oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIOmAmuefpWRldnRvb2xcbiAgICAgICAgLy8gI1tiZWdpbl0gZGV2dG9vbFxuICAgICAgICBlbWl0RGV2dG9vbCgnY29tcC0nICsgbmFtZSwgdGhpcyk7XG4gICAgICAgIC8vICNbZW5kXVxuICAgIH1cbn07XG4vKiBlc2xpbnQtZW5hYmxlIG9wZXJhdG9yLWxpbmVicmVhayAqL1xuXG5cbi8qKlxuICog5re75Yqg5LqL5Lu255uR5ZCs5ZmoXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUg5LqL5Lu25ZCNXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciDnm5HlkKzlmahcbiAqIEBwYXJhbSB7c3RyaW5nP30gZGVjbGFyYXRpb24g5aOw5piO5byPXG4gKi9cbkNvbXBvbmVudC5wcm90b3R5cGUub24gPSBmdW5jdGlvbiAobmFtZSwgbGlzdGVuZXIsIGRlY2xhcmF0aW9uKSB7XG4gICAgaWYgKHR5cGVvZiBsaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBpZiAoIXRoaXMubGlzdGVuZXJzW25hbWVdKSB7XG4gICAgICAgICAgICB0aGlzLmxpc3RlbmVyc1tuYW1lXSA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubGlzdGVuZXJzW25hbWVdLnB1c2goe2ZuOiBsaXN0ZW5lciwgZGVjbGFyYXRpb246IGRlY2xhcmF0aW9ufSk7XG4gICAgfVxufTtcblxuLyoqXG4gKiDnp7vpmaTkuovku7bnm5HlkKzlmahcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSDkuovku7blkI1cbiAqIEBwYXJhbSB7RnVuY3Rpb249fSBsaXN0ZW5lciDnm5HlkKzlmahcbiAqL1xuQ29tcG9uZW50LnByb3RvdHlwZS51biA9IGZ1bmN0aW9uIChuYW1lLCBsaXN0ZW5lcikge1xuICAgIHZhciBuYW1lTGlzdGVuZXJzID0gdGhpcy5saXN0ZW5lcnNbbmFtZV07XG4gICAgdmFyIGxlbiA9IG5hbWVMaXN0ZW5lcnMgJiYgbmFtZUxpc3RlbmVycy5sZW5ndGg7XG5cbiAgICB3aGlsZSAobGVuLS0pIHtcbiAgICAgICAgaWYgKCFsaXN0ZW5lciB8fCBsaXN0ZW5lciA9PT0gbmFtZUxpc3RlbmVyc1tsZW5dLmZuKSB7XG4gICAgICAgICAgICBuYW1lTGlzdGVuZXJzLnNwbGljZShsZW4sIDEpO1xuICAgICAgICB9XG4gICAgfVxufTtcblxuXG4vKipcbiAqIOa0vuWPkeS6i+S7tlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIOS6i+S7tuWQjVxuICogQHBhcmFtIHtPYmplY3R9IGV2ZW50IOS6i+S7tuWvueixoVxuICovXG5Db21wb25lbnQucHJvdG90eXBlLmZpcmUgPSBmdW5jdGlvbiAobmFtZSwgZXZlbnQpIHtcbiAgICB2YXIgbWUgPSB0aGlzO1xuICAgIGVhY2godGhpcy5saXN0ZW5lcnNbbmFtZV0sIGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgICBsaXN0ZW5lci5mbi5jYWxsKG1lLCBldmVudCk7XG4gICAgfSk7XG59O1xuXG4vKipcbiAqIOiuoeeulyBjb21wdXRlZCDlsZ7mgKfnmoTlgLxcbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IGNvbXB1dGVkRXhwciBjb21wdXRlZOihqOi+vuW8j+S4slxuICovXG5Db21wb25lbnQucHJvdG90eXBlLl9jYWxjQ29tcHV0ZWQgPSBmdW5jdGlvbiAoY29tcHV0ZWRFeHByKSB7XG4gICAgdmFyIGNvbXB1dGVkRGVwcyA9IHRoaXMuY29tcHV0ZWREZXBzW2NvbXB1dGVkRXhwcl07XG4gICAgaWYgKCFjb21wdXRlZERlcHMpIHtcbiAgICAgICAgY29tcHV0ZWREZXBzID0gdGhpcy5jb21wdXRlZERlcHNbY29tcHV0ZWRFeHByXSA9IHt9O1xuICAgIH1cblxuICAgIHRoaXMuZGF0YS5zZXQoY29tcHV0ZWRFeHByLCB0aGlzLmNvbXB1dGVkW2NvbXB1dGVkRXhwcl0uY2FsbCh7XG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIGdldDogYmluZChmdW5jdGlvbiAoZXhwcikge1xuICAgICAgICAgICAgICAgIC8vICNbYmVnaW5dIGVycm9yXG4gICAgICAgICAgICAgICAgaWYgKCFleHByKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignW1NBTiBFUlJPUl0gY2FsbCBnZXQgbWV0aG9kIGluIGNvbXB1dGVkIG5lZWQgYXJndW1lbnQnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gI1tlbmRdXG5cbiAgICAgICAgICAgICAgICBpZiAoIWNvbXB1dGVkRGVwc1tleHByXSkge1xuICAgICAgICAgICAgICAgICAgICBjb21wdXRlZERlcHNbZXhwcl0gPSAxO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbXB1dGVkW2V4cHJdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jYWxjQ29tcHV0ZWQoZXhwcik7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB0aGlzLndhdGNoKGV4cHIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2NhbGNDb21wdXRlZChjb21wdXRlZEV4cHIpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kYXRhLmdldChleHByKTtcbiAgICAgICAgICAgIH0sIHRoaXMpXG4gICAgICAgIH1cbiAgICB9KSk7XG59O1xuXG4vKipcbiAqIOa0vuWPkea2iOaBr1xuICog57uE5Lu25Y+v5Lul5rS+5Y+R5raI5oGv77yM5raI5oGv5bCG5rK/552A57uE5Lu25qCR5ZCR5LiK5Lyg6YCS77yM55u05Yiw6YGH5LiK56ys5LiA5Liq5aSE55CG5raI5oGv55qE57uE5Lu2XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUg5raI5oGv5ZCN56ewXG4gKiBAcGFyYW0geyo/fSB2YWx1ZSDmtojmga/lgLxcbiAqL1xuQ29tcG9uZW50LnByb3RvdHlwZS5kaXNwYXRjaCA9IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuICAgIHZhciBwYXJlbnRDb21wb25lbnQgPSB0aGlzLnBhcmVudENvbXBvbmVudDtcblxuICAgIHdoaWxlIChwYXJlbnRDb21wb25lbnQpIHtcbiAgICAgICAgdmFyIHJlY2VpdmVyID0gcGFyZW50Q29tcG9uZW50Lm1lc3NhZ2VzW25hbWVdIHx8IHBhcmVudENvbXBvbmVudC5tZXNzYWdlc1snKiddO1xuICAgICAgICBpZiAodHlwZW9mIHJlY2VpdmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICByZWNlaXZlci5jYWxsKFxuICAgICAgICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICAgICAgICB7dGFyZ2V0OiB0aGlzLCB2YWx1ZTogdmFsdWUsIG5hbWU6IG5hbWV9XG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBwYXJlbnRDb21wb25lbnQgPSBwYXJlbnRDb21wb25lbnQucGFyZW50Q29tcG9uZW50O1xuICAgIH1cbn07XG5cbi8qKlxuICog6I635Y+W57uE5Lu25YaF6YOo55qEIHNsb3RcbiAqXG4gKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgc2xvdOWQjeensO+8jOepuuS4umRlZmF1bHQgc2xvdFxuICogQHJldHVybiB7QXJyYXl9XG4gKi9cbkNvbXBvbmVudC5wcm90b3R5cGUuc2xvdCA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHZhciBtZSA9IHRoaXM7XG5cbiAgICBmdW5jdGlvbiBjaGlsZHJlblRyYXZlcnNhbChjaGlsZHJlbikge1xuICAgICAgICBlYWNoKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgICAgIGlmIChjaGlsZC5ub2RlVHlwZSA9PT0gTm9kZVR5cGUuU0xPVCAmJiBjaGlsZC5vd25lciA9PT0gbWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoY2hpbGQuaXNOYW1lZCAmJiBjaGlsZC5uYW1lID09PSBuYW1lXG4gICAgICAgICAgICAgICAgICAgIHx8ICFjaGlsZC5pc05hbWVkICYmICFuYW1lXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGNoaWxkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjaGlsZHJlblRyYXZlcnNhbChjaGlsZC5jaGlsZHJlbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGNoaWxkcmVuVHJhdmVyc2FsKHRoaXMuY2hpbGRyZW4pO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xuXG4vKipcbiAqIOiOt+WPluW4puaciSBzYW4tcmVmIOaMh+S7pOeahOWtkOe7hOS7tuW8leeUqFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIOWtkOe7hOS7tueahOW8leeUqOWQjVxuICogQHJldHVybiB7Q29tcG9uZW50fVxuICovXG5Db21wb25lbnQucHJvdG90eXBlLnJlZiA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdmFyIHJlZlRhcmdldDtcbiAgICB2YXIgb3duZXIgPSB0aGlzO1xuXG4gICAgZnVuY3Rpb24gY2hpbGRyZW5UcmF2ZXJzYWwoY2hpbGRyZW4pIHtcbiAgICAgICAgZWFjaChjaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgICAgICBlbGVtZW50VHJhdmVyc2FsKGNoaWxkKTtcbiAgICAgICAgICAgIHJldHVybiAhcmVmVGFyZ2V0O1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBlbGVtZW50VHJhdmVyc2FsKGVsZW1lbnQpIHtcbiAgICAgICAgdmFyIG5vZGVUeXBlID0gZWxlbWVudC5ub2RlVHlwZTtcbiAgICAgICAgaWYgKG5vZGVUeXBlID09PSBOb2RlVHlwZS5URVhUKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZWxlbWVudC5vd25lciA9PT0gb3duZXIpIHtcbiAgICAgICAgICAgIHZhciByZWY7XG4gICAgICAgICAgICBzd2l0Y2ggKGVsZW1lbnQubm9kZVR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIE5vZGVUeXBlLkVMRU06XG4gICAgICAgICAgICAgICAgICAgIHJlZiA9IGVsZW1lbnQuYU5vZGUuZGlyZWN0aXZlcy5yZWY7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZWYgJiYgZXZhbEV4cHIocmVmLnZhbHVlLCBlbGVtZW50LnNjb3BlLCBvd25lcikgPT09IG5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZlRhcmdldCA9IGVsZW1lbnQuZWw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlIE5vZGVUeXBlLkNNUFQ6XG4gICAgICAgICAgICAgICAgICAgIHJlZiA9IGVsZW1lbnQuZ2l2ZW5BTm9kZS5kaXJlY3RpdmVzLnJlZjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlZiAmJiBldmFsRXhwcihyZWYudmFsdWUsIGVsZW1lbnQuc2NvcGUsIG93bmVyKSA9PT0gbmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVmVGFyZ2V0ID0gZWxlbWVudDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAhcmVmVGFyZ2V0ICYmIGNoaWxkcmVuVHJhdmVyc2FsKGVsZW1lbnQuc2xvdENoaWxkcmVuKTtcbiAgICAgICAgfVxuXG4gICAgICAgICFyZWZUYXJnZXQgJiYgY2hpbGRyZW5UcmF2ZXJzYWwoZWxlbWVudC5jaGlsZHJlbik7XG4gICAgfVxuXG4gICAgY2hpbGRyZW5UcmF2ZXJzYWwodGhpcy5jaGlsZHJlbik7XG5cbiAgICByZXR1cm4gcmVmVGFyZ2V0O1xufTtcblxuXG4vKipcbiAqIOinhuWbvuabtOaWsOWHveaVsFxuICpcbiAqIEBwYXJhbSB7QXJyYXk/fSBjaGFuZ2VzIOaVsOaNruWPmOWMluS/oeaBr1xuICovXG5Db21wb25lbnQucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoY2hhbmdlcykge1xuICAgIGlmICh0aGlzLmxpZmVDeWNsZS5kaXNwb3NlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG1lID0gdGhpcztcblxuXG4gICAgdmFyIG5lZWRSZWxvYWRGb3JTbG90ID0gZmFsc2U7XG4gICAgdGhpcy5fbm90aWZ5TmVlZFJlbG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbmVlZFJlbG9hZEZvclNsb3QgPSB0cnVlO1xuICAgIH07XG5cbiAgICBpZiAoY2hhbmdlcykge1xuICAgICAgICBlYWNoKGNoYW5nZXMsIGZ1bmN0aW9uIChjaGFuZ2UpIHtcbiAgICAgICAgICAgIHZhciBjaGFuZ2VFeHByID0gY2hhbmdlLmV4cHI7XG5cbiAgICAgICAgICAgIGVhY2gobWUuYmluZHMsIGZ1bmN0aW9uIChiaW5kSXRlbSkge1xuICAgICAgICAgICAgICAgIHZhciByZWxhdGlvbjtcbiAgICAgICAgICAgICAgICB2YXIgc2V0RXhwciA9IGJpbmRJdGVtLm5hbWU7XG4gICAgICAgICAgICAgICAgdmFyIHVwZGF0ZUV4cHIgPSBiaW5kSXRlbS5leHByO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFpc0RhdGFDaGFuZ2VCeUVsZW1lbnQoY2hhbmdlLCBtZSwgc2V0RXhwcilcbiAgICAgICAgICAgICAgICAgICAgJiYgKHJlbGF0aW9uID0gY2hhbmdlRXhwckNvbXBhcmUoY2hhbmdlRXhwciwgdXBkYXRlRXhwciwgbWUuc2NvcGUpKVxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVsYXRpb24gPiAyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRFeHByID0gY3JlYXRlQWNjZXNzb3IoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBFeHByVHlwZS5TVFJJTkcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogc2V0RXhwclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXS5jb25jYXQoY2hhbmdlRXhwci5wYXRocy5zbGljZSh1cGRhdGVFeHByLnBhdGhzLmxlbmd0aCkpXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVFeHByID0gY2hhbmdlRXhwcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIG1lLmRhdGEuc2V0KHNldEV4cHIsIGV2YWxFeHByKHVwZGF0ZUV4cHIsIG1lLnNjb3BlLCBtZS5vd25lciksIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBtZS5vd25lci5pZFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgZWFjaChtZS5naXZlbk5hbWVkU2xvdEJpbmRzLCBmdW5jdGlvbiAoYmluZEl0ZW0pIHtcbiAgICAgICAgICAgICAgICBuZWVkUmVsb2FkRm9yU2xvdCA9IG5lZWRSZWxvYWRGb3JTbG90IHx8IGNoYW5nZUV4cHJDb21wYXJlKGNoYW5nZUV4cHIsIGJpbmRJdGVtLmV4cHIsIG1lLnNjb3BlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gIW5lZWRSZWxvYWRGb3JTbG90O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChuZWVkUmVsb2FkRm9yU2xvdCkge1xuICAgICAgICAgICAgdGhpcy5fY3JlYXRlR2l2ZW5TbG90cygpO1xuICAgICAgICAgICAgdGhpcy5fcmVwYWludENoaWxkcmVuKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgc2xvdENoaWxkcmVuTGVuID0gdGhpcy5zbG90Q2hpbGRyZW4ubGVuZ3RoO1xuICAgICAgICAgICAgd2hpbGUgKHNsb3RDaGlsZHJlbkxlbi0tKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNsb3RDaGlsZCA9IHRoaXMuc2xvdENoaWxkcmVuW3Nsb3RDaGlsZHJlbkxlbl07XG5cbiAgICAgICAgICAgICAgICBpZiAoc2xvdENoaWxkLmxpZmVDeWNsZS5kaXNwb3NlZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNsb3RDaGlsZHJlbi5zcGxpY2Uoc2xvdENoaWxkcmVuTGVuLCAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoc2xvdENoaWxkLmlzSW5zZXJ0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgc2xvdENoaWxkLl91cGRhdGUoY2hhbmdlcywgMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGRhdGFDaGFuZ2VzID0gdGhpcy5kYXRhQ2hhbmdlcztcbiAgICBpZiAoZGF0YUNoYW5nZXMpIHtcbiAgICAgICAgdGhpcy5kYXRhQ2hhbmdlcyA9IG51bGw7XG4gICAgICAgIGVhY2godGhpcy5hTm9kZS5ob3RzcG90LmR5bmFtaWNQcm9wcywgZnVuY3Rpb24gKHByb3ApIHtcbiAgICAgICAgICAgIGVhY2goZGF0YUNoYW5nZXMsIGZ1bmN0aW9uIChjaGFuZ2UpIHtcbiAgICAgICAgICAgICAgICBpZiAoY2hhbmdlRXhwckNvbXBhcmUoY2hhbmdlLmV4cHIsIHByb3AuZXhwciwgbWUuZGF0YSlcbiAgICAgICAgICAgICAgICAgICAgfHwgcHJvcC5oaW50RXhwciAmJiBjaGFuZ2VFeHByQ29tcGFyZShjaGFuZ2UuZXhwciwgcHJvcC5oaW50RXhwciwgbWUuZGF0YSlcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlUHJvcChtZSwgZXZhbEV4cHIocHJvcC5leHByLCBtZS5kYXRhLCBtZSksIHByb3ApO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGVsZW1lbnRVcGRhdGVDaGlsZHJlbih0aGlzLCBkYXRhQ2hhbmdlcyk7XG4gICAgICAgIGlmIChuZWVkUmVsb2FkRm9yU2xvdCkge1xuICAgICAgICAgICAgdGhpcy5fY3JlYXRlR2l2ZW5TbG90cygpO1xuICAgICAgICAgICAgdGhpcy5fcmVwYWludENoaWxkcmVuKCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl90b1BoYXNlKCd1cGRhdGVkJyk7XG5cbiAgICAgICAgaWYgKHRoaXMub3duZXIpIHtcbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZUJpbmR4T3duZXIoZGF0YUNoYW5nZXMpO1xuICAgICAgICAgICAgdGhpcy5vd25lci5fdXBkYXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLl9ub3RpZnlOZWVkUmVsb2FkID0gbnVsbDtcbn07XG5cbkNvbXBvbmVudC5wcm90b3R5cGUuX3VwZGF0ZUJpbmR4T3duZXIgPSBmdW5jdGlvbiAoZGF0YUNoYW5nZXMpIHtcbiAgICB2YXIgbWUgPSB0aGlzO1xuXG4gICAgaWYgKHRoaXMub3duZXIpIHtcbiAgICAgICAgZWFjaChkYXRhQ2hhbmdlcywgZnVuY3Rpb24gKGNoYW5nZSkge1xuICAgICAgICAgICAgZWFjaChtZS5iaW5kcywgZnVuY3Rpb24gKGJpbmRJdGVtKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNoYW5nZUV4cHIgPSBjaGFuZ2UuZXhwcjtcbiAgICAgICAgICAgICAgICBpZiAoYmluZEl0ZW0ueFxuICAgICAgICAgICAgICAgICAgICAmJiAhaXNEYXRhQ2hhbmdlQnlFbGVtZW50KGNoYW5nZSwgbWUub3duZXIpXG4gICAgICAgICAgICAgICAgICAgICYmIGNoYW5nZUV4cHJDb21wYXJlKGNoYW5nZUV4cHIsIHBhcnNlRXhwcihiaW5kSXRlbS5uYW1lKSwgbWUuZGF0YSlcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHVwZGF0ZVNjb3BlRXhwciA9IGJpbmRJdGVtLmV4cHI7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGFuZ2VFeHByLnBhdGhzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZVNjb3BlRXhwciA9IGNyZWF0ZUFjY2Vzc29yKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJpbmRJdGVtLmV4cHIucGF0aHMuY29uY2F0KGNoYW5nZUV4cHIucGF0aHMuc2xpY2UoMSkpXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgbWUuc2NvcGUuc2V0KFxuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlU2NvcGVFeHByLFxuICAgICAgICAgICAgICAgICAgICAgICAgZXZhbEV4cHIoY2hhbmdlRXhwciwgbWUuZGF0YSwgbWUpLFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogbWUuaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3A6IGJpbmRJdGVtLm5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn07XG5cbi8qKlxuICog6YeN5paw57uY5Yi257uE5Lu255qE5YaF5a65XG4gKiDlvZMgZHluYW1pYyBzbG90IG5hbWUg5Y+R55Sf5Y+Y5pu05oiWIHNsb3Qg5Yy56YWN5Y+R55Sf5Y+Y5YyW5pe277yM6YeN5paw57uY5Yi2XG4gKiDlnKjnu4Tku7bnuqfliKvph43nu5jmnInngrnnspfmmrTvvIzkvYbmmK/og73kv53or4Hop4blm77nu5PmnpzmraPnoa7mgKdcbiAqL1xuQ29tcG9uZW50LnByb3RvdHlwZS5fcmVwYWludENoaWxkcmVuID0gZnVuY3Rpb24gKCkge1xuICAgIGVsZW1lbnREaXNwb3NlQ2hpbGRyZW4odGhpcywgMCwgMSk7XG4gICAgdGhpcy5jaGlsZHJlbiA9IFtdO1xuXG4gICAgdGhpcy5fY29udGVudFJlYWR5ID0gMDtcbiAgICB0aGlzLnNsb3RDaGlsZHJlbiA9IFtdO1xuICAgIGVsZW1lbnRBdHRhY2godGhpcyk7XG59O1xuXG5cbi8qKlxuICog57uE5Lu25YaF6YOo55uR5ZCs5pWw5o2u5Y+Y5YyW55qE5Ye95pWwXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBjaGFuZ2Ug5pWw5o2u5Y+Y5YyW5L+h5oGvXG4gKi9cbkNvbXBvbmVudC5wcm90b3R5cGUuX2RhdGFDaGFuZ2VyID0gZnVuY3Rpb24gKGNoYW5nZSkge1xuICAgIGlmICh0aGlzLmxpZmVDeWNsZS5wYWludGluZyB8fCB0aGlzLmxpZmVDeWNsZS5jcmVhdGVkKSB7XG4gICAgICAgIGlmICghdGhpcy5kYXRhQ2hhbmdlcykge1xuICAgICAgICAgICAgbmV4dFRpY2sodGhpcy5fdXBkYXRlLCB0aGlzKTtcbiAgICAgICAgICAgIHRoaXMuZGF0YUNoYW5nZXMgPSBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZGF0YUNoYW5nZXMucHVzaChjaGFuZ2UpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0aGlzLmxpZmVDeWNsZS5pbml0ZWQgJiYgdGhpcy5vd25lcikge1xuICAgICAgICB0aGlzLl91cGRhdGVCaW5keE93bmVyKFtjaGFuZ2VdKTtcbiAgICB9XG59O1xuXG5cbi8qKlxuICog55uR5ZCs57uE5Lu255qE5pWw5o2u5Y+Y5YyWXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGRhdGFOYW1lIOWPmOWMlueahOaVsOaNrumhuVxuICogQHBhcmFtIHtGdW5jdGlvbn0gbGlzdGVuZXIg55uR5ZCs5Ye95pWwXG4gKi9cbkNvbXBvbmVudC5wcm90b3R5cGUud2F0Y2ggPSBmdW5jdGlvbiAoZGF0YU5hbWUsIGxpc3RlbmVyKSB7XG4gICAgdmFyIGRhdGFFeHByID0gcGFyc2VFeHByKGRhdGFOYW1lKTtcblxuICAgIHRoaXMuZGF0YS5saXN0ZW4oYmluZChmdW5jdGlvbiAoY2hhbmdlKSB7XG4gICAgICAgIGlmIChjaGFuZ2VFeHByQ29tcGFyZShjaGFuZ2UuZXhwciwgZGF0YUV4cHIsIHRoaXMuZGF0YSkpIHtcbiAgICAgICAgICAgIGxpc3RlbmVyLmNhbGwodGhpcywgZXZhbEV4cHIoZGF0YUV4cHIsIHRoaXMuZGF0YSwgdGhpcyksIGNoYW5nZSk7XG4gICAgICAgIH1cbiAgICB9LCB0aGlzKSk7XG59O1xuXG4vKipcbiAqIOe7hOS7tumUgOavgeeahOihjOS4ulxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIOmUgOavgeihjOS4uueahOWPguaVsFxuICovXG5Db21wb25lbnQucHJvdG90eXBlLmRpc3Bvc2UgPSBlbGVtZW50T3duRGlzcG9zZTtcblxuQ29tcG9uZW50LnByb3RvdHlwZS5fZG9uZUxlYXZlID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLmxlYXZlRGlzcG9zZSkge1xuICAgICAgICBpZiAoIXRoaXMubGlmZUN5Y2xlLmRpc3Bvc2VkKSB7XG4gICAgICAgICAgICAvLyDov5nph4zkuI3nlKjmjKjkuKrosIPnlKggZGlzcG9zZSDkuobvvIzlm6DkuLogY2hpbGRyZW4g6YeK5pS+6ZO+5Lya6LCD55So55qEXG4gICAgICAgICAgICB0aGlzLnNsb3RDaGlsZHJlbiA9IG51bGw7XG5cbiAgICAgICAgICAgIHRoaXMuZGF0YS51bmxpc3RlbigpO1xuICAgICAgICAgICAgdGhpcy5kYXRhQ2hhbmdlciA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLmRhdGFDaGFuZ2VzID0gbnVsbDtcblxuICAgICAgICAgICAgZWxlbWVudERpc3Bvc2UoXG4gICAgICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgICAgICB0aGlzLmRpc3Bvc2VOb0RldGFjaCxcbiAgICAgICAgICAgICAgICB0aGlzLmRpc3Bvc2VOb1RyYW5zaXRpb25cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aGlzLmxpc3RlbmVycyA9IG51bGw7XG5cbiAgICAgICAgICAgIHRoaXMuZ2l2ZW5BTm9kZSA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLmdpdmVuU2xvdHMgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5naXZlbk5hbWVkU2xvdEJpbmRzID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICh0aGlzLmxpZmVDeWNsZS5hdHRhY2hlZCkge1xuICAgICAgICByZW1vdmVFbCh0aGlzLmVsKTtcbiAgICAgICAgdGhpcy5fdG9QaGFzZSgnZGV0YWNoZWQnKTtcbiAgICB9XG59O1xuXG4vKipcbiAqIOWujOaIkOe7hOS7tiBhdHRhY2hlZCDlkI7nmoTooYzkuLpcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZWxlbWVudCDlhYPntKDoioLngrlcbiAqL1xuQ29tcG9uZW50LnByb3RvdHlwZS5fYXR0YWNoZWQgPSBlbGVtZW50T3duQXR0YWNoZWQ7XG5cbkNvbXBvbmVudC5wcm90b3R5cGUuYXR0YWNoID0gZWxlbWVudE93bkF0dGFjaDtcbkNvbXBvbmVudC5wcm90b3R5cGUuZGV0YWNoID0gZWxlbWVudE93bkRldGFjaDtcbkNvbXBvbmVudC5wcm90b3R5cGUuX2NyZWF0ZSA9IGVsZW1lbnRPd25DcmVhdGU7XG5Db21wb25lbnQucHJvdG90eXBlLl9vbkVsID0gZWxlbWVudE93bk9uRWw7XG5cblxuLy8gZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gQ29tcG9uZW50O1xuXG5cbi8qKlxuICogQGZpbGUg5Yib5bu657uE5Lu257G7XG4gKiBAYXV0aG9yIGVycm9ycmlrKGVycm9ycmlrQGdtYWlsLmNvbSlcbiAqL1xuXG4vLyB2YXIgQ29tcG9uZW50ID0gcmVxdWlyZSgnLi9jb21wb25lbnQnKTtcbi8vIHZhciBpbmhlcml0cyA9IHJlcXVpcmUoJy4uL3V0aWwvaW5oZXJpdHMnKTtcblxuLyoqXG4gKiDliJvlu7rnu4Tku7bnsbtcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcHJvdG8g57uE5Lu257G755qE5pa55rOV6KGoXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAqL1xuZnVuY3Rpb24gZGVmaW5lQ29tcG9uZW50KHByb3RvKSB7XG4gICAgLy8g5aaC5p6c5Lyg5YWl5LiA5Liq5LiN5pivIHNhbiBjb21wb25lbnQg55qEIGNvbnN0cnVjdG9y77yM55u05o6l6L+U5Zue5LiN5piv57uE5Lu25p6E6YCg5Ye95pWwXG4gICAgLy8g6L+Z56eN5Zy65pmv5a+86Ie055qE6ZSZ6K+vIHNhbiDkuI3kuojogIPomZFcbiAgICBpZiAodHlwZW9mIHByb3RvID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBwcm90bztcbiAgICB9XG5cbiAgICAvLyAjW2JlZ2luXSBlcnJvclxuICAgIGlmICh0eXBlb2YgcHJvdG8gIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignW1NBTiBGQVRBTF0gcGFyYW0gbXVzdCBiZSBhIHBsYWluIG9iamVjdC4nKTtcbiAgICB9XG4gICAgLy8gI1tlbmRdXG5cbiAgICBmdW5jdGlvbiBDb21wb25lbnRDbGFzcyhvcHRpb24pIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgICAgICBDb21wb25lbnQuY2FsbCh0aGlzLCBvcHRpb24pO1xuICAgIH1cblxuICAgIENvbXBvbmVudENsYXNzLnByb3RvdHlwZSA9IHByb3RvO1xuICAgIGluaGVyaXRzKENvbXBvbmVudENsYXNzLCBDb21wb25lbnQpO1xuXG4gICAgcmV0dXJuIENvbXBvbmVudENsYXNzO1xufVxuXG4vLyBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBkZWZpbmVDb21wb25lbnQ7XG5cblxuLyoqXG4gKiBAZmlsZSDnvJbor5Hnu4Tku7bnsbtcbiAqIEBhdXRob3IgZXJyb3JyaWsoZXJyb3JyaWtAZ21haWwuY29tKVxuICovXG5cblxuLy8gdmFyIGNyZWF0ZUFOb2RlID0gcmVxdWlyZSgnLi4vcGFyc2VyL2NyZWF0ZS1hLW5vZGUnKTtcbi8vIHZhciBwYXJzZVRlbXBsYXRlID0gcmVxdWlyZSgnLi4vcGFyc2VyL3BhcnNlLXRlbXBsYXRlJyk7XG4vLyB2YXIgcGFyc2VUZXh0ID0gcmVxdWlyZSgnLi4vcGFyc2VyL3BhcnNlLXRleHQnKTtcbi8vIHZhciBkZWZpbmVDb21wb25lbnQgPSByZXF1aXJlKCcuL2RlZmluZS1jb21wb25lbnQnKTtcblxuXG4vKipcbiAqIOe8luivkee7hOS7tuexu+OAgumihOino+aekHRlbXBsYXRl5ZKMY29tcG9uZW50c1xuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IENvbXBvbmVudENsYXNzIOe7hOS7tuexu1xuICovXG5mdW5jdGlvbiBjb21waWxlQ29tcG9uZW50KENvbXBvbmVudENsYXNzKSB7XG4gICAgdmFyIHByb3RvID0gQ29tcG9uZW50Q2xhc3MucHJvdG90eXBlO1xuXG4gICAgLy8gcHJlIGRlZmluZSBjb21wb25lbnRzIGNsYXNzXG4gICAgaWYgKCFwcm90by5oYXNPd25Qcm9wZXJ0eSgnX2NtcHRSZWFkeScpKSB7XG4gICAgICAgIHByb3RvLmNvbXBvbmVudHMgPSBDb21wb25lbnRDbGFzcy5jb21wb25lbnRzIHx8IHByb3RvLmNvbXBvbmVudHMgfHwge307XG4gICAgICAgIHZhciBjb21wb25lbnRzID0gcHJvdG8uY29tcG9uZW50cztcblxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gY29tcG9uZW50cykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgICAgICAgICB2YXIgY29tcG9uZW50Q2xhc3MgPSBjb21wb25lbnRzW2tleV07XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29tcG9uZW50Q2xhc3MgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgY29tcG9uZW50c1trZXldID0gZGVmaW5lQ29tcG9uZW50KGNvbXBvbmVudENsYXNzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNvbXBvbmVudENsYXNzID09PSAnc2VsZicpIHtcbiAgICAgICAgICAgICAgICBjb21wb25lbnRzW2tleV0gPSBDb21wb25lbnRDbGFzcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHByb3RvLl9jbXB0UmVhZHkgPSAxO1xuICAgIH1cblxuXG4gICAgLy8gcHJlIGNvbXBpbGUgdGVtcGxhdGVcbiAgICBpZiAoIXByb3RvLmhhc093blByb3BlcnR5KCdhTm9kZScpKSB7XG4gICAgICAgIHByb3RvLmFOb2RlID0gY3JlYXRlQU5vZGUoKTtcblxuICAgICAgICB2YXIgdHBsID0gQ29tcG9uZW50Q2xhc3MudGVtcGxhdGUgfHwgcHJvdG8udGVtcGxhdGU7XG4gICAgICAgIGlmICh0cGwpIHtcbiAgICAgICAgICAgIHZhciBhTm9kZSA9IHBhcnNlVGVtcGxhdGUodHBsLCB7XG4gICAgICAgICAgICAgICAgdHJpbVdoaXRlc3BhY2U6IHByb3RvLnRyaW1XaGl0ZXNwYWNlIHx8IENvbXBvbmVudENsYXNzLnRyaW1XaGl0ZXNwYWNlLFxuICAgICAgICAgICAgICAgIGRlbGltaXRlcnM6IHByb3RvLmRlbGltaXRlcnMgfHwgQ29tcG9uZW50Q2xhc3MuZGVsaW1pdGVyc1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB2YXIgZmlyc3RDaGlsZCA9IGFOb2RlLmNoaWxkcmVuWzBdO1xuXG4gICAgICAgICAgICAvLyAjW2JlZ2luXSBlcnJvclxuICAgICAgICAgICAgaWYgKGFOb2RlLmNoaWxkcmVuLmxlbmd0aCAhPT0gMSB8fCBmaXJzdENoaWxkLnRleHRFeHByKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdbU0FOIEZBVEFMXSB0ZW1wbGF0ZSBtdXN0IGhhdmUgYSByb290IGVsZW1lbnQuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyAjW2VuZF1cblxuICAgICAgICAgICAgcHJvdG8uYU5vZGUgPSBmaXJzdENoaWxkO1xuICAgICAgICAgICAgaWYgKGZpcnN0Q2hpbGQudGFnTmFtZSA9PT0gJ3RlbXBsYXRlJykge1xuICAgICAgICAgICAgICAgIGZpcnN0Q2hpbGQudGFnTmFtZSA9IG51bGw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBjb21wb25lbnRQcm9wRXh0cmEgPSB7XG4gICAgICAgICAgICAgICAgJ2NsYXNzJzoge25hbWU6ICdjbGFzcycsIGV4cHI6IHBhcnNlVGV4dCgne3tjbGFzcyB8IF9jbGFzcyB8IF9zZXAoXCIgXCIpfX0nKX0sXG4gICAgICAgICAgICAgICAgJ3N0eWxlJzoge25hbWU6ICdzdHlsZScsIGV4cHI6IHBhcnNlVGV4dCgne3tzdHlsZSB8IF9zdHlsZSB8IF9zZXAoXCI7XCIpfX0nKX0sXG4gICAgICAgICAgICAgICAgJ2lkJzoge25hbWU6ICdpZCcsIGV4cHI6IHBhcnNlVGV4dCgne3tpZH19Jyl9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB2YXIgbGVuID0gZmlyc3RDaGlsZC5wcm9wcy5sZW5ndGg7XG4gICAgICAgICAgICB3aGlsZSAobGVuLS0pIHtcbiAgICAgICAgICAgICAgICB2YXIgcHJvcCA9IGZpcnN0Q2hpbGQucHJvcHNbbGVuXTtcbiAgICAgICAgICAgICAgICB2YXIgZXh0cmEgPSBjb21wb25lbnRQcm9wRXh0cmFbcHJvcC5uYW1lXTtcblxuICAgICAgICAgICAgICAgIGlmIChleHRyYSkge1xuICAgICAgICAgICAgICAgICAgICBmaXJzdENoaWxkLnByb3BzLnNwbGljZShsZW4sIDEpO1xuICAgICAgICAgICAgICAgICAgICBjb21wb25lbnRQcm9wRXh0cmFbcHJvcC5uYW1lXSA9IHByb3A7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHByb3AubmFtZSAhPT0gJ2lkJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcC5leHByLnNlZ3MucHVzaChleHRyYS5leHByLnNlZ3NbMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcC5leHByLnZhbHVlID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZmlyc3RDaGlsZC5wcm9wcy5wdXNoKFxuICAgICAgICAgICAgICAgIGNvbXBvbmVudFByb3BFeHRyYVsnY2xhc3MnXSwgLy8gZXNsaW50LWRpc2FibGUtbGluZSBkb3Qtbm90YXRpb25cbiAgICAgICAgICAgICAgICBjb21wb25lbnRQcm9wRXh0cmEuc3R5bGUsXG4gICAgICAgICAgICAgICAgY29tcG9uZW50UHJvcEV4dHJhLmlkXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vLyBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBjb21waWxlQ29tcG9uZW50O1xuXG5cbi8qKlxuICogQGZpbGUg57uE5Lu26aKE54OtXG4gKiBAYXV0aG9yIGVycm9ycmlrKGVycm9ycmlrQGdtYWlsLmNvbSlcbiAqL1xuXG4vLyB2YXIgRXhwclR5cGUgPSByZXF1aXJlKCcuLi9wYXJzZXIvZXhwci10eXBlJyk7XG4vLyB2YXIgZWFjaCA9IHJlcXVpcmUoJy4uL3V0aWwvZWFjaCcpO1xuLy8gdmFyIGNyZWF0ZUVsID0gcmVxdWlyZSgnLi4vYnJvd3Nlci9jcmVhdGUtZWwnKTtcbi8vIHZhciBnZXRQcm9wSGFuZGxlciA9IHJlcXVpcmUoJy4vZ2V0LXByb3AtaGFuZGxlcicpO1xuLy8gdmFyIGdldEFOb2RlUHJvcCA9IHJlcXVpcmUoJy4vZ2V0LWEtbm9kZS1wcm9wJyk7XG4vLyB2YXIgaXNCcm93c2VyID0gcmVxdWlyZSgnLi4vYnJvd3Nlci9pcy1icm93c2VyJyk7XG5cbi8qKlxuICog57uE5Lu26aKE54Ot77yM5YiG5p6Q57uE5Lu2YU5vZGXnmoTmlbDmja7lvJXnlKjnrYnkv6Hmga9cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBDb21wb25lbnRDbGFzcyDnu4Tku7bnsbtcbiAqL1xuZnVuY3Rpb24gY29tcG9uZW50UHJlaGVhdChDb21wb25lbnRDbGFzcykge1xuICAgIHZhciBzdGFjayA9IFtdO1xuXG4gICAgZnVuY3Rpb24gcmVjb3JkSG90c3BvdERhdGEocmVmcywgbm90Q29udGVudERhdGEpIHtcbiAgICAgICAgdmFyIGxlbiA9IHN0YWNrLmxlbmd0aDtcbiAgICAgICAgZWFjaChzdGFjaywgZnVuY3Rpb24gKGFOb2RlLCBpbmRleCkge1xuICAgICAgICAgICAgaWYgKCFub3RDb250ZW50RGF0YSB8fCBpbmRleCAhPT0gbGVuIC0gMSkge1xuICAgICAgICAgICAgICAgIGVhY2gocmVmcywgZnVuY3Rpb24gKHJlZikge1xuICAgICAgICAgICAgICAgICAgICBhTm9kZS5ob3RzcG90LmRhdGFbcmVmXSA9IDE7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gYW5hbHlzZUFOb2RlSG90c3BvdChhTm9kZSkge1xuICAgICAgICBpZiAoIWFOb2RlLmhvdHNwb3QpIHtcbiAgICAgICAgICAgIHN0YWNrLnB1c2goYU5vZGUpO1xuXG5cbiAgICAgICAgICAgIGlmIChhTm9kZS50ZXh0RXhwcikge1xuICAgICAgICAgICAgICAgIGFOb2RlLmhvdHNwb3QgPSB7ZGF0YToge319O1xuICAgICAgICAgICAgICAgIHJlY29yZEhvdHNwb3REYXRhKGFuYWx5c2VFeHByRGF0YUhvdHNwb3QoYU5vZGUudGV4dEV4cHIpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBzb3VyY2VOb2RlO1xuICAgICAgICAgICAgICAgIGlmIChpc0Jyb3dzZXIgJiYgYU5vZGUudGFnTmFtZSAmJiAhL14odGVtcGxhdGV8c2xvdHxzZWxlY3R8aW5wdXR8b3B0aW9uKSQvaS50ZXN0KGFOb2RlLnRhZ05hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZU5vZGUgPSBjcmVhdGVFbChhTm9kZS50YWdOYW1lKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBhTm9kZS5ob3RzcG90ID0ge1xuICAgICAgICAgICAgICAgICAgICBkYXRhOiB7fSxcbiAgICAgICAgICAgICAgICAgICAgZHluYW1pY1Byb3BzOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgeFByb3BzOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgcHJvcHM6IHt9LFxuICAgICAgICAgICAgICAgICAgICBzb3VyY2VOb2RlOiBzb3VyY2VOb2RlXG4gICAgICAgICAgICAgICAgfTtcblxuXG4gICAgICAgICAgICAgICAgLy8gPT09IGFuYWx5c2UgaG90c3BvdCBkYXRhOiBzdGFydFxuICAgICAgICAgICAgICAgIGVhY2goYU5vZGUudmFycywgZnVuY3Rpb24gKHZhckl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgcmVjb3JkSG90c3BvdERhdGEoYW5hbHlzZUV4cHJEYXRhSG90c3BvdCh2YXJJdGVtLmV4cHIpKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGVhY2goYU5vZGUucHJvcHMsIGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlY29yZEhvdHNwb3REYXRhKGFuYWx5c2VFeHByRGF0YUhvdHNwb3QocHJvcC5leHByKSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBndWFyZC1mb3ItaW4gKi9cbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gYU5vZGUuZGlyZWN0aXZlcykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGlyZWN0aXZlID0gYU5vZGUuZGlyZWN0aXZlc1trZXldO1xuICAgICAgICAgICAgICAgICAgICByZWNvcmRIb3RzcG90RGF0YShhbmFseXNlRXhwckRhdGFIb3RzcG90KGRpcmVjdGl2ZS52YWx1ZSksIGtleSAhPT0gJ2h0bWwnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLyogZXNsaW50LWVuYWJsZSBndWFyZC1mb3ItaW4gKi9cblxuICAgICAgICAgICAgICAgIGVhY2goYU5vZGUuZWxzZXMsIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICAgICAgICAgICAgICBhbmFseXNlQU5vZGVIb3RzcG90KGNoaWxkKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGVhY2goYU5vZGUuY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICAgICAgICAgICAgICBhbmFseXNlQU5vZGVIb3RzcG90KGNoaWxkKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAvLyA9PT0gYW5hbHlzZSBob3RzcG90IGRhdGE6IGVuZFxuXG5cbiAgICAgICAgICAgICAgICAvLyA9PT0gYW5hbHlzZSBob3RzcG90IHByb3BzOiBzdGFydFxuICAgICAgICAgICAgICAgIGVhY2goYU5vZGUucHJvcHMsIGZ1bmN0aW9uIChwcm9wLCBpbmRleCkge1xuICAgICAgICAgICAgICAgICAgICBhTm9kZS5ob3RzcG90LnByb3BzW3Byb3AubmFtZV0gPSBpbmRleDtcblxuICAgICAgICAgICAgICAgICAgICBpZiAocHJvcC5uYW1lID09PSAnaWQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9wLmlkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFOb2RlLmhvdHNwb3QuaWRQcm9wID0gcHJvcDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFOb2RlLmhvdHNwb3QuZHluYW1pY1Byb3BzLnB1c2gocHJvcCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAocHJvcC5leHByLnZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzb3VyY2VOb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0UHJvcEhhbmRsZXIoYU5vZGUudGFnTmFtZSwgcHJvcC5uYW1lKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucHJvcChzb3VyY2VOb2RlLCBwcm9wLmV4cHIudmFsdWUsIHByb3AubmFtZSwgYU5vZGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByb3AueCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFOb2RlLmhvdHNwb3QueFByb3BzLnB1c2gocHJvcCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBhTm9kZS5ob3RzcG90LmR5bmFtaWNQcm9wcy5wdXNoKHByb3ApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAvLyBpZSDkuIvvvIzlpoLmnpwgb3B0aW9uIOayoeaciSB2YWx1ZSDlsZ7mgKfvvIxzZWxlY3QudmFsdWUgPSB4eCDmk43kvZzkuI3kvJrpgInkuK0gb3B0aW9uXG4gICAgICAgICAgICAgICAgLy8g5omA5Lul5rKh5pyJ6K6+572uIHZhbHVlIOaXtu+8jOm7mOiupOaKiiBvcHRpb24g55qE5YaF5a655L2c5Li6IHZhbHVlXG4gICAgICAgICAgICAgICAgaWYgKGFOb2RlLnRhZ05hbWUgPT09ICdvcHRpb24nXG4gICAgICAgICAgICAgICAgICAgICYmICFnZXRBTm9kZVByb3AoYU5vZGUsICd2YWx1ZScpXG4gICAgICAgICAgICAgICAgICAgICYmIGFOb2RlLmNoaWxkcmVuWzBdXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZVByb3AgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAndmFsdWUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZXhwcjogYU5vZGUuY2hpbGRyZW5bMF0udGV4dEV4cHJcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgYU5vZGUucHJvcHMucHVzaCh2YWx1ZVByb3ApO1xuICAgICAgICAgICAgICAgICAgICBhTm9kZS5ob3RzcG90LmR5bmFtaWNQcm9wcy5wdXNoKHZhbHVlUHJvcCk7XG4gICAgICAgICAgICAgICAgICAgIGFOb2RlLmhvdHNwb3QucHJvcHMudmFsdWUgPSBhTm9kZS5wcm9wcy5sZW5ndGggLSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyA9PT0gYW5hbHlzZSBob3RzcG90IHByb3BzOiBlbmRcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc3RhY2sucG9wKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhbmFseXNlQU5vZGVIb3RzcG90KENvbXBvbmVudENsYXNzLnByb3RvdHlwZS5hTm9kZSk7XG59XG5cbi8qKlxuICog5YiG5p6Q6KGo6L6+5byP55qE5pWw5o2u5byV55SoXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGV4cHIg6KaB5YiG5p6Q55qE6KGo6L6+5byPXG4gKiBAcmV0dXJuIHtBcnJheX1cbiAqL1xuZnVuY3Rpb24gYW5hbHlzZUV4cHJEYXRhSG90c3BvdChleHByKSB7XG4gICAgdmFyIHJlZnMgPSBbXTtcblxuICAgIGZ1bmN0aW9uIGFuYWx5c2VFeHBycyhleHBycykge1xuICAgICAgICBlYWNoKGV4cHJzLCBmdW5jdGlvbiAoZXhwcikge1xuICAgICAgICAgICAgcmVmcyA9IHJlZnMuY29uY2F0KGFuYWx5c2VFeHByRGF0YUhvdHNwb3QoZXhwcikpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKGV4cHIudHlwZSkge1xuICAgICAgICBjYXNlIEV4cHJUeXBlLkFDQ0VTU09SOlxuICAgICAgICAgICAgdmFyIHBhdGhzID0gZXhwci5wYXRocztcbiAgICAgICAgICAgIHJlZnMucHVzaChwYXRoc1swXS52YWx1ZSk7XG5cbiAgICAgICAgICAgIGlmIChwYXRocy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgcmVmcy5wdXNoKHBhdGhzWzBdLnZhbHVlICsgJy4nICsgKHBhdGhzWzFdLnZhbHVlIHx8ICcqJykpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBhbmFseXNlRXhwcnMocGF0aHMuc2xpY2UoMSkpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBFeHByVHlwZS5VTkFSWTpcbiAgICAgICAgICAgIHJldHVybiBhbmFseXNlRXhwckRhdGFIb3RzcG90KGV4cHIuZXhwcik7XG5cbiAgICAgICAgY2FzZSBFeHByVHlwZS5URVhUOlxuICAgICAgICBjYXNlIEV4cHJUeXBlLkJJTkFSWTpcbiAgICAgICAgY2FzZSBFeHByVHlwZS5URVJUSUFSWTpcbiAgICAgICAgICAgIGFuYWx5c2VFeHBycyhleHByLnNlZ3MpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBFeHByVHlwZS5JTlRFUlA6XG4gICAgICAgICAgICByZWZzID0gYW5hbHlzZUV4cHJEYXRhSG90c3BvdChleHByLmV4cHIpO1xuXG4gICAgICAgICAgICBlYWNoKGV4cHIuZmlsdGVycywgZnVuY3Rpb24gKGZpbHRlcikge1xuICAgICAgICAgICAgICAgIGFuYWx5c2VFeHBycyhmaWx0ZXIubmFtZS5wYXRocyk7XG4gICAgICAgICAgICAgICAgYW5hbHlzZUV4cHJzKGZpbHRlci5hcmdzKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBicmVhaztcblxuICAgIH1cblxuICAgIHJldHVybiByZWZzO1xufVxuXG4vLyBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBjb21wb25lbnRQcmVoZWF0O1xuXG5cbi8qKlxuICogQGZpbGUg5bCGIGJpbmRzIOeahCBuYW1lIOS7jiBrZWJhYmNhc2Ug6L2s5o2i5oiQIGNhbWVsY2FzZVxuICogQGF1dGhvciBlcnJvcnJpayhlcnJvcnJpa0BnbWFpbC5jb20pXG4gKi9cblxuLy8gdmFyIGtlYmFiMmNhbWVsID0gcmVxdWlyZSgnLi4vdXRpbC9rZWJhYjJjYW1lbCcpO1xuLy8gdmFyIGVhY2ggPSByZXF1aXJlKCcuLi91dGlsL2VhY2gnKTtcblxuLyoqXG4gKiDlsIYgYmluZHMg55qEIG5hbWUg5LuOIGtlYmFiY2FzZSDovazmjaLmiJAgY2FtZWxjYXNlXG4gKlxuICogQHBhcmFtIHtBcnJheX0gYmluZHMgYmluZHPpm4blkIhcbiAqIEByZXR1cm4ge0FycmF5fVxuICovXG5mdW5jdGlvbiBjYW1lbENvbXBvbmVudEJpbmRzKGJpbmRzKSB7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIGVhY2goYmluZHMsIGZ1bmN0aW9uIChiaW5kKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKHtcbiAgICAgICAgICAgIG5hbWU6IGtlYmFiMmNhbWVsKGJpbmQubmFtZSksXG4gICAgICAgICAgICBleHByOiBiaW5kLmV4cHIsXG4gICAgICAgICAgICB4OiBiaW5kLngsXG4gICAgICAgICAgICByYXc6IGJpbmQucmF3XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLy8gZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gY2FtZWxDb21wb25lbnRCaW5kcztcblxuXG4vKipcbiAqIEBmaWxlIOe8luivkea6kOeggeeahCBoZWxwZXIg5pa55rOV6ZuG5ZCIXG4gKiBAYXV0aG9yIGVycm9ycmlrKGVycm9ycmlrQGdtYWlsLmNvbSlcbiAqL1xuXG4vLyB2YXIgZWFjaCA9IHJlcXVpcmUoJy4uL3V0aWwvZWFjaCcpO1xuLy8gdmFyIEV4cHJUeXBlID0gcmVxdWlyZSgnLi4vcGFyc2VyL2V4cHItdHlwZScpO1xuXG4vLyAjW2JlZ2luXSBzc3Jcbi8vIFxuLy8gLyoqXG4vLyAgKiDnvJbor5HmupDnoIHnmoQgaGVscGVyIOaWueazlembhuWQiOWvueixoVxuLy8gICovXG4vLyB2YXIgY29tcGlsZUV4cHJTb3VyY2UgPSB7XG4vLyBcbi8vICAgICAvKipcbi8vICAgICAgKiDlrZfnrKbkuLLlrZfpnaLljJZcbi8vICAgICAgKlxuLy8gICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzb3VyY2Ug6ZyA6KaB5a2X6Z2i5YyW55qE5a2X56ym5LiyXG4vLyAgICAgICogQHJldHVybiB7c3RyaW5nfSDlrZfnrKbkuLLlrZfpnaLljJbnu5Pmnpxcbi8vICAgICAgKi9cbi8vICAgICBzdHJpbmdMaXRlcmFsaXplOiBmdW5jdGlvbiAoc291cmNlKSB7XG4vLyAgICAgICAgIHJldHVybiAnXCInXG4vLyAgICAgICAgICAgICArIHNvdXJjZVxuLy8gICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXHg1Qy9nLCAnXFxcXFxcXFwnKVxuLy8gICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cIi9nLCAnXFxcXFwiJylcbi8vICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFx4MEEvZywgJ1xcXFxuJylcbi8vICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFx4MDkvZywgJ1xcXFx0Jylcbi8vICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFx4MEQvZywgJ1xcXFxyJylcbi8vICAgICAgICAgICAgICAgICAvLyAucmVwbGFjZSggL1xceDA4L2csICdcXFxcYicgKVxuLy8gICAgICAgICAgICAgICAgIC8vIC5yZXBsYWNlKCAvXFx4MEMvZywgJ1xcXFxmJyApXG4vLyAgICAgICAgICAgICArICdcIic7XG4vLyAgICAgfSxcbi8vIFxuLy8gICAgIC8qKlxuLy8gICAgICAqIOeUn+aIkOaVsOaNruiuv+mXruihqOi+vuW8j+S7o+eggVxuLy8gICAgICAqXG4vLyAgICAgICogQHBhcmFtIHtPYmplY3Q/fSBhY2Nlc3NvckV4cHIgYWNjZXNzb3Looajovr7lvI/lr7nosaFcbi8vICAgICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4vLyAgICAgICovXG4vLyAgICAgZGF0YUFjY2VzczogZnVuY3Rpb24gKGFjY2Vzc29yRXhwcikge1xuLy8gICAgICAgICB2YXIgY29kZSA9ICdjb21wb25lbnRDdHguZGF0YSc7XG4vLyAgICAgICAgIGlmIChhY2Nlc3NvckV4cHIpIHtcbi8vICAgICAgICAgICAgIGVhY2goYWNjZXNzb3JFeHByLnBhdGhzLCBmdW5jdGlvbiAocGF0aCkge1xuLy8gICAgICAgICAgICAgICAgIGlmIChwYXRoLnR5cGUgPT09IEV4cHJUeXBlLkFDQ0VTU09SKSB7XG4vLyAgICAgICAgICAgICAgICAgICAgIGNvZGUgKz0gJ1snICsgY29tcGlsZUV4cHJTb3VyY2UuZGF0YUFjY2VzcyhwYXRoKSArICddJztcbi8vICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuLy8gICAgICAgICAgICAgICAgIH1cbi8vIFxuLy8gICAgICAgICAgICAgICAgIHN3aXRjaCAodHlwZW9mIHBhdGgudmFsdWUpIHtcbi8vICAgICAgICAgICAgICAgICAgICAgY2FzZSAnc3RyaW5nJzpcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGUgKz0gJy4nICsgcGF0aC52YWx1ZTtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuLy8gXG4vLyAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ251bWJlcic6XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlICs9ICdbJyArIHBhdGgudmFsdWUgKyAnXSc7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbi8vICAgICAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICB9KTtcbi8vICAgICAgICAgfVxuLy8gXG4vLyAgICAgICAgIHJldHVybiBjb2RlO1xuLy8gICAgIH0sXG4vLyBcbi8vICAgICAvKipcbi8vICAgICAgKiDnlJ/miJDmj5LlgLzku6PnoIFcbi8vICAgICAgKlxuLy8gICAgICAqIEBwYXJhbSB7T2JqZWN0fSBpbnRlcnBFeHByIOaPkuWAvOihqOi+vuW8j+WvueixoVxuLy8gICAgICAqIEByZXR1cm4ge3N0cmluZ31cbi8vICAgICAgKi9cbi8vICAgICBpbnRlcnA6IGZ1bmN0aW9uIChpbnRlcnBFeHByKSB7XG4vLyAgICAgICAgIHZhciBjb2RlID0gY29tcGlsZUV4cHJTb3VyY2UuZXhwcihpbnRlcnBFeHByLmV4cHIpO1xuLy8gXG4vLyBcbi8vICAgICAgICAgZWFjaChpbnRlcnBFeHByLmZpbHRlcnMsIGZ1bmN0aW9uIChmaWx0ZXIpIHtcbi8vICAgICAgICAgICAgIGNvZGUgPSAnY29tcG9uZW50Q3R4LmNhbGxGaWx0ZXIoXCInICsgZmlsdGVyLm5hbWUucGF0aHNbMF0udmFsdWUgKyAnXCIsIFsnICsgY29kZTtcbi8vICAgICAgICAgICAgIGVhY2goZmlsdGVyLmFyZ3MsIGZ1bmN0aW9uIChhcmcpIHtcbi8vICAgICAgICAgICAgICAgICBjb2RlICs9ICcsICcgKyBjb21waWxlRXhwclNvdXJjZS5leHByKGFyZyk7XG4vLyAgICAgICAgICAgICB9KTtcbi8vICAgICAgICAgICAgIGNvZGUgKz0gJ10pJztcbi8vICAgICAgICAgfSk7XG4vLyBcbi8vICAgICAgICAgaWYgKCFpbnRlcnBFeHByLm9yaWdpbmFsKSB7XG4vLyAgICAgICAgICAgICByZXR1cm4gJ2VzY2FwZUhUTUwoJyArIGNvZGUgKyAnKSc7XG4vLyAgICAgICAgIH1cbi8vIFxuLy8gICAgICAgICByZXR1cm4gY29kZTtcbi8vICAgICB9LFxuLy8gXG4vLyAgICAgLyoqXG4vLyAgICAgICog55Sf5oiQ5paH5pys54mH5q615Luj56CBXG4vLyAgICAgICpcbi8vICAgICAgKiBAcGFyYW0ge09iamVjdH0gdGV4dEV4cHIg5paH5pys54mH5q616KGo6L6+5byP5a+56LGhXG4vLyAgICAgICogQHJldHVybiB7c3RyaW5nfVxuLy8gICAgICAqL1xuLy8gICAgIHRleHQ6IGZ1bmN0aW9uICh0ZXh0RXhwcikge1xuLy8gICAgICAgICBpZiAodGV4dEV4cHIuc2Vncy5sZW5ndGggPT09IDApIHtcbi8vICAgICAgICAgICAgIHJldHVybiAnXCJcIic7XG4vLyAgICAgICAgIH1cbi8vIFxuLy8gICAgICAgICB2YXIgY29kZSA9ICcnO1xuLy8gXG4vLyAgICAgICAgIGVhY2godGV4dEV4cHIuc2VncywgZnVuY3Rpb24gKHNlZykge1xuLy8gICAgICAgICAgICAgdmFyIHNlZ0NvZGUgPSBjb21waWxlRXhwclNvdXJjZS5leHByKHNlZyk7XG4vLyAgICAgICAgICAgICBjb2RlICs9IGNvZGUgPyAnICsgJyArIHNlZ0NvZGUgOiBzZWdDb2RlO1xuLy8gICAgICAgICB9KTtcbi8vIFxuLy8gICAgICAgICByZXR1cm4gY29kZTtcbi8vICAgICB9LFxuLy8gXG4vLyAgICAgLyoqXG4vLyAgICAgICog5LqM5YWD6KGo6L6+5byP5pON5L2c56ym5pig5bCE6KGoXG4vLyAgICAgICpcbi8vICAgICAgKiBAdHlwZSB7T2JqZWN0fVxuLy8gICAgICAqL1xuLy8gICAgIGJpbmFyeU9wOiB7XG4vLyAgICAgICAgIC8qIGVzbGludC1kaXNhYmxlICovXG4vLyAgICAgICAgIDQzOiAnKycsXG4vLyAgICAgICAgIDQ1OiAnLScsXG4vLyAgICAgICAgIDQyOiAnKicsXG4vLyAgICAgICAgIDQ3OiAnLycsXG4vLyAgICAgICAgIDYwOiAnPCcsXG4vLyAgICAgICAgIDYyOiAnPicsXG4vLyAgICAgICAgIDc2OiAnJiYnLFxuLy8gICAgICAgICA5NDogJyE9Jyxcbi8vICAgICAgICAgMTIxOiAnPD0nLFxuLy8gICAgICAgICAxMjI6ICc9PScsXG4vLyAgICAgICAgIDEyMzogJz49Jyxcbi8vICAgICAgICAgMTU1OiAnIT09Jyxcbi8vICAgICAgICAgMTgzOiAnPT09Jyxcbi8vICAgICAgICAgMjQ4OiAnfHwnXG4vLyAgICAgICAgIC8qIGVzbGludC1lbmFibGUgKi9cbi8vICAgICB9LFxuLy8gXG4vLyAgICAgLyoqXG4vLyAgICAgICog55Sf5oiQ6KGo6L6+5byP5Luj56CBXG4vLyAgICAgICpcbi8vICAgICAgKiBAcGFyYW0ge09iamVjdH0gZXhwciDooajovr7lvI/lr7nosaFcbi8vICAgICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4vLyAgICAgICovXG4vLyAgICAgZXhwcjogZnVuY3Rpb24gKGV4cHIpIHtcbi8vICAgICAgICAgc3dpdGNoIChleHByLnR5cGUpIHtcbi8vICAgICAgICAgICAgIGNhc2UgRXhwclR5cGUuVU5BUlk6XG4vLyAgICAgICAgICAgICAgICAgcmV0dXJuICchJyArIGNvbXBpbGVFeHByU291cmNlLmV4cHIoZXhwci5leHByKTtcbi8vIFxuLy8gICAgICAgICAgICAgY2FzZSBFeHByVHlwZS5CSU5BUlk6XG4vLyAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbXBpbGVFeHByU291cmNlLmV4cHIoZXhwci5zZWdzWzBdKVxuLy8gICAgICAgICAgICAgICAgICAgICArIGNvbXBpbGVFeHByU291cmNlLmJpbmFyeU9wW2V4cHIub3BlcmF0b3JdXG4vLyAgICAgICAgICAgICAgICAgICAgICsgY29tcGlsZUV4cHJTb3VyY2UuZXhwcihleHByLnNlZ3NbMV0pO1xuLy8gXG4vLyAgICAgICAgICAgICBjYXNlIEV4cHJUeXBlLlRFUlRJQVJZOlxuLy8gICAgICAgICAgICAgICAgIHJldHVybiBjb21waWxlRXhwclNvdXJjZS5leHByKGV4cHIuc2Vnc1swXSlcbi8vICAgICAgICAgICAgICAgICAgICAgKyAnPycgKyBjb21waWxlRXhwclNvdXJjZS5leHByKGV4cHIuc2Vnc1sxXSlcbi8vICAgICAgICAgICAgICAgICAgICAgKyAnOicgKyBjb21waWxlRXhwclNvdXJjZS5leHByKGV4cHIuc2Vnc1syXSk7XG4vLyBcbi8vICAgICAgICAgICAgIGNhc2UgRXhwclR5cGUuU1RSSU5HOlxuLy8gICAgICAgICAgICAgICAgIHJldHVybiBjb21waWxlRXhwclNvdXJjZS5zdHJpbmdMaXRlcmFsaXplKGV4cHIubGl0ZXJhbCB8fCBleHByLnZhbHVlKTtcbi8vIFxuLy8gICAgICAgICAgICAgY2FzZSBFeHByVHlwZS5OVU1CRVI6XG4vLyAgICAgICAgICAgICAgICAgcmV0dXJuIGV4cHIudmFsdWU7XG4vLyBcbi8vICAgICAgICAgICAgIGNhc2UgRXhwclR5cGUuQk9PTDpcbi8vICAgICAgICAgICAgICAgICByZXR1cm4gZXhwci52YWx1ZSA/ICd0cnVlJyA6ICdmYWxzZSc7XG4vLyBcbi8vICAgICAgICAgICAgIGNhc2UgRXhwclR5cGUuQUNDRVNTT1I6XG4vLyAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbXBpbGVFeHByU291cmNlLmRhdGFBY2Nlc3MoZXhwcik7XG4vLyBcbi8vICAgICAgICAgICAgIGNhc2UgRXhwclR5cGUuSU5URVJQOlxuLy8gICAgICAgICAgICAgICAgIHJldHVybiBjb21waWxlRXhwclNvdXJjZS5pbnRlcnAoZXhwcik7XG4vLyBcbi8vICAgICAgICAgICAgIGNhc2UgRXhwclR5cGUuVEVYVDpcbi8vICAgICAgICAgICAgICAgICByZXR1cm4gY29tcGlsZUV4cHJTb3VyY2UudGV4dChleHByKTtcbi8vICAgICAgICAgfVxuLy8gICAgIH1cbi8vIH07XG4vLyAjW2VuZF1cblxuLy8gZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gY29tcGlsZUV4cHJTb3VyY2U7XG5cblxuLyoqXG4gKiBAZmlsZSDnvJbor5HmupDnoIHnmoTkuK3pl7RidWZmZXLnsbtcbiAqIEBhdXRob3IgZXJyb3JyaWsoZXJyb3JyaWtAZ21haWwuY29tKVxuICovXG5cbi8vIHZhciBlYWNoID0gcmVxdWlyZSgnLi4vdXRpbC9lYWNoJyk7XG4vLyB2YXIgY29tcGlsZUV4cHJTb3VyY2UgPSByZXF1aXJlKCcuL2NvbXBpbGUtZXhwci1zb3VyY2UnKTtcblxuXG4vLyAjW2JlZ2luXSBzc3Jcbi8vIC8qKlxuLy8gICog57yW6K+R5rqQ56CB55qE5Lit6Ze0YnVmZmVy57G7XG4vLyAgKlxuLy8gICogQGNsYXNzXG4vLyAgKi9cbi8vIGZ1bmN0aW9uIENvbXBpbGVTb3VyY2VCdWZmZXIoKSB7XG4vLyAgICAgdGhpcy5zZWdzID0gW107XG4vLyB9XG4vLyBcbi8vIC8qKlxuLy8gICog5re75Yqg5Y6f5aeL5Luj56CB77yM5bCG5Y6f5bCB5LiN5Yqo6L6T5Ye6XG4vLyAgKlxuLy8gICogQHBhcmFtIHtzdHJpbmd9IGNvZGUg5Y6f5aeL5Luj56CBXG4vLyAgKi9cbi8vIENvbXBpbGVTb3VyY2VCdWZmZXIucHJvdG90eXBlLmFkZFJhdyA9IGZ1bmN0aW9uIChjb2RlKSB7XG4vLyAgICAgdGhpcy5zZWdzLnB1c2goe1xuLy8gICAgICAgICB0eXBlOiAnUkFXJyxcbi8vICAgICAgICAgY29kZTogY29kZVxuLy8gICAgIH0pO1xuLy8gfTtcbi8vIFxuLy8gLyoqXG4vLyAgKiDmt7vliqDooqvmi7zmjqXkuLpodG1s55qE5Y6f5aeL5Luj56CBXG4vLyAgKlxuLy8gICogQHBhcmFtIHtzdHJpbmd9IGNvZGUg5Y6f5aeL5Luj56CBXG4vLyAgKi9cbi8vIENvbXBpbGVTb3VyY2VCdWZmZXIucHJvdG90eXBlLmpvaW5SYXcgPSBmdW5jdGlvbiAoY29kZSkge1xuLy8gICAgIHRoaXMuc2Vncy5wdXNoKHtcbi8vICAgICAgICAgdHlwZTogJ0pPSU5fUkFXJyxcbi8vICAgICAgICAgY29kZTogY29kZVxuLy8gICAgIH0pO1xuLy8gfTtcbi8vIFxuLy8gLyoqXG4vLyAgKiDmt7vliqByZW5kZXJlcuaWueazleeahOi1t+Wni+a6kOeggVxuLy8gICovXG4vLyBDb21waWxlU291cmNlQnVmZmVyLnByb3RvdHlwZS5hZGRSZW5kZXJlclN0YXJ0ID0gZnVuY3Rpb24gKCkge1xuLy8gICAgIHRoaXMuYWRkUmF3KCdmdW5jdGlvbiAoZGF0YSwgcGFyZW50Q3R4LCBnaXZlblNsb3RzKSB7Jyk7XG4vLyAgICAgdGhpcy5hZGRSYXcoJ3ZhciBodG1sID0gXCJcIjsnKTtcbi8vIH07XG4vLyBcbi8vIC8qKlxuLy8gICog5re75YqgcmVuZGVyZXLmlrnms5XnmoTnu5PmnZ/mupDnoIFcbi8vICAqL1xuLy8gQ29tcGlsZVNvdXJjZUJ1ZmZlci5wcm90b3R5cGUuYWRkUmVuZGVyZXJFbmQgPSBmdW5jdGlvbiAoKSB7XG4vLyAgICAgdGhpcy5hZGRSYXcoJ3JldHVybiBodG1sOycpO1xuLy8gICAgIHRoaXMuYWRkUmF3KCd9Jyk7XG4vLyB9O1xuLy8gXG4vLyAvKipcbi8vICAqIOa3u+WKoOiiq+aLvOaOpeS4umh0bWznmoTpnZnmgIHlrZfnrKbkuLJcbi8vICAqXG4vLyAgKiBAcGFyYW0ge3N0cmluZ30gc3RyIOiiq+aLvOaOpeeahOWtl+espuS4slxuLy8gICovXG4vLyBDb21waWxlU291cmNlQnVmZmVyLnByb3RvdHlwZS5qb2luU3RyaW5nID0gZnVuY3Rpb24gKHN0cikge1xuLy8gICAgIHRoaXMuc2Vncy5wdXNoKHtcbi8vICAgICAgICAgc3RyOiBzdHIsXG4vLyAgICAgICAgIHR5cGU6ICdKT0lOX1NUUklORydcbi8vICAgICB9KTtcbi8vIH07XG4vLyBcbi8vIC8qKlxuLy8gICog5re75Yqg6KKr5ou85o6l5Li6aHRtbOeahOaVsOaNruiuv+mXrlxuLy8gICpcbi8vICAqIEBwYXJhbSB7T2JqZWN0P30gYWNjZXNzb3Ig5pWw5o2u6K6/6Zeu6KGo6L6+5byP5a+56LGhXG4vLyAgKi9cbi8vIENvbXBpbGVTb3VyY2VCdWZmZXIucHJvdG90eXBlLmpvaW5EYXRhU3RyaW5naWZ5ID0gZnVuY3Rpb24gKCkge1xuLy8gICAgIHRoaXMuc2Vncy5wdXNoKHtcbi8vICAgICAgICAgdHlwZTogJ0pPSU5fREFUQV9TVFJJTkdJRlknXG4vLyAgICAgfSk7XG4vLyB9O1xuLy8gXG4vLyAvKipcbi8vICAqIOa3u+WKoOiiq+aLvOaOpeS4umh0bWznmoTooajovr7lvI9cbi8vICAqXG4vLyAgKiBAcGFyYW0ge09iamVjdH0gZXhwciDooajovr7lvI/lr7nosaFcbi8vICAqL1xuLy8gQ29tcGlsZVNvdXJjZUJ1ZmZlci5wcm90b3R5cGUuam9pbkV4cHIgPSBmdW5jdGlvbiAoZXhwcikge1xuLy8gICAgIHRoaXMuc2Vncy5wdXNoKHtcbi8vICAgICAgICAgZXhwcjogZXhwcixcbi8vICAgICAgICAgdHlwZTogJ0pPSU5fRVhQUidcbi8vICAgICB9KTtcbi8vIH07XG4vLyBcbi8vIC8qKlxuLy8gICog55Sf5oiQ57yW6K+R5ZCO5Luj56CBXG4vLyAgKlxuLy8gICogQHJldHVybiB7c3RyaW5nfVxuLy8gICovXG4vLyBDb21waWxlU291cmNlQnVmZmVyLnByb3RvdHlwZS50b0NvZGUgPSBmdW5jdGlvbiAoKSB7XG4vLyAgICAgdmFyIGNvZGUgPSBbXTtcbi8vICAgICB2YXIgdGVtcCA9ICcnO1xuLy8gXG4vLyAgICAgZnVuY3Rpb24gZ2VuU3RyTGl0ZXJhbCgpIHtcbi8vICAgICAgICAgaWYgKHRlbXApIHtcbi8vICAgICAgICAgICAgIGNvZGUucHVzaCgnaHRtbCArPSAnICsgY29tcGlsZUV4cHJTb3VyY2Uuc3RyaW5nTGl0ZXJhbGl6ZSh0ZW1wKSArICc7Jyk7XG4vLyAgICAgICAgIH1cbi8vIFxuLy8gICAgICAgICB0ZW1wID0gJyc7XG4vLyAgICAgfVxuLy8gXG4vLyAgICAgZWFjaCh0aGlzLnNlZ3MsIGZ1bmN0aW9uIChzZWcpIHtcbi8vICAgICAgICAgaWYgKHNlZy50eXBlID09PSAnSk9JTl9TVFJJTkcnKSB7XG4vLyAgICAgICAgICAgICB0ZW1wICs9IHNlZy5zdHI7XG4vLyAgICAgICAgICAgICByZXR1cm47XG4vLyAgICAgICAgIH1cbi8vIFxuLy8gICAgICAgICBnZW5TdHJMaXRlcmFsKCk7XG4vLyAgICAgICAgIHN3aXRjaCAoc2VnLnR5cGUpIHtcbi8vICAgICAgICAgICAgIGNhc2UgJ0pPSU5fREFUQV9TVFJJTkdJRlknOlxuLy8gICAgICAgICAgICAgICAgIGNvZGUucHVzaCgnaHRtbCArPSBzdHJpbmdpZmllci5hbnkoJyArIGNvbXBpbGVFeHByU291cmNlLmRhdGFBY2Nlc3MoKSArICcpOycpO1xuLy8gICAgICAgICAgICAgICAgIGJyZWFrO1xuLy8gXG4vLyAgICAgICAgICAgICBjYXNlICdKT0lOX0VYUFInOlxuLy8gICAgICAgICAgICAgICAgIGNvZGUucHVzaCgnaHRtbCArPSAnICsgY29tcGlsZUV4cHJTb3VyY2UuZXhwcihzZWcuZXhwcikgKyAnOycpO1xuLy8gICAgICAgICAgICAgICAgIGJyZWFrO1xuLy8gXG4vLyAgICAgICAgICAgICBjYXNlICdKT0lOX1JBVyc6XG4vLyAgICAgICAgICAgICAgICAgY29kZS5wdXNoKCdodG1sICs9ICcgKyBzZWcuY29kZSArICc7Jyk7XG4vLyAgICAgICAgICAgICAgICAgYnJlYWs7XG4vLyBcbi8vICAgICAgICAgICAgIGNhc2UgJ1JBVyc6XG4vLyAgICAgICAgICAgICAgICAgY29kZS5wdXNoKHNlZy5jb2RlKTtcbi8vICAgICAgICAgICAgICAgICBicmVhaztcbi8vIFxuLy8gICAgICAgICB9XG4vLyAgICAgfSk7XG4vLyBcbi8vICAgICBnZW5TdHJMaXRlcmFsKCk7XG4vLyBcbi8vICAgICByZXR1cm4gY29kZS5qb2luKCdcXG4nKTtcbi8vIH07XG4vLyBcbi8vICNbZW5kXVxuXG4vLyBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBDb21waWxlU291cmNlQnVmZmVyO1xuXG5cbi8qKlxuICogQGZpbGUg5bCG57uE5Lu257yW6K+R5oiQIHJlbmRlciDmlrnms5XnmoQganMg5rqQ56CBXG4gKiBAYXV0aG9yIGVycm9ycmlrKGVycm9ycmlrQGdtYWlsLmNvbSlcbiAqL1xuXG5cbi8vIHZhciBlYWNoID0gcmVxdWlyZSgnLi4vdXRpbC9lYWNoJyk7XG4vLyB2YXIgZ3VpZCA9IHJlcXVpcmUoJy4uL3V0aWwvZ3VpZCcpO1xuLy8gdmFyIHBhcnNlRXhwciA9IHJlcXVpcmUoJy4uL3BhcnNlci9wYXJzZS1leHByJyk7XG4vLyB2YXIgY3JlYXRlQU5vZGUgPSByZXF1aXJlKCcuLi9wYXJzZXIvY3JlYXRlLWEtbm9kZScpO1xuLy8gdmFyIGNsb25lRGlyZWN0aXZlcyA9IHJlcXVpcmUoJy4uL3BhcnNlci9jbG9uZS1kaXJlY3RpdmVzJyk7XG4vLyB2YXIgYXV0b0Nsb3NlVGFncyA9IHJlcXVpcmUoJy4uL2Jyb3dzZXIvYXV0by1jbG9zZS10YWdzJyk7XG4vLyB2YXIgQ29tcGlsZVNvdXJjZUJ1ZmZlciA9IHJlcXVpcmUoJy4vY29tcGlsZS1zb3VyY2UtYnVmZmVyJyk7XG4vLyB2YXIgY29tcGlsZUV4cHJTb3VyY2UgPSByZXF1aXJlKCcuL2NvbXBpbGUtZXhwci1zb3VyY2UnKTtcbi8vIHZhciByaW5zZUNvbmRBTm9kZSA9IHJlcXVpcmUoJy4vcmluc2UtY29uZC1hbm9kZScpO1xuLy8gdmFyIGdldEFOb2RlUHJvcCA9IHJlcXVpcmUoJy4vZ2V0LWEtbm9kZS1wcm9wJyk7XG5cbi8vICNbYmVnaW5dIHNzclxuLy8gXG4vLyAvKipcbi8vICAqIOeUn+aIkOW6j+WIl+WMluaXtui1t+Wni+ahqeeahGh0bWxcbi8vICAqXG4vLyAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSDmoannsbvlnovmoIfor4Zcbi8vICAqIEBwYXJhbSB7c3RyaW5nP30gY29udGVudCDmoanlhoXnmoTlhoXlrrlcbi8vICAqIEByZXR1cm4ge3N0cmluZ31cbi8vICAqL1xuLy8gZnVuY3Rpb24gc2VyaWFsaXplU3R1bXAodHlwZSwgY29udGVudCkge1xuLy8gICAgIHJldHVybiAnPCEtLXMtJyArIHR5cGUgKyAoY29udGVudCA/ICc6JyArIGNvbnRlbnQgOiAnJykgKyAnLS0+Jztcbi8vIH1cbi8vIFxuLy8gLyoqXG4vLyAgKiDnlJ/miJDluo/liJfljJbml7bnu5PmnZ/moannmoRodG1sXG4vLyAgKlxuLy8gICogQHBhcmFtIHtzdHJpbmd9IHR5cGUg5qGp57G75Z6L5qCH6K+GXG4vLyAgKiBAcmV0dXJuIHtzdHJpbmd9XG4vLyAgKi9cbi8vIGZ1bmN0aW9uIHNlcmlhbGl6ZVN0dW1wRW5kKHR5cGUpIHtcbi8vICAgICByZXR1cm4gJzwhLS0vcy0nICsgdHlwZSArICctLT4nO1xuLy8gfVxuLy8gXG4vLyAvKipcbi8vICAqIGVsZW1lbnQg55qE57yW6K+R5pa55rOV6ZuG5ZCI5a+56LGhXG4vLyAgKlxuLy8gICogQGlubmVyXG4vLyAgKi9cbi8vIHZhciBlbGVtZW50U291cmNlQ29tcGlsZXIgPSB7XG4vLyBcbi8vICAgICAvKiBlc2xpbnQtZGlzYWJsZSBtYXgtcGFyYW1zICovXG4vLyAgICAgLyoqXG4vLyAgICAgICog57yW6K+R5YWD57Sg5qCH562+5aS0XG4vLyAgICAgICpcbi8vICAgICAgKiBAcGFyYW0ge0NvbXBpbGVTb3VyY2VCdWZmZXJ9IHNvdXJjZUJ1ZmZlciDnvJbor5HmupDnoIHnmoTkuK3pl7RidWZmZXJcbi8vICAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFnTmFtZSDmoIfnrb7lkI1cbi8vICAgICAgKiBAcGFyYW0ge0FycmF5fSBwcm9wcyDlsZ7mgKfliJfooahcbi8vICAgICAgKiBAcGFyYW0ge3N0cmluZz99IGV4dHJhUHJvcCDpop3lpJbnmoTlsZ7mgKfkuLJcbi8vICAgICAgKiBAcGFyYW0ge2Jvb2xlYW4/fSBpc0Nsb3NlIOaYr+WQpumXreWQiFxuLy8gICAgICAqL1xuLy8gICAgIHRhZ1N0YXJ0OiBmdW5jdGlvbiAoc291cmNlQnVmZmVyLCB0YWdOYW1lLCBwcm9wcywgZXh0cmFQcm9wLCBpc0Nsb3NlKSB7XG4vLyAgICAgICAgIHNvdXJjZUJ1ZmZlci5qb2luU3RyaW5nKCc8JyArIHRhZ05hbWUpO1xuLy8gICAgICAgICBzb3VyY2VCdWZmZXIuam9pblN0cmluZyhleHRyYVByb3AgfHwgJycpO1xuLy8gXG4vLyAgICAgICAgIC8vIGluZGV4IGxpc3Rcbi8vICAgICAgICAgdmFyIHByb3BzSW5kZXggPSB7fTtcbi8vICAgICAgICAgZWFjaChwcm9wcywgZnVuY3Rpb24gKHByb3ApIHtcbi8vICAgICAgICAgICAgIHByb3BzSW5kZXhbcHJvcC5uYW1lXSA9IHByb3A7XG4vLyAgICAgICAgIH0pO1xuLy8gXG4vLyAgICAgICAgIGVhY2gocHJvcHMsIGZ1bmN0aW9uIChwcm9wKSB7XG4vLyAgICAgICAgICAgICBpZiAocHJvcC5uYW1lID09PSAnc2xvdCcpIHtcbi8vICAgICAgICAgICAgICAgICByZXR1cm47XG4vLyAgICAgICAgICAgICB9XG4vLyBcbi8vICAgICAgICAgICAgIGlmIChwcm9wLm5hbWUgPT09ICd2YWx1ZScpIHtcbi8vICAgICAgICAgICAgICAgICBzd2l0Y2ggKHRhZ05hbWUpIHtcbi8vICAgICAgICAgICAgICAgICAgICAgY2FzZSAndGV4dGFyZWEnOlxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuLy8gXG4vLyAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3NlbGVjdCc6XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VCdWZmZXIuYWRkUmF3KCckc2VsZWN0VmFsdWUgPSAnXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBjb21waWxlRXhwclNvdXJjZS5leHByKHByb3AuZXhwcilcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICArICcgfHwgXCJcIjsnXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICApO1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuLy8gXG4vLyAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ29wdGlvbic6XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VCdWZmZXIuYWRkUmF3KCckb3B0aW9uVmFsdWUgPSAnXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBjb21waWxlRXhwclNvdXJjZS5leHByKHByb3AuZXhwcilcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICArICc7J1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgKTtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHZhbHVlXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VCdWZmZXIuYWRkUmF3KCdpZiAoJG9wdGlvblZhbHVlICE9IG51bGwpIHsnKTtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZUJ1ZmZlci5qb2luUmF3KCdcIiB2YWx1ZT1cXFxcXCJcIiArICRvcHRpb25WYWx1ZSArIFwiXFxcXFwiXCInKTtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZUJ1ZmZlci5hZGRSYXcoJ30nKTtcbi8vIFxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2VsZWN0ZWRcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZUJ1ZmZlci5hZGRSYXcoJ2lmICgkb3B0aW9uVmFsdWUgPT09ICRzZWxlY3RWYWx1ZSkgeycpO1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlQnVmZmVyLmpvaW5TdHJpbmcoJyBzZWxlY3RlZCcpO1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlQnVmZmVyLmFkZFJhdygnfScpO1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuLy8gICAgICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgIH1cbi8vIFxuLy8gICAgICAgICAgICAgc3dpdGNoIChwcm9wLm5hbWUpIHtcbi8vICAgICAgICAgICAgICAgICBjYXNlICdyZWFkb25seSc6XG4vLyAgICAgICAgICAgICAgICAgY2FzZSAnZGlzYWJsZWQnOlxuLy8gICAgICAgICAgICAgICAgIGNhc2UgJ211bHRpcGxlJzpcbi8vICAgICAgICAgICAgICAgICAgICAgaWYgKHByb3AucmF3ID09PSAnJykge1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlQnVmZmVyLmpvaW5TdHJpbmcoJyAnICsgcHJvcC5uYW1lKTtcbi8vICAgICAgICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZUJ1ZmZlci5qb2luUmF3KCdib29sQXR0ckZpbHRlcihcIicgKyBwcm9wLm5hbWUgKyAnXCIsICdcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIGNvbXBpbGVFeHByU291cmNlLmV4cHIocHJvcC5leHByKVxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgJyknXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICApO1xuLy8gICAgICAgICAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuLy8gXG4vLyAgICAgICAgICAgICAgICAgY2FzZSAnY2hlY2tlZCc6XG4vLyAgICAgICAgICAgICAgICAgICAgIGlmICh0YWdOYW1lID09PSAnaW5wdXQnKSB7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWVQcm9wID0gcHJvcHNJbmRleC52YWx1ZTtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZUNvZGUgPSBjb21waWxlRXhwclNvdXJjZS5leHByKHZhbHVlUHJvcC5leHByKTtcbi8vIFxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlUHJvcCkge1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAocHJvcHNJbmRleC50eXBlLnJhdykge1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdjaGVja2JveCc6XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VCdWZmZXIuYWRkUmF3KCdpZiAoY29udGFpbnMoJ1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgY29tcGlsZUV4cHJTb3VyY2UuZXhwcihwcm9wLmV4cHIpXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAnLCAnXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyB2YWx1ZUNvZGVcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArICcpKSB7J1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZUJ1ZmZlci5qb2luU3RyaW5nKCcgY2hlY2tlZCcpO1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlQnVmZmVyLmFkZFJhdygnfScpO1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4vLyBcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAncmFkaW8nOlxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlQnVmZmVyLmFkZFJhdygnaWYgKCdcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIGNvbXBpbGVFeHByU291cmNlLmV4cHIocHJvcC5leHByKVxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgJyA9PT0gJ1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgdmFsdWVDb2RlXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAnKSB7J1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZUJ1ZmZlci5qb2luU3RyaW5nKCcgY2hlY2tlZCcpO1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlQnVmZmVyLmFkZFJhdygnfScpO1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuLy8gXG4vLyAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbi8vICAgICAgICAgICAgICAgICAgICAgaWYgKHByb3AuYXR0cikge1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlQnVmZmVyLmpvaW5TdHJpbmcoJyAnICsgcHJvcC5hdHRyKTtcbi8vICAgICAgICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZUJ1ZmZlci5qb2luUmF3KCdhdHRyRmlsdGVyKFwiJyArIHByb3AubmFtZSArICdcIiwgJ1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgKHByb3AueCA/ICdlc2NhcGVIVE1MKCcgOiAnJylcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIGNvbXBpbGVFeHByU291cmNlLmV4cHIocHJvcC5leHByKVxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgKHByb3AueCA/ICcpJyA6ICcnKVxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgJyknXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICApO1xuLy8gICAgICAgICAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuLy8gICAgICAgICAgICAgfVxuLy8gICAgICAgICB9KTtcbi8vIFxuLy8gICAgICAgICBzb3VyY2VCdWZmZXIuam9pblN0cmluZyhpc0Nsb3NlID8gJy8+JyA6ICc+Jyk7XG4vLyAgICAgfSxcbi8vICAgICAvKiBlc2xpbnQtZW5hYmxlIG1heC1wYXJhbXMgKi9cbi8vIFxuLy8gICAgIC8qKlxuLy8gICAgICAqIOe8luivkeWFg+e0oOmXreWQiFxuLy8gICAgICAqXG4vLyAgICAgICogQHBhcmFtIHtDb21waWxlU291cmNlQnVmZmVyfSBzb3VyY2VCdWZmZXIg57yW6K+R5rqQ56CB55qE5Lit6Ze0YnVmZmVyXG4vLyAgICAgICogQHBhcmFtIHtzdHJpbmd9IHRhZ05hbWUg5qCH562+5ZCNXG4vLyAgICAgICovXG4vLyAgICAgdGFnRW5kOiBmdW5jdGlvbiAoc291cmNlQnVmZmVyLCB0YWdOYW1lKSB7XG4vLyAgICAgICAgIGlmICghYXV0b0Nsb3NlVGFnc1t0YWdOYW1lXSkge1xuLy8gICAgICAgICAgICAgc291cmNlQnVmZmVyLmpvaW5TdHJpbmcoJzwvJyArIHRhZ05hbWUgKyAnPicpO1xuLy8gICAgICAgICB9XG4vLyBcbi8vICAgICAgICAgaWYgKHRhZ05hbWUgPT09ICdzZWxlY3QnKSB7XG4vLyAgICAgICAgICAgICBzb3VyY2VCdWZmZXIuYWRkUmF3KCckc2VsZWN0VmFsdWUgPSBudWxsOycpO1xuLy8gICAgICAgICB9XG4vLyBcbi8vICAgICAgICAgaWYgKHRhZ05hbWUgPT09ICdvcHRpb24nKSB7XG4vLyAgICAgICAgICAgICBzb3VyY2VCdWZmZXIuYWRkUmF3KCckb3B0aW9uVmFsdWUgPSBudWxsOycpO1xuLy8gICAgICAgICB9XG4vLyAgICAgfSxcbi8vIFxuLy8gICAgIC8qKlxuLy8gICAgICAqIOe8luivkeWFg+e0oOWGheWuuVxuLy8gICAgICAqXG4vLyAgICAgICogQHBhcmFtIHtDb21waWxlU291cmNlQnVmZmVyfSBzb3VyY2VCdWZmZXIg57yW6K+R5rqQ56CB55qE5Lit6Ze0YnVmZmVyXG4vLyAgICAgICogQHBhcmFtIHtBTm9kZX0gYU5vZGUg5YWD57Sg55qE5oq96LGh6IqC54K55L+h5oGvXG4vLyAgICAgICogQHBhcmFtIHtDb21wb25lbnR9IG93bmVyIOaJgOWxnue7hOS7tuWunuS+i+eOr+Wig1xuLy8gICAgICAqL1xuLy8gICAgIGlubmVyOiBmdW5jdGlvbiAoc291cmNlQnVmZmVyLCBhTm9kZSwgb3duZXIpIHtcbi8vICAgICAgICAgLy8gaW5uZXIgY29udGVudFxuLy8gICAgICAgICBpZiAoYU5vZGUudGFnTmFtZSA9PT0gJ3RleHRhcmVhJykge1xuLy8gICAgICAgICAgICAgdmFyIHZhbHVlUHJvcCA9IGdldEFOb2RlUHJvcChhTm9kZSwgJ3ZhbHVlJyk7XG4vLyAgICAgICAgICAgICBpZiAodmFsdWVQcm9wKSB7XG4vLyAgICAgICAgICAgICAgICAgc291cmNlQnVmZmVyLmpvaW5SYXcoJ2VzY2FwZUhUTUwoJ1xuLy8gICAgICAgICAgICAgICAgICAgICArIGNvbXBpbGVFeHByU291cmNlLmV4cHIodmFsdWVQcm9wLmV4cHIpXG4vLyAgICAgICAgICAgICAgICAgICAgICsgJyknXG4vLyAgICAgICAgICAgICAgICAgKTtcbi8vICAgICAgICAgICAgIH1cbi8vIFxuLy8gICAgICAgICAgICAgcmV0dXJuO1xuLy8gICAgICAgICB9XG4vLyBcbi8vICAgICAgICAgdmFyIGh0bWxEaXJlY3RpdmUgPSBhTm9kZS5kaXJlY3RpdmVzLmh0bWw7XG4vLyAgICAgICAgIGlmIChodG1sRGlyZWN0aXZlKSB7XG4vLyAgICAgICAgICAgICBzb3VyY2VCdWZmZXIuam9pbkV4cHIoaHRtbERpcmVjdGl2ZS52YWx1ZSk7XG4vLyAgICAgICAgIH1cbi8vICAgICAgICAgZWxzZSB7XG4vLyAgICAgICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby11c2UtYmVmb3JlLWRlZmluZSAqL1xuLy8gICAgICAgICAgICAgZWFjaChhTm9kZS5jaGlsZHJlbiwgZnVuY3Rpb24gKGFOb2RlQ2hpbGQpIHtcbi8vICAgICAgICAgICAgICAgICBzb3VyY2VCdWZmZXIuYWRkUmF3KGFOb2RlQ29tcGlsZXIuY29tcGlsZShhTm9kZUNoaWxkLCBzb3VyY2VCdWZmZXIsIG93bmVyKSk7XG4vLyAgICAgICAgICAgICB9KTtcbi8vICAgICAgICAgICAgIC8qIGVzbGludC1lbmFibGUgbm8tdXNlLWJlZm9yZS1kZWZpbmUgKi9cbi8vICAgICAgICAgfVxuLy8gICAgIH1cbi8vIH07XG4vLyBcbi8vIC8qKlxuLy8gICogQU5vZGUg55qE57yW6K+R5pa55rOV6ZuG5ZCI5a+56LGhXG4vLyAgKlxuLy8gICogQGlubmVyXG4vLyAgKi9cbi8vIHZhciBhTm9kZUNvbXBpbGVyID0ge1xuLy8gXG4vLyAgICAgLyoqXG4vLyAgICAgICog57yW6K+R6IqC54K5XG4vLyAgICAgICpcbi8vICAgICAgKiBAcGFyYW0ge0FOb2RlfSBhTm9kZSDmir3osaHoioLngrlcbi8vICAgICAgKiBAcGFyYW0ge0NvbXBpbGVTb3VyY2VCdWZmZXJ9IHNvdXJjZUJ1ZmZlciDnvJbor5HmupDnoIHnmoTkuK3pl7RidWZmZXJcbi8vICAgICAgKiBAcGFyYW0ge0NvbXBvbmVudH0gb3duZXIg5omA5bGe57uE5Lu25a6e5L6L546v5aKDXG4vLyAgICAgICogQHBhcmFtIHtPYmplY3R9IGV4dHJhIOe8luivkeaJgOmcgOeahOS4gOS6m+mineWkluS/oeaBr1xuLy8gICAgICAqL1xuLy8gICAgIGNvbXBpbGU6IGZ1bmN0aW9uIChhTm9kZSwgc291cmNlQnVmZmVyLCBvd25lciwgZXh0cmEpIHtcbi8vICAgICAgICAgZXh0cmEgPSBleHRyYSB8fCB7fTtcbi8vICAgICAgICAgdmFyIGNvbXBpbGVNZXRob2QgPSAnY29tcGlsZUVsZW1lbnQnO1xuLy8gXG4vLyAgICAgICAgIGlmIChhTm9kZS50ZXh0RXhwcikge1xuLy8gICAgICAgICAgICAgY29tcGlsZU1ldGhvZCA9ICdjb21waWxlVGV4dCc7XG4vLyAgICAgICAgIH1cbi8vICAgICAgICAgZWxzZSBpZiAoYU5vZGUuZGlyZWN0aXZlc1snaWYnXSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGRvdC1ub3RhdGlvblxuLy8gICAgICAgICAgICAgY29tcGlsZU1ldGhvZCA9ICdjb21waWxlSWYnO1xuLy8gICAgICAgICB9XG4vLyAgICAgICAgIGVsc2UgaWYgKGFOb2RlLmRpcmVjdGl2ZXNbJ2ZvciddKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZG90LW5vdGF0aW9uXG4vLyAgICAgICAgICAgICBjb21waWxlTWV0aG9kID0gJ2NvbXBpbGVGb3InO1xuLy8gICAgICAgICB9XG4vLyAgICAgICAgIGVsc2UgaWYgKGFOb2RlLnRhZ05hbWUgPT09ICdzbG90Jykge1xuLy8gICAgICAgICAgICAgY29tcGlsZU1ldGhvZCA9ICdjb21waWxlU2xvdCc7XG4vLyAgICAgICAgIH1cbi8vICAgICAgICAgZWxzZSBpZiAoYU5vZGUudGFnTmFtZSA9PT0gJ3RlbXBsYXRlJykge1xuLy8gICAgICAgICAgICAgY29tcGlsZU1ldGhvZCA9ICdjb21waWxlVGVtcGxhdGUnO1xuLy8gICAgICAgICB9XG4vLyAgICAgICAgIGVsc2Uge1xuLy8gICAgICAgICAgICAgdmFyIENvbXBvbmVudFR5cGUgPSBvd25lci5nZXRDb21wb25lbnRUeXBlKGFOb2RlKTtcbi8vICAgICAgICAgICAgIGlmIChDb21wb25lbnRUeXBlKSB7XG4vLyAgICAgICAgICAgICAgICAgY29tcGlsZU1ldGhvZCA9ICdjb21waWxlQ29tcG9uZW50Jztcbi8vICAgICAgICAgICAgICAgICBleHRyYS5Db21wb25lbnRDbGFzcyA9IENvbXBvbmVudFR5cGU7XG4vLyAgICAgICAgICAgICB9XG4vLyAgICAgICAgIH1cbi8vIFxuLy8gICAgICAgICBhTm9kZUNvbXBpbGVyW2NvbXBpbGVNZXRob2RdKGFOb2RlLCBzb3VyY2VCdWZmZXIsIG93bmVyLCBleHRyYSk7XG4vLyAgICAgfSxcbi8vIFxuLy8gICAgIC8qKlxuLy8gICAgICAqIOe8luivkeaWh+acrOiKgueCuVxuLy8gICAgICAqXG4vLyAgICAgICogQHBhcmFtIHtBTm9kZX0gYU5vZGUg6IqC54K55a+56LGhXG4vLyAgICAgICogQHBhcmFtIHtDb21waWxlU291cmNlQnVmZmVyfSBzb3VyY2VCdWZmZXIg57yW6K+R5rqQ56CB55qE5Lit6Ze0YnVmZmVyXG4vLyAgICAgICovXG4vLyAgICAgY29tcGlsZVRleHQ6IGZ1bmN0aW9uIChhTm9kZSwgc291cmNlQnVmZmVyKSB7XG4vLyAgICAgICAgIGlmIChhTm9kZS50ZXh0RXhwci5vcmlnaW5hbCkge1xuLy8gICAgICAgICAgICAgc291cmNlQnVmZmVyLmpvaW5TdHJpbmcoc2VyaWFsaXplU3R1bXAoJ3RleHQnKSk7XG4vLyAgICAgICAgIH1cbi8vIFxuLy8gICAgICAgICBzb3VyY2VCdWZmZXIuam9pbkV4cHIoYU5vZGUudGV4dEV4cHIpO1xuLy8gXG4vLyAgICAgICAgIGlmIChhTm9kZS50ZXh0RXhwci5vcmlnaW5hbCkge1xuLy8gICAgICAgICAgICAgc291cmNlQnVmZmVyLmpvaW5TdHJpbmcoc2VyaWFsaXplU3R1bXBFbmQoJ3RleHQnKSk7XG4vLyAgICAgICAgIH1cbi8vICAgICB9LFxuLy8gXG4vLyAgICAgLyoqXG4vLyAgICAgICog57yW6K+RdGVtcGxhdGXoioLngrlcbi8vICAgICAgKlxuLy8gICAgICAqIEBwYXJhbSB7QU5vZGV9IGFOb2RlIOiKgueCueWvueixoVxuLy8gICAgICAqIEBwYXJhbSB7Q29tcGlsZVNvdXJjZUJ1ZmZlcn0gc291cmNlQnVmZmVyIOe8luivkea6kOeggeeahOS4remXtGJ1ZmZlclxuLy8gICAgICAqIEBwYXJhbSB7Q29tcG9uZW50fSBvd25lciDmiYDlsZ7nu4Tku7blrp7kvovnjq/looNcbi8vICAgICAgKi9cbi8vICAgICBjb21waWxlVGVtcGxhdGU6IGZ1bmN0aW9uIChhTm9kZSwgc291cmNlQnVmZmVyLCBvd25lcikge1xuLy8gICAgICAgICBlbGVtZW50U291cmNlQ29tcGlsZXIuaW5uZXIoc291cmNlQnVmZmVyLCBhTm9kZSwgb3duZXIpO1xuLy8gICAgIH0sXG4vLyBcbi8vICAgICAvKipcbi8vICAgICAgKiDnvJbor5EgaWYg6IqC54K5XG4vLyAgICAgICpcbi8vICAgICAgKiBAcGFyYW0ge0FOb2RlfSBhTm9kZSDoioLngrnlr7nosaFcbi8vICAgICAgKiBAcGFyYW0ge0NvbXBpbGVTb3VyY2VCdWZmZXJ9IHNvdXJjZUJ1ZmZlciDnvJbor5HmupDnoIHnmoTkuK3pl7RidWZmZXJcbi8vICAgICAgKiBAcGFyYW0ge0NvbXBvbmVudH0gb3duZXIg5omA5bGe57uE5Lu25a6e5L6L546v5aKDXG4vLyAgICAgICovXG4vLyAgICAgY29tcGlsZUlmOiBmdW5jdGlvbiAoYU5vZGUsIHNvdXJjZUJ1ZmZlciwgb3duZXIpIHtcbi8vICAgICAgICAgc291cmNlQnVmZmVyLmFkZFJhdygnKGZ1bmN0aW9uICgpIHsnKTtcbi8vIFxuLy8gICAgICAgICBzb3VyY2VCdWZmZXIuYWRkUmF3KCd2YXIgaWZJbmRleCA9IG51bGw7Jyk7XG4vLyBcbi8vICAgICAgICAgLy8gb3V0cHV0IG1haW4gaWZcbi8vICAgICAgICAgdmFyIGlmRGlyZWN0aXZlID0gYU5vZGUuZGlyZWN0aXZlc1snaWYnXTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBkb3Qtbm90YXRpb25cbi8vICAgICAgICAgc291cmNlQnVmZmVyLmFkZFJhdygnaWYgKCcgKyBjb21waWxlRXhwclNvdXJjZS5leHByKGlmRGlyZWN0aXZlLnZhbHVlKSArICcpIHsnKTtcbi8vICAgICAgICAgc291cmNlQnVmZmVyLmFkZFJhdyhcbi8vICAgICAgICAgICAgIGFOb2RlQ29tcGlsZXIuY29tcGlsZShcbi8vICAgICAgICAgICAgICAgICByaW5zZUNvbmRBTm9kZShhTm9kZSksXG4vLyAgICAgICAgICAgICAgICAgc291cmNlQnVmZmVyLFxuLy8gICAgICAgICAgICAgICAgIG93bmVyXG4vLyAgICAgICAgICAgICApXG4vLyAgICAgICAgICk7XG4vLyAgICAgICAgIHNvdXJjZUJ1ZmZlci5hZGRSYXcoJ30nKTtcbi8vIFxuLy8gICAgICAgICAvLyBvdXRwdXQgZWxpZiBhbmQgZWxzZVxuLy8gICAgICAgICBlYWNoKGFOb2RlLmVsc2VzLCBmdW5jdGlvbiAoZWxzZUFOb2RlLCBpbmRleCkge1xuLy8gICAgICAgICAgICAgdmFyIGVsaWZEaXJlY3RpdmUgPSBlbHNlQU5vZGUuZGlyZWN0aXZlcy5lbGlmO1xuLy8gICAgICAgICAgICAgaWYgKGVsaWZEaXJlY3RpdmUpIHtcbi8vICAgICAgICAgICAgICAgICBzb3VyY2VCdWZmZXIuYWRkUmF3KCdlbHNlIGlmICgnICsgY29tcGlsZUV4cHJTb3VyY2UuZXhwcihlbGlmRGlyZWN0aXZlLnZhbHVlKSArICcpIHsnKTtcbi8vICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgIGVsc2Uge1xuLy8gICAgICAgICAgICAgICAgIHNvdXJjZUJ1ZmZlci5hZGRSYXcoJ2Vsc2UgeycpO1xuLy8gICAgICAgICAgICAgfVxuLy8gXG4vLyAgICAgICAgICAgICBzb3VyY2VCdWZmZXIuYWRkUmF3KFxuLy8gICAgICAgICAgICAgICAgIGFOb2RlQ29tcGlsZXIuY29tcGlsZShcbi8vICAgICAgICAgICAgICAgICAgICAgcmluc2VDb25kQU5vZGUoZWxzZUFOb2RlKSxcbi8vICAgICAgICAgICAgICAgICAgICAgc291cmNlQnVmZmVyLFxuLy8gICAgICAgICAgICAgICAgICAgICBvd25lclxuLy8gICAgICAgICAgICAgICAgIClcbi8vICAgICAgICAgICAgICk7XG4vLyAgICAgICAgICAgICBzb3VyY2VCdWZmZXIuYWRkUmF3KCd9Jyk7XG4vLyAgICAgICAgIH0pO1xuLy8gXG4vLyAgICAgICAgIHNvdXJjZUJ1ZmZlci5hZGRSYXcoJ30pKCk7Jyk7XG4vLyAgICAgfSxcbi8vIFxuLy8gICAgIC8qKlxuLy8gICAgICAqIOe8luivkSBmb3Ig6IqC54K5XG4vLyAgICAgICpcbi8vICAgICAgKiBAcGFyYW0ge0FOb2RlfSBhTm9kZSDoioLngrnlr7nosaFcbi8vICAgICAgKiBAcGFyYW0ge0NvbXBpbGVTb3VyY2VCdWZmZXJ9IHNvdXJjZUJ1ZmZlciDnvJbor5HmupDnoIHnmoTkuK3pl7RidWZmZXJcbi8vICAgICAgKiBAcGFyYW0ge0NvbXBvbmVudH0gb3duZXIg5omA5bGe57uE5Lu25a6e5L6L546v5aKDXG4vLyAgICAgICovXG4vLyAgICAgY29tcGlsZUZvcjogZnVuY3Rpb24gKGFOb2RlLCBzb3VyY2VCdWZmZXIsIG93bmVyKSB7XG4vLyAgICAgICAgIHZhciBmb3JFbGVtZW50QU5vZGUgPSBjcmVhdGVBTm9kZSh7XG4vLyAgICAgICAgICAgICBjaGlsZHJlbjogYU5vZGUuY2hpbGRyZW4sXG4vLyAgICAgICAgICAgICBwcm9wczogYU5vZGUucHJvcHMsXG4vLyAgICAgICAgICAgICBldmVudHM6IGFOb2RlLmV2ZW50cyxcbi8vICAgICAgICAgICAgIHRhZ05hbWU6IGFOb2RlLnRhZ05hbWUsXG4vLyAgICAgICAgICAgICBkaXJlY3RpdmVzOiBjbG9uZURpcmVjdGl2ZXMoYU5vZGUuZGlyZWN0aXZlcywge1xuLy8gICAgICAgICAgICAgICAgICdmb3InOiAxXG4vLyAgICAgICAgICAgICB9KSxcbi8vICAgICAgICAgICAgIGhvdHNwb3Q6IGFOb2RlLmhvdHNwb3Rcbi8vICAgICAgICAgfSk7XG4vLyBcbi8vICAgICAgICAgdmFyIGZvckRpcmVjdGl2ZSA9IGFOb2RlLmRpcmVjdGl2ZXNbJ2ZvciddOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGRvdC1ub3RhdGlvblxuLy8gICAgICAgICB2YXIgaXRlbU5hbWUgPSBmb3JEaXJlY3RpdmUuaXRlbS5yYXc7XG4vLyAgICAgICAgIHZhciBpbmRleE5hbWUgPSBmb3JEaXJlY3RpdmUuaW5kZXgucmF3O1xuLy8gICAgICAgICB2YXIgbGlzdE5hbWUgPSBjb21waWxlRXhwclNvdXJjZS5kYXRhQWNjZXNzKGZvckRpcmVjdGl2ZS52YWx1ZSk7XG4vLyBcbi8vICAgICAgICAgaWYgKGluZGV4TmFtZSA9PT0gJyRpbmRleCcpIHtcbi8vICAgICAgICAgICAgIGluZGV4TmFtZSA9IGd1aWQoKTtcbi8vICAgICAgICAgfVxuLy8gXG4vLyAgICAgICAgIHNvdXJjZUJ1ZmZlci5hZGRSYXcoJ2ZvciAoJ1xuLy8gICAgICAgICAgICAgKyAndmFyICcgKyBpbmRleE5hbWUgKyAnID0gMDsgJ1xuLy8gICAgICAgICAgICAgKyBpbmRleE5hbWUgKyAnIDwgJyArIGxpc3ROYW1lICsgJy5sZW5ndGg7ICdcbi8vICAgICAgICAgICAgICsgaW5kZXhOYW1lICsgJysrKSB7J1xuLy8gICAgICAgICApO1xuLy8gICAgICAgICBzb3VyY2VCdWZmZXIuYWRkUmF3KCdjb21wb25lbnRDdHguZGF0YS4nICsgaW5kZXhOYW1lICsgJz0nICsgaW5kZXhOYW1lICsgJzsnKTtcbi8vICAgICAgICAgc291cmNlQnVmZmVyLmFkZFJhdygnY29tcG9uZW50Q3R4LmRhdGEuJyArIGl0ZW1OYW1lICsgJz0gJyArIGxpc3ROYW1lICsgJ1snICsgaW5kZXhOYW1lICsgJ107Jyk7XG4vLyAgICAgICAgIHNvdXJjZUJ1ZmZlci5hZGRSYXcoXG4vLyAgICAgICAgICAgICBhTm9kZUNvbXBpbGVyLmNvbXBpbGUoXG4vLyAgICAgICAgICAgICAgICAgZm9yRWxlbWVudEFOb2RlLFxuLy8gICAgICAgICAgICAgICAgIHNvdXJjZUJ1ZmZlcixcbi8vICAgICAgICAgICAgICAgICBvd25lclxuLy8gICAgICAgICAgICAgKVxuLy8gICAgICAgICApO1xuLy8gICAgICAgICBzb3VyY2VCdWZmZXIuYWRkUmF3KCd9Jyk7XG4vLyAgICAgfSxcbi8vIFxuLy8gICAgIC8qKlxuLy8gICAgICAqIOe8luivkSBzbG90IOiKgueCuVxuLy8gICAgICAqXG4vLyAgICAgICogQHBhcmFtIHtBTm9kZX0gYU5vZGUg6IqC54K55a+56LGhXG4vLyAgICAgICogQHBhcmFtIHtDb21waWxlU291cmNlQnVmZmVyfSBzb3VyY2VCdWZmZXIg57yW6K+R5rqQ56CB55qE5Lit6Ze0YnVmZmVyXG4vLyAgICAgICogQHBhcmFtIHtDb21wb25lbnR9IG93bmVyIOaJgOWxnue7hOS7tuWunuS+i+eOr+Wig1xuLy8gICAgICAqL1xuLy8gICAgIGNvbXBpbGVTbG90OiBmdW5jdGlvbiAoYU5vZGUsIHNvdXJjZUJ1ZmZlciwgb3duZXIpIHtcbi8vICAgICAgICAgc291cmNlQnVmZmVyLmFkZFJhdygnKGZ1bmN0aW9uICgpIHsnKTtcbi8vIFxuLy8gICAgICAgICBzb3VyY2VCdWZmZXIuYWRkUmF3KCdmdW5jdGlvbiAkZGVmYXVsdFNsb3RSZW5kZXIoY29tcG9uZW50Q3R4KSB7Jyk7XG4vLyAgICAgICAgIHNvdXJjZUJ1ZmZlci5hZGRSYXcoJyAgdmFyIGh0bWwgPSBcIlwiOycpO1xuLy8gICAgICAgICBlYWNoKGFOb2RlLmNoaWxkcmVuLCBmdW5jdGlvbiAoYU5vZGVDaGlsZCkge1xuLy8gICAgICAgICAgICAgc291cmNlQnVmZmVyLmFkZFJhdyhhTm9kZUNvbXBpbGVyLmNvbXBpbGUoYU5vZGVDaGlsZCwgc291cmNlQnVmZmVyLCBvd25lcikpO1xuLy8gICAgICAgICB9KTtcbi8vICAgICAgICAgc291cmNlQnVmZmVyLmFkZFJhdygnICByZXR1cm4gaHRtbDsnKTtcbi8vICAgICAgICAgc291cmNlQnVmZmVyLmFkZFJhdygnfScpO1xuLy8gXG4vLyAgICAgICAgIHNvdXJjZUJ1ZmZlci5hZGRSYXcoJyAgdmFyICRnaXZlblNsb3QgPSBbXTsnKTtcbi8vIFxuLy8gICAgICAgICB2YXIgbmFtZVByb3AgPSBnZXRBTm9kZVByb3AoYU5vZGUsICduYW1lJyk7XG4vLyAgICAgICAgIGlmIChuYW1lUHJvcCkge1xuLy8gICAgICAgICAgICAgc291cmNlQnVmZmVyLmFkZFJhdygndmFyICRzbG90TmFtZSA9ICcgKyBjb21waWxlRXhwclNvdXJjZS5leHByKG5hbWVQcm9wLmV4cHIpICsgJzsnKTtcbi8vICAgICAgICAgfVxuLy8gICAgICAgICBlbHNlIHtcbi8vICAgICAgICAgICAgIHNvdXJjZUJ1ZmZlci5hZGRSYXcoJ3ZhciAkc2xvdE5hbWUgPSBudWxsOycpO1xuLy8gICAgICAgICB9XG4vLyBcbi8vICAgICAgICAgc291cmNlQnVmZmVyLmFkZFJhdygndmFyICRjdHhHaXZlblNsb3RzID0gY29tcG9uZW50Q3R4LmdpdmVuU2xvdHM7Jyk7XG4vLyAgICAgICAgIHNvdXJjZUJ1ZmZlci5hZGRSYXcoJ2ZvciAodmFyICRpID0gMDsgJGkgPCAkY3R4R2l2ZW5TbG90cy5sZW5ndGg7ICRpKyspIHsnKTtcbi8vICAgICAgICAgc291cmNlQnVmZmVyLmFkZFJhdygnICBpZiAoJGN0eEdpdmVuU2xvdHNbJGldWzFdID09ICRzbG90TmFtZSkgeycpO1xuLy8gICAgICAgICBzb3VyY2VCdWZmZXIuYWRkUmF3KCcgICAgJGdpdmVuU2xvdC5wdXNoKCRjdHhHaXZlblNsb3RzWyRpXVswXSk7Jyk7XG4vLyAgICAgICAgIHNvdXJjZUJ1ZmZlci5hZGRSYXcoJyAgfScpO1xuLy8gICAgICAgICBzb3VyY2VCdWZmZXIuYWRkUmF3KCd9Jyk7XG4vLyBcbi8vIFxuLy8gICAgICAgICBzb3VyY2VCdWZmZXIuYWRkUmF3KCd2YXIgJGlzSW5zZXJ0ZWQgPSAkZ2l2ZW5TbG90Lmxlbmd0aCA+IDA7Jyk7XG4vLyAgICAgICAgIHNvdXJjZUJ1ZmZlci5hZGRSYXcoJ2lmICghJGlzSW5zZXJ0ZWQpIHsgJGdpdmVuU2xvdC5wdXNoKCRkZWZhdWx0U2xvdFJlbmRlcik7IH0nKTtcbi8vIFxuLy8gICAgICAgICBzb3VyY2VCdWZmZXIuYWRkUmF3KCd2YXIgJHNsb3RDdHggPSAkaXNJbnNlcnRlZCA/IGNvbXBvbmVudEN0eC5vd25lciA6IGNvbXBvbmVudEN0eDsnKTtcbi8vICAgICAgICAgaWYgKGFOb2RlLnZhcnMpIHtcbi8vICAgICAgICAgICAgIHNvdXJjZUJ1ZmZlci5hZGRSYXcoJyRzbG90Q3R4ID0ge2RhdGE6IGV4dGVuZCh7fSwgJHNsb3RDdHguZGF0YSksIGZpbHRlcnM6ICRzbG90Q3R4LmZpbHRlcnMsIGNhbGxGaWx0ZXI6ICRzbG90Q3R4LmNhbGxGaWx0ZXJ9OycpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4vLyAgICAgICAgICAgICBlYWNoKGFOb2RlLnZhcnMsIGZ1bmN0aW9uICh2YXJJdGVtKSB7XG4vLyAgICAgICAgICAgICAgICAgc291cmNlQnVmZmVyLmFkZFJhdyhcbi8vICAgICAgICAgICAgICAgICAgICAgJyRzbG90Q3R4LmRhdGFbXCInICsgdmFySXRlbS5uYW1lICsgJ1wiXSA9ICdcbi8vICAgICAgICAgICAgICAgICAgICAgKyBjb21waWxlRXhwclNvdXJjZS5leHByKHZhckl0ZW0uZXhwcilcbi8vICAgICAgICAgICAgICAgICAgICAgKyAnOydcbi8vICAgICAgICAgICAgICAgICApO1xuLy8gICAgICAgICAgICAgfSk7XG4vLyAgICAgICAgIH1cbi8vIFxuLy8gICAgICAgICBzb3VyY2VCdWZmZXIuYWRkUmF3KCdmb3IgKHZhciAkcmVuZGVySW5kZXggPSAwOyAkcmVuZGVySW5kZXggPCAkZ2l2ZW5TbG90Lmxlbmd0aDsgJHJlbmRlckluZGV4KyspIHsnKTtcbi8vICAgICAgICAgc291cmNlQnVmZmVyLmFkZFJhdygnICBodG1sICs9ICRnaXZlblNsb3RbJHJlbmRlckluZGV4XSgkc2xvdEN0eCk7Jyk7XG4vLyAgICAgICAgIHNvdXJjZUJ1ZmZlci5hZGRSYXcoJ30nKTtcbi8vIFxuLy8gICAgICAgICBzb3VyY2VCdWZmZXIuYWRkUmF3KCd9KSgpOycpO1xuLy8gICAgIH0sXG4vLyBcbi8vICAgICAvKipcbi8vICAgICAgKiDnvJbor5Hmma7pgJroioLngrlcbi8vICAgICAgKlxuLy8gICAgICAqIEBwYXJhbSB7QU5vZGV9IGFOb2RlIOiKgueCueWvueixoVxuLy8gICAgICAqIEBwYXJhbSB7Q29tcGlsZVNvdXJjZUJ1ZmZlcn0gc291cmNlQnVmZmVyIOe8luivkea6kOeggeeahOS4remXtGJ1ZmZlclxuLy8gICAgICAqIEBwYXJhbSB7Q29tcG9uZW50fSBvd25lciDmiYDlsZ7nu4Tku7blrp7kvovnjq/looNcbi8vICAgICAgKiBAcGFyYW0ge09iamVjdH0gZXh0cmEg57yW6K+R5omA6ZyA55qE5LiA5Lqb6aKd5aSW5L+h5oGvXG4vLyAgICAgICovXG4vLyAgICAgY29tcGlsZUVsZW1lbnQ6IGZ1bmN0aW9uIChhTm9kZSwgc291cmNlQnVmZmVyLCBvd25lciwgZXh0cmEpIHtcbi8vICAgICAgICAgZXh0cmEgPSBleHRyYSB8fCB7fTtcbi8vICAgICAgICAgLy8gaWYgKGFOb2RlLnRhZ05hbWUgPT09ICdvcHRpb24nXG4vLyAgICAgICAgIC8vICAgICAmJiAhZ2V0QU5vZGVQcm9wKGFOb2RlLCAndmFsdWUnKVxuLy8gICAgICAgICAvLyAgICAgJiYgYU5vZGUuY2hpbGRyZW5bMF1cbi8vICAgICAgICAgLy8gKSB7XG4vLyAgICAgICAgIC8vICAgICBhTm9kZS5wcm9wcy5wdXNoKHtcbi8vICAgICAgICAgLy8gICAgICAgICBuYW1lOiAndmFsdWUnLFxuLy8gICAgICAgICAvLyAgICAgICAgIGV4cHI6IGFOb2RlLmNoaWxkcmVuWzBdLnRleHRFeHByXG4vLyAgICAgICAgIC8vICAgICB9KTtcbi8vICAgICAgICAgLy8gfVxuLy8gXG4vLyAgICAgICAgIGVsZW1lbnRTb3VyY2VDb21waWxlci50YWdTdGFydChcbi8vICAgICAgICAgICAgIHNvdXJjZUJ1ZmZlcixcbi8vICAgICAgICAgICAgIGFOb2RlLnRhZ05hbWUsXG4vLyAgICAgICAgICAgICBhTm9kZS5wcm9wcyxcbi8vICAgICAgICAgICAgIGV4dHJhLnByb3Bcbi8vICAgICAgICAgKTtcbi8vIFxuLy8gICAgICAgICBlbGVtZW50U291cmNlQ29tcGlsZXIuaW5uZXIoc291cmNlQnVmZmVyLCBhTm9kZSwgb3duZXIpO1xuLy8gICAgICAgICBlbGVtZW50U291cmNlQ29tcGlsZXIudGFnRW5kKHNvdXJjZUJ1ZmZlciwgYU5vZGUudGFnTmFtZSk7XG4vLyAgICAgfSxcbi8vIFxuLy8gICAgIC8qKlxuLy8gICAgICAqIOe8luivkee7hOS7tuiKgueCuVxuLy8gICAgICAqXG4vLyAgICAgICogQHBhcmFtIHtBTm9kZX0gYU5vZGUg6IqC54K55a+56LGhXG4vLyAgICAgICogQHBhcmFtIHtDb21waWxlU291cmNlQnVmZmVyfSBzb3VyY2VCdWZmZXIg57yW6K+R5rqQ56CB55qE5Lit6Ze0YnVmZmVyXG4vLyAgICAgICogQHBhcmFtIHtDb21wb25lbnR9IG93bmVyIOaJgOWxnue7hOS7tuWunuS+i+eOr+Wig1xuLy8gICAgICAqIEBwYXJhbSB7T2JqZWN0fSBleHRyYSDnvJbor5HmiYDpnIDnmoTkuIDkupvpop3lpJbkv6Hmga9cbi8vICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBleHRyYS5Db21wb25lbnRDbGFzcyDlr7nlupTnu4Tku7bnsbtcbi8vICAgICAgKi9cbi8vICAgICBjb21waWxlQ29tcG9uZW50OiBmdW5jdGlvbiAoYU5vZGUsIHNvdXJjZUJ1ZmZlciwgb3duZXIsIGV4dHJhKSB7XG4vLyAgICAgICAgIGlmIChhTm9kZSkge1xuLy8gICAgICAgICAgICAgc291cmNlQnVmZmVyLmFkZFJhdygndmFyICRzbG90TmFtZSA9IG51bGw7Jyk7XG4vLyAgICAgICAgICAgICBzb3VyY2VCdWZmZXIuYWRkUmF3KCd2YXIgJGdpdmVuU2xvdHMgPSBbXTsnKTtcbi8vICAgICAgICAgICAgIGVhY2goYU5vZGUuY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuLy8gICAgICAgICAgICAgICAgIHZhciBzbG90QmluZCA9ICFjaGlsZC50ZXh0RXhwciAmJiBnZXRBTm9kZVByb3AoY2hpbGQsICdzbG90Jyk7XG4vLyAgICAgICAgICAgICAgICAgaWYgKHNsb3RCaW5kKSB7XG4vLyAgICAgICAgICAgICAgICAgICAgIHNvdXJjZUJ1ZmZlci5hZGRSYXcoJyRzbG90TmFtZSA9ICcgKyBjb21waWxlRXhwclNvdXJjZS5leHByKHNsb3RCaW5kLmV4cHIpICsgJzsnKTtcbi8vICAgICAgICAgICAgICAgICAgICAgc291cmNlQnVmZmVyLmFkZFJhdygnJGdpdmVuU2xvdHMucHVzaChbZnVuY3Rpb24gKGNvbXBvbmVudEN0eCkgeycpO1xuLy8gICAgICAgICAgICAgICAgICAgICBzb3VyY2VCdWZmZXIuYWRkUmF3KCcgIHZhciBodG1sID0gXCJcIjsnKTtcbi8vICAgICAgICAgICAgICAgICAgICAgc291cmNlQnVmZmVyLmFkZFJhdyhhTm9kZUNvbXBpbGVyLmNvbXBpbGUoY2hpbGQsIHNvdXJjZUJ1ZmZlciwgb3duZXIpKTtcbi8vICAgICAgICAgICAgICAgICAgICAgc291cmNlQnVmZmVyLmFkZFJhdygnICByZXR1cm4gaHRtbDsnKTtcbi8vICAgICAgICAgICAgICAgICAgICAgc291cmNlQnVmZmVyLmFkZFJhdygnfSwgJHNsb3ROYW1lXSk7Jyk7XG4vLyAgICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgICAgIGVsc2Uge1xuLy8gICAgICAgICAgICAgICAgICAgICBzb3VyY2VCdWZmZXIuYWRkUmF3KCckZ2l2ZW5TbG90cy5wdXNoKFtmdW5jdGlvbiAoY29tcG9uZW50Q3R4KSB7Jyk7XG4vLyAgICAgICAgICAgICAgICAgICAgIHNvdXJjZUJ1ZmZlci5hZGRSYXcoJyAgdmFyIGh0bWwgPSBcIlwiOycpO1xuLy8gICAgICAgICAgICAgICAgICAgICBzb3VyY2VCdWZmZXIuYWRkUmF3KGFOb2RlQ29tcGlsZXIuY29tcGlsZShjaGlsZCwgc291cmNlQnVmZmVyLCBvd25lcikpO1xuLy8gICAgICAgICAgICAgICAgICAgICBzb3VyY2VCdWZmZXIuYWRkUmF3KCcgIHJldHVybiBodG1sOycpO1xuLy8gICAgICAgICAgICAgICAgICAgICBzb3VyY2VCdWZmZXIuYWRkUmF3KCd9XSk7Jyk7XG4vLyAgICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgfSk7XG4vLyAgICAgICAgIH1cbi8vIFxuLy8gICAgICAgICB2YXIgQ29tcG9uZW50Q2xhc3MgPSBleHRyYS5Db21wb25lbnRDbGFzcztcbi8vICAgICAgICAgdmFyIGNvbXBvbmVudCA9IG5ldyBDb21wb25lbnRDbGFzcyh7XG4vLyAgICAgICAgICAgICBhTm9kZTogYU5vZGUsXG4vLyAgICAgICAgICAgICBvd25lcjogb3duZXIsXG4vLyAgICAgICAgICAgICBzdWJUYWc6IGFOb2RlLnRhZ05hbWVcbi8vICAgICAgICAgfSk7XG4vLyBcbi8vICAgICAgICAgdmFyIGdpdmVuRGF0YSA9IFtdO1xuLy8gXG4vLyAgICAgICAgIGVhY2goY29tcG9uZW50LmJpbmRzLCBmdW5jdGlvbiAocHJvcCkge1xuLy8gICAgICAgICAgICAgZ2l2ZW5EYXRhLnB1c2goXG4vLyAgICAgICAgICAgICAgICAgY29tcGlsZUV4cHJTb3VyY2Uuc3RyaW5nTGl0ZXJhbGl6ZShwcm9wLm5hbWUpXG4vLyAgICAgICAgICAgICAgICAgKyAnOidcbi8vICAgICAgICAgICAgICAgICArIGNvbXBpbGVFeHByU291cmNlLmV4cHIocHJvcC5leHByKVxuLy8gICAgICAgICAgICAgKTtcbi8vICAgICAgICAgfSk7XG4vLyBcbi8vICAgICAgICAgc291cmNlQnVmZmVyLmFkZFJhdygnaHRtbCArPSAoJyk7XG4vLyAgICAgICAgIHNvdXJjZUJ1ZmZlci5hZGRSZW5kZXJlclN0YXJ0KCk7XG4vLyAgICAgICAgIGNvbXBpbGVDb21wb25lbnRTb3VyY2Uoc291cmNlQnVmZmVyLCBjb21wb25lbnQsIGV4dHJhICYmIGV4dHJhLnByb3ApO1xuLy8gICAgICAgICBzb3VyY2VCdWZmZXIuYWRkUmVuZGVyZXJFbmQoKTtcbi8vICAgICAgICAgc291cmNlQnVmZmVyLmFkZFJhdygnKSh7JyArIGdpdmVuRGF0YS5qb2luKCcsXFxuJykgKyAnfSwgY29tcG9uZW50Q3R4LCAkZ2l2ZW5TbG90cyk7Jyk7XG4vLyAgICAgICAgIHNvdXJjZUJ1ZmZlci5hZGRSYXcoJyRnaXZlblNsb3RzID0gbnVsbDsnKTtcbi8vICAgICB9XG4vLyB9O1xuLy8gLyogZXNsaW50LWRpc2FibGUgZ3VhcmQtZm9yLWluICovXG4vLyBcbi8vIC8qKlxuLy8gICog55Sf5oiQ57uE5Lu2IHJlbmRlcmVyIOaXtiBjdHgg5a+56LGh5p6E5bu655qE5Luj56CBXG4vLyAgKlxuLy8gICogQGlubmVyXG4vLyAgKiBAcGFyYW0ge0NvbXBpbGVTb3VyY2VCdWZmZXJ9IHNvdXJjZUJ1ZmZlciDnvJbor5HmupDnoIHnmoTkuK3pl7RidWZmZXJcbi8vICAqIEBwYXJhbSB7T2JqZWN0fSBjb21wb25lbnQg57uE5Lu25a6e5L6LXG4vLyAgKiBAcGFyYW0ge3N0cmluZz99IGV4dHJhUHJvcCDpop3lpJbnmoTlsZ7mgKfkuLJcbi8vICAqL1xuLy8gZnVuY3Rpb24gY29tcGlsZUNvbXBvbmVudFNvdXJjZShzb3VyY2VCdWZmZXIsIGNvbXBvbmVudCwgZXh0cmFQcm9wKSB7XG4vLyAgICAgc291cmNlQnVmZmVyLmFkZFJhdyhnZW5Db21wb25lbnRDb250ZXh0Q29kZShjb21wb25lbnQpKTtcbi8vICAgICBzb3VyY2VCdWZmZXIuYWRkUmF3KCdjb21wb25lbnRDdHgub3duZXIgPSBwYXJlbnRDdHg7Jyk7XG4vLyAgICAgc291cmNlQnVmZmVyLmFkZFJhdygnY29tcG9uZW50Q3R4LmdpdmVuU2xvdHMgPSBnaXZlblNsb3RzOycpO1xuLy8gXG4vLyBcbi8vICAgICBzb3VyY2VCdWZmZXIuYWRkUmF3KCdkYXRhID0gZXh0ZW5kKGNvbXBvbmVudEN0eC5kYXRhLCBkYXRhKTsnKTtcbi8vICAgICBzb3VyY2VCdWZmZXIuYWRkUmF3KCdmb3IgKHZhciAkaSA9IDA7ICRpIDwgY29tcG9uZW50Q3R4LmNvbXB1dGVkTmFtZXMubGVuZ3RoOyAkaSsrKSB7Jyk7XG4vLyAgICAgc291cmNlQnVmZmVyLmFkZFJhdygnICB2YXIgJGNvbXB1dGVkTmFtZSA9IGNvbXBvbmVudEN0eC5jb21wdXRlZE5hbWVzWyRpXTsnKTtcbi8vICAgICBzb3VyY2VCdWZmZXIuYWRkUmF3KCcgIGRhdGFbJGNvbXB1dGVkTmFtZV0gPSBjb21wb25lbnRDdHguY29tcHV0ZWRbJGNvbXB1dGVkTmFtZV0oKTsnKTtcbi8vICAgICBzb3VyY2VCdWZmZXIuYWRkUmF3KCd9Jyk7XG4vLyBcbi8vICAgICBleHRyYVByb3AgPSBleHRyYVByb3AgfHwgJyc7XG4vLyBcbi8vICAgICB2YXIgZXZlbnREZWNsYXJhdGlvbnMgPSBbXTtcbi8vICAgICBmb3IgKHZhciBrZXkgaW4gY29tcG9uZW50Lmxpc3RlbmVycykge1xuLy8gICAgICAgICBlYWNoKGNvbXBvbmVudC5saXN0ZW5lcnNba2V5XSwgZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4vLyAgICAgICAgICAgICBpZiAobGlzdGVuZXIuZGVjbGFyYXRpb24pIHtcbi8vICAgICAgICAgICAgICAgICBldmVudERlY2xhcmF0aW9ucy5wdXNoKGxpc3RlbmVyLmRlY2xhcmF0aW9uKTtcbi8vICAgICAgICAgICAgIH1cbi8vICAgICAgICAgfSk7XG4vLyAgICAgfVxuLy8gXG4vLyAgICAgZWxlbWVudFNvdXJjZUNvbXBpbGVyLnRhZ1N0YXJ0KFxuLy8gICAgICAgICBzb3VyY2VCdWZmZXIsXG4vLyAgICAgICAgIGNvbXBvbmVudC50YWdOYW1lLFxuLy8gICAgICAgICBjb21wb25lbnQuYU5vZGUucHJvcHMsXG4vLyAgICAgICAgIGV4dHJhUHJvcFxuLy8gICAgICk7XG4vLyBcbi8vICAgICBpZiAoIWNvbXBvbmVudC5vd25lcikge1xuLy8gICAgICAgICBzb3VyY2VCdWZmZXIuam9pblN0cmluZygnPCEtLXMtZGF0YTonKTtcbi8vICAgICAgICAgc291cmNlQnVmZmVyLmpvaW5EYXRhU3RyaW5naWZ5KCk7XG4vLyAgICAgICAgIHNvdXJjZUJ1ZmZlci5qb2luU3RyaW5nKCctLT4nKTtcbi8vICAgICB9XG4vLyBcbi8vIFxuLy8gXG4vLyAgICAgZWxlbWVudFNvdXJjZUNvbXBpbGVyLmlubmVyKHNvdXJjZUJ1ZmZlciwgY29tcG9uZW50LmFOb2RlLCBjb21wb25lbnQpO1xuLy8gICAgIGVsZW1lbnRTb3VyY2VDb21waWxlci50YWdFbmQoc291cmNlQnVmZmVyLCBjb21wb25lbnQudGFnTmFtZSk7XG4vLyB9XG4vLyBcbi8vIHZhciBzdHJpbmdpZmllciA9IHtcbi8vICAgICBvYmo6IGZ1bmN0aW9uIChzb3VyY2UpIHtcbi8vICAgICAgICAgdmFyIHByZWZpeENvbW1hO1xuLy8gICAgICAgICB2YXIgcmVzdWx0ID0gJ3snO1xuLy8gXG4vLyAgICAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbi8vICAgICAgICAgICAgIGlmICh0eXBlb2Ygc291cmNlW2tleV0gPT09ICd1bmRlZmluZWQnKSB7XG4vLyAgICAgICAgICAgICAgICAgY29udGludWU7XG4vLyAgICAgICAgICAgICB9XG4vLyBcbi8vICAgICAgICAgICAgIGlmIChwcmVmaXhDb21tYSkge1xuLy8gICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnLCc7XG4vLyAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICBwcmVmaXhDb21tYSA9IDE7XG4vLyBcbi8vICAgICAgICAgICAgIHJlc3VsdCArPSBjb21waWxlRXhwclNvdXJjZS5zdHJpbmdMaXRlcmFsaXplKGtleSkgKyAnOicgKyBzdHJpbmdpZmllci5hbnkoc291cmNlW2tleV0pO1xuLy8gICAgICAgICB9XG4vLyBcbi8vICAgICAgICAgcmV0dXJuIHJlc3VsdCArICd9Jztcbi8vICAgICB9LFxuLy8gXG4vLyAgICAgYXJyOiBmdW5jdGlvbiAoc291cmNlKSB7XG4vLyAgICAgICAgIHZhciBwcmVmaXhDb21tYTtcbi8vICAgICAgICAgdmFyIHJlc3VsdCA9ICdbJztcbi8vIFxuLy8gICAgICAgICBlYWNoKHNvdXJjZSwgZnVuY3Rpb24gKHZhbHVlKSB7XG4vLyAgICAgICAgICAgICBpZiAocHJlZml4Q29tbWEpIHtcbi8vICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJywnO1xuLy8gICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgcHJlZml4Q29tbWEgPSAxO1xuLy8gXG4vLyAgICAgICAgICAgICByZXN1bHQgKz0gc3RyaW5naWZpZXIuYW55KHZhbHVlKTtcbi8vICAgICAgICAgfSk7XG4vLyBcbi8vICAgICAgICAgcmV0dXJuIHJlc3VsdCArICddJztcbi8vICAgICB9LFxuLy8gXG4vLyAgICAgc3RyOiBmdW5jdGlvbiAoc291cmNlKSB7XG4vLyAgICAgICAgIHJldHVybiBjb21waWxlRXhwclNvdXJjZS5zdHJpbmdMaXRlcmFsaXplKHNvdXJjZSk7XG4vLyAgICAgfSxcbi8vIFxuLy8gICAgIGRhdGU6IGZ1bmN0aW9uIChzb3VyY2UpIHtcbi8vICAgICAgICAgcmV0dXJuICduZXcgRGF0ZSgnICsgc291cmNlLmdldFRpbWUoKSArICcpJztcbi8vICAgICB9LFxuLy8gXG4vLyAgICAgYW55OiBmdW5jdGlvbiAoc291cmNlKSB7XG4vLyAgICAgICAgIHN3aXRjaCAodHlwZW9mIHNvdXJjZSkge1xuLy8gICAgICAgICAgICAgY2FzZSAnc3RyaW5nJzpcbi8vICAgICAgICAgICAgICAgICByZXR1cm4gc3RyaW5naWZpZXIuc3RyKHNvdXJjZSk7XG4vLyBcbi8vICAgICAgICAgICAgIGNhc2UgJ251bWJlcic6XG4vLyAgICAgICAgICAgICAgICAgcmV0dXJuICcnICsgc291cmNlO1xuLy8gXG4vLyAgICAgICAgICAgICBjYXNlICdib29sZWFuJzpcbi8vICAgICAgICAgICAgICAgICByZXR1cm4gc291cmNlID8gJ3RydWUnIDogJ2ZhbHNlJztcbi8vIFxuLy8gICAgICAgICAgICAgY2FzZSAnb2JqZWN0Jzpcbi8vICAgICAgICAgICAgICAgICBpZiAoIXNvdXJjZSkge1xuLy8gICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbi8vICAgICAgICAgICAgICAgICB9XG4vLyBcbi8vICAgICAgICAgICAgICAgICBpZiAoc291cmNlIGluc3RhbmNlb2YgQXJyYXkpIHtcbi8vICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0cmluZ2lmaWVyLmFycihzb3VyY2UpO1xuLy8gICAgICAgICAgICAgICAgIH1cbi8vIFxuLy8gICAgICAgICAgICAgICAgIGlmIChzb3VyY2UgaW5zdGFuY2VvZiBEYXRlKSB7XG4vLyAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdHJpbmdpZmllci5kYXRlKHNvdXJjZSk7XG4vLyAgICAgICAgICAgICAgICAgfVxuLy8gXG4vLyAgICAgICAgICAgICAgICAgcmV0dXJuIHN0cmluZ2lmaWVyLm9iaihzb3VyY2UpO1xuLy8gICAgICAgICB9XG4vLyBcbi8vICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgU3RyaW5naWZ5OicgKyBzb3VyY2UpO1xuLy8gICAgIH1cbi8vIH07XG4vLyBcbi8vIC8qKlxuLy8gICog55Sf5oiQ57uE5Lu2IHJlbmRlcmVyIOaXtiBjdHgg5a+56LGh5p6E5bu655qE5Luj56CBXG4vLyAgKlxuLy8gICogQGlubmVyXG4vLyAgKiBAcGFyYW0ge09iamVjdH0gY29tcG9uZW50IOe7hOS7tuWunuS+i1xuLy8gICogQHJldHVybiB7c3RyaW5nfVxuLy8gICovXG4vLyBmdW5jdGlvbiBnZW5Db21wb25lbnRDb250ZXh0Q29kZShjb21wb25lbnQpIHtcbi8vICAgICB2YXIgY29kZSA9IFsndmFyIGNvbXBvbmVudEN0eCA9IHsnXTtcbi8vIFxuLy8gICAgIC8vIGdpdmVuIGFub2RlXG4vLyAgICAgY29kZS5wdXNoKCdnaXZlblNsb3RzOiBbXSwnKTtcbi8vIFxuLy8gICAgIC8vIGZpbHRlcnNcbi8vICAgICBjb2RlLnB1c2goJ2ZpbHRlcnM6IHsnKTtcbi8vICAgICB2YXIgZmlsdGVyQ29kZSA9IFtdO1xuLy8gICAgIGZvciAodmFyIGtleSBpbiBjb21wb25lbnQuZmlsdGVycykge1xuLy8gICAgICAgICB2YXIgZmlsdGVyID0gY29tcG9uZW50LmZpbHRlcnNba2V5XTtcbi8vIFxuLy8gICAgICAgICBpZiAodHlwZW9mIGZpbHRlciA9PT0gJ2Z1bmN0aW9uJykge1xuLy8gICAgICAgICAgICAgZmlsdGVyQ29kZS5wdXNoKGtleSArICc6ICcgKyBmaWx0ZXIudG9TdHJpbmcoKSk7XG4vLyAgICAgICAgIH1cbi8vICAgICB9XG4vLyAgICAgY29kZS5wdXNoKGZpbHRlckNvZGUuam9pbignLCcpKTtcbi8vICAgICBjb2RlLnB1c2goJ30sJyk7XG4vLyBcbi8vICAgICBjb2RlLnB1c2goXG4vLyAgICAgICAgICdjYWxsRmlsdGVyOiBmdW5jdGlvbiAobmFtZSwgYXJncykgeycsXG4vLyAgICAgICAgICcgICAgdmFyIGZpbHRlciA9IHRoaXMuZmlsdGVyc1tuYW1lXSB8fCBERUZBVUxUX0ZJTFRFUlNbbmFtZV07Jyxcbi8vICAgICAgICAgJyAgICBpZiAodHlwZW9mIGZpbHRlciA9PT0gXCJmdW5jdGlvblwiKSB7Jyxcbi8vICAgICAgICAgJyAgICAgICAgcmV0dXJuIGZpbHRlci5hcHBseSh0aGlzLCBhcmdzKTsnLFxuLy8gICAgICAgICAnICAgIH0nLFxuLy8gICAgICAgICAnfSwnXG4vLyAgICAgKTtcbi8vIFxuLy8gICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXJlZGVjbGFyZSAqL1xuLy8gICAgIC8vIGNvbXB1dGVkIG9ialxuLy8gICAgIGNvZGUucHVzaCgnY29tcHV0ZWQ6IHsnKTtcbi8vICAgICB2YXIgY29tcHV0ZWRDb2RlID0gW107XG4vLyAgICAgZm9yICh2YXIga2V5IGluIGNvbXBvbmVudC5jb21wdXRlZCkge1xuLy8gICAgICAgICB2YXIgY29tcHV0ZWQgPSBjb21wb25lbnQuY29tcHV0ZWRba2V5XTtcbi8vIFxuLy8gICAgICAgICBpZiAodHlwZW9mIGNvbXB1dGVkID09PSAnZnVuY3Rpb24nKSB7XG4vLyAgICAgICAgICAgICBjb21wdXRlZENvZGUucHVzaChrZXkgKyAnOiAnXG4vLyAgICAgICAgICAgICAgICAgKyBjb21wdXRlZC50b1N0cmluZygpLnJlcGxhY2UoXG4vLyAgICAgICAgICAgICAgICAgICAgIC90aGlzLmRhdGEuZ2V0XFwoKFteXFwpXSspXFwpL2csXG4vLyAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChtYXRjaCwgZXhwckxpdGVyYWwpIHtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBleHByU3RyID0gKG5ldyBGdW5jdGlvbigncmV0dXJuICcgKyBleHByTGl0ZXJhbCkpKCk7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXhwciA9IHBhcnNlRXhwcihleHByU3RyKTtcbi8vIFxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbXBpbGVFeHByU291cmNlLmV4cHIoZXhwcik7XG4vLyAgICAgICAgICAgICAgICAgICAgIH0pXG4vLyAgICAgICAgICAgICApO1xuLy8gICAgICAgICB9XG4vLyAgICAgfVxuLy8gICAgIGNvZGUucHVzaChjb21wdXRlZENvZGUuam9pbignLCcpKTtcbi8vICAgICBjb2RlLnB1c2goJ30sJyk7XG4vLyBcbi8vICAgICAvLyBjb21wdXRlZCBuYW1lc1xuLy8gICAgIGNvZGUucHVzaCgnY29tcHV0ZWROYW1lczogWycpO1xuLy8gICAgIGNvbXB1dGVkQ29kZSA9IFtdO1xuLy8gICAgIGZvciAodmFyIGtleSBpbiBjb21wb25lbnQuY29tcHV0ZWQpIHtcbi8vICAgICAgICAgdmFyIGNvbXB1dGVkID0gY29tcG9uZW50LmNvbXB1dGVkW2tleV07XG4vLyBcbi8vICAgICAgICAgaWYgKHR5cGVvZiBjb21wdXRlZCA9PT0gJ2Z1bmN0aW9uJykge1xuLy8gICAgICAgICAgICAgY29tcHV0ZWRDb2RlLnB1c2goJ1wiJyArIGtleSArICdcIicpO1xuLy8gICAgICAgICB9XG4vLyAgICAgfVxuLy8gICAgIGNvZGUucHVzaChjb21wdXRlZENvZGUuam9pbignLCcpKTtcbi8vICAgICBjb2RlLnB1c2goJ10sJyk7XG4vLyAgICAgLyogZXNsaW50LWVuYWJsZSBuby1yZWRlY2xhcmUgKi9cbi8vIFxuLy8gICAgIC8vIGRhdGFcbi8vICAgICBjb2RlLnB1c2goJ2RhdGE6ICcgKyBzdHJpbmdpZmllci5hbnkoY29tcG9uZW50LmRhdGEuZ2V0KCkpICsgJywnKTtcbi8vIFxuLy8gICAgIC8vIHRhZ05hbWVcbi8vICAgICBjb2RlLnB1c2goJ3RhZ05hbWU6IFwiJyArIGNvbXBvbmVudC50YWdOYW1lICsgJ1wiJyk7XG4vLyAgICAgY29kZS5wdXNoKCd9OycpO1xuLy8gXG4vLyAgICAgcmV0dXJuIGNvZGUuam9pbignXFxuJyk7XG4vLyB9XG4vLyBcbi8vIC8qIGVzbGludC1lbmFibGUgZ3VhcmQtZm9yLWluICovXG4vLyBcbi8vIC8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG4vLyAvKiBlc2xpbnQtZGlzYWJsZSBmZWNzLWNhbWVsY2FzZSAqL1xuLy8gXG4vLyAvKipcbi8vICAqIOe7hOS7tue8luivkeeahOaooeadv+WHveaVsFxuLy8gICpcbi8vICAqIEBpbm5lclxuLy8gICovXG4vLyBmdW5jdGlvbiBjb21wb25lbnRDb21waWxlUHJlQ29kZSgpIHtcbi8vICAgICB2YXIgJHZlcnNpb24gPSAnMy41LjcnO1xuLy8gXG4vLyAgICAgZnVuY3Rpb24gZXh0ZW5kKHRhcmdldCwgc291cmNlKSB7XG4vLyAgICAgICAgIGlmIChzb3VyY2UpIHtcbi8vICAgICAgICAgICAgIE9iamVjdC5rZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4vLyAgICAgICAgICAgICAgICAgbGV0IHZhbHVlID0gc291cmNlW2tleV07XG4vLyAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbi8vICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0W2tleV0gPSB2YWx1ZTtcbi8vICAgICAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICB9KTtcbi8vICAgICAgICAgfVxuLy8gXG4vLyAgICAgICAgIHJldHVybiB0YXJnZXQ7XG4vLyAgICAgfVxuLy8gXG4vLyAgICAgZnVuY3Rpb24gZWFjaChhcnJheSwgaXRlcmF0b3IpIHtcbi8vICAgICAgICAgaWYgKGFycmF5ICYmIGFycmF5Lmxlbmd0aCA+IDApIHtcbi8vICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gYXJyYXkubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4vLyAgICAgICAgICAgICAgICAgaWYgKGl0ZXJhdG9yKGFycmF5W2ldLCBpKSA9PT0gZmFsc2UpIHtcbi8vICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4vLyAgICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgfVxuLy8gICAgICAgICB9XG4vLyAgICAgfVxuLy8gXG4vLyAgICAgZnVuY3Rpb24gY29udGFpbnMoYXJyYXksIHZhbHVlKSB7XG4vLyAgICAgICAgIHZhciByZXN1bHQ7XG4vLyAgICAgICAgIGVhY2goYXJyYXksIGZ1bmN0aW9uIChpdGVtKSB7XG4vLyAgICAgICAgICAgICByZXN1bHQgPSBpdGVtID09PSB2YWx1ZTtcbi8vICAgICAgICAgICAgIHJldHVybiAhcmVzdWx0O1xuLy8gICAgICAgICB9KTtcbi8vIFxuLy8gICAgICAgICByZXR1cm4gcmVzdWx0O1xuLy8gICAgIH1cbi8vIFxuLy8gICAgIHZhciBIVE1MX0VOVElUWSA9IHtcbi8vICAgICAgICAgLyoganNoaW50IGlnbm9yZTpzdGFydCAqL1xuLy8gICAgICAgICAnJic6ICcmYW1wOycsXG4vLyAgICAgICAgICc8JzogJyZsdDsnLFxuLy8gICAgICAgICAnPic6ICcmZ3Q7Jyxcbi8vICAgICAgICAgJ1wiJzogJyZxdW90OycsXG4vLyAgICAgICAgIC8qIGVzbGludC1kaXNhYmxlIHF1b3RlcyAqL1xuLy8gICAgICAgICBcIidcIjogJyYjMzk7J1xuLy8gICAgICAgICAvKiBlc2xpbnQtZW5hYmxlIHF1b3RlcyAqL1xuLy8gICAgICAgICAvKiBqc2hpbnQgaWdub3JlOmVuZCAqL1xuLy8gICAgIH07XG4vLyBcbi8vICAgICBmdW5jdGlvbiBodG1sRmlsdGVyUmVwbGFjZXIoYykge1xuLy8gICAgICAgICByZXR1cm4gSFRNTF9FTlRJVFlbY107XG4vLyAgICAgfVxuLy8gXG4vLyAgICAgZnVuY3Rpb24gZXNjYXBlSFRNTChzb3VyY2UpIHtcbi8vICAgICAgICAgaWYgKHNvdXJjZSA9PSBudWxsKSB7XG4vLyAgICAgICAgICAgICByZXR1cm4gJyc7XG4vLyAgICAgICAgIH1cbi8vIFxuLy8gICAgICAgICByZXR1cm4gU3RyaW5nKHNvdXJjZSkucmVwbGFjZSgvWyY8PlwiJ10vZywgaHRtbEZpbHRlclJlcGxhY2VyKTtcbi8vICAgICB9XG4vLyBcbi8vICAgICB2YXIgREVGQVVMVF9GSUxURVJTID0ge1xuLy8gICAgICAgICB1cmw6IGVuY29kZVVSSUNvbXBvbmVudCxcbi8vICAgICAgICAgX2NsYXNzOiBmdW5jdGlvbiAoc291cmNlKSB7XG4vLyAgICAgICAgICAgICBpZiAoc291cmNlIGluc3RhbmNlb2YgQXJyYXkpIHtcbi8vICAgICAgICAgICAgICAgICByZXR1cm4gc291cmNlLmpvaW4oJyAnKTtcbi8vICAgICAgICAgICAgIH1cbi8vIFxuLy8gICAgICAgICAgICAgcmV0dXJuIHNvdXJjZTtcbi8vICAgICAgICAgfSxcbi8vICAgICAgICAgX3N0eWxlOiBmdW5jdGlvbiAoc291cmNlKSB7XG4vLyAgICAgICAgICAgICBpZiAodHlwZW9mIHNvdXJjZSA9PT0gJ29iamVjdCcpIHtcbi8vICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gJyc7XG4vLyAgICAgICAgICAgICAgICAgaWYgKHNvdXJjZSkge1xuLy8gICAgICAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IGtleSArICc6JyArIHNvdXJjZVtrZXldICsgJzsnO1xuLy8gICAgICAgICAgICAgICAgICAgICB9KTtcbi8vICAgICAgICAgICAgICAgICB9XG4vLyBcbi8vICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuLy8gICAgICAgICAgICAgfVxuLy8gXG4vLyAgICAgICAgICAgICByZXR1cm4gc291cmNlIHx8ICcnO1xuLy8gICAgICAgICB9LFxuLy8gICAgICAgICBfc2VwOiBmdW5jdGlvbiAoc291cmNlLCBzZXApIHtcbi8vICAgICAgICAgICAgIHJldHVybiBzb3VyY2UgPyBzZXAgKyBzb3VyY2UgOiAnJztcbi8vICAgICAgICAgfVxuLy8gICAgIH07XG4vLyBcbi8vICAgICBmdW5jdGlvbiBhdHRyRmlsdGVyKG5hbWUsIHZhbHVlKSB7XG4vLyAgICAgICAgIGlmICh2YWx1ZSkge1xuLy8gICAgICAgICAgICAgcmV0dXJuICcgJyArIG5hbWUgKyAnPVwiJyArIHZhbHVlICsgJ1wiJztcbi8vICAgICAgICAgfVxuLy8gXG4vLyAgICAgICAgIHJldHVybiAnJztcbi8vICAgICB9XG4vLyBcbi8vICAgICBmdW5jdGlvbiBib29sQXR0ckZpbHRlcihuYW1lLCB2YWx1ZSkge1xuLy8gICAgICAgICBpZiAodmFsdWUgJiYgdmFsdWUgIT09ICdmYWxzZScgJiYgdmFsdWUgIT09ICcwJykge1xuLy8gICAgICAgICAgICAgcmV0dXJuICcgJyArIG5hbWU7XG4vLyAgICAgICAgIH1cbi8vIFxuLy8gICAgICAgICByZXR1cm4gJyc7XG4vLyAgICAgfVxuLy8gXG4vLyAgICAgZnVuY3Rpb24gc3RyaW5nTGl0ZXJhbGl6ZShzb3VyY2UpIHtcbi8vICAgICAgICAgcmV0dXJuICdcIidcbi8vICAgICAgICAgICAgICsgc291cmNlXG4vLyAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xceDVDL2csICdcXFxcXFxcXCcpXG4vLyAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1wiL2csICdcXFxcXCInKVxuLy8gICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXHgwQS9nLCAnXFxcXG4nKVxuLy8gICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXHgwOS9nLCAnXFxcXHQnKVxuLy8gICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXHgwRC9nLCAnXFxcXHInKVxuLy8gICAgICAgICAgICAgKyAnXCInO1xuLy8gICAgIH1cbi8vIFxuLy8gICAgIHZhciBzdHJpbmdpZmllciA9IHtcbi8vICAgICAgICAgb2JqOiBmdW5jdGlvbiAoc291cmNlKSB7XG4vLyAgICAgICAgICAgICB2YXIgcHJlZml4Q29tbWE7XG4vLyAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gJ3snO1xuLy8gXG4vLyAgICAgICAgICAgICBPYmplY3Qua2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuLy8gICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygc291cmNlW2tleV0gPT09ICd1bmRlZmluZWQnKSB7XG4vLyAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbi8vICAgICAgICAgICAgICAgICB9XG4vLyBcbi8vICAgICAgICAgICAgICAgICBpZiAocHJlZml4Q29tbWEpIHtcbi8vICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICcsJztcbi8vICAgICAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICAgICAgcHJlZml4Q29tbWEgPSAxO1xuLy8gXG4vLyAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHN0cmluZ0xpdGVyYWxpemUoa2V5KSArICc6JyArIHN0cmluZ2lmaWVyLmFueShzb3VyY2Vba2V5XSk7XG4vLyAgICAgICAgICAgICB9KTtcbi8vIFxuLy8gICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICd9Jztcbi8vICAgICAgICAgfSxcbi8vIFxuLy8gICAgICAgICBhcnI6IGZ1bmN0aW9uIChzb3VyY2UpIHtcbi8vICAgICAgICAgICAgIHZhciBwcmVmaXhDb21tYTtcbi8vICAgICAgICAgICAgIHZhciByZXN1bHQgPSAnWyc7XG4vLyBcbi8vICAgICAgICAgICAgIGVhY2goc291cmNlLCBmdW5jdGlvbiAodmFsdWUpIHtcbi8vICAgICAgICAgICAgICAgICBpZiAocHJlZml4Q29tbWEpIHtcbi8vICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICcsJztcbi8vICAgICAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICAgICAgcHJlZml4Q29tbWEgPSAxO1xuLy8gXG4vLyAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHN0cmluZ2lmaWVyLmFueSh2YWx1ZSk7XG4vLyAgICAgICAgICAgICB9KTtcbi8vIFxuLy8gICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICddJztcbi8vICAgICAgICAgfSxcbi8vIFxuLy8gICAgICAgICBzdHI6IGZ1bmN0aW9uIChzb3VyY2UpIHtcbi8vICAgICAgICAgICAgIHJldHVybiBzdHJpbmdMaXRlcmFsaXplKHNvdXJjZSk7XG4vLyAgICAgICAgIH0sXG4vLyBcbi8vICAgICAgICAgZGF0ZTogZnVuY3Rpb24gKHNvdXJjZSkge1xuLy8gICAgICAgICAgICAgcmV0dXJuICduZXcgRGF0ZSgnICsgc291cmNlLmdldFRpbWUoKSArICcpJztcbi8vICAgICAgICAgfSxcbi8vIFxuLy8gICAgICAgICBhbnk6IGZ1bmN0aW9uIChzb3VyY2UpIHtcbi8vICAgICAgICAgICAgIHN3aXRjaCAodHlwZW9mIHNvdXJjZSkge1xuLy8gICAgICAgICAgICAgICAgIGNhc2UgJ3N0cmluZyc6XG4vLyAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdHJpbmdpZmllci5zdHIoc291cmNlKTtcbi8vIFxuLy8gICAgICAgICAgICAgICAgIGNhc2UgJ251bWJlcic6XG4vLyAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnJyArIHNvdXJjZTtcbi8vIFxuLy8gICAgICAgICAgICAgICAgIGNhc2UgJ2Jvb2xlYW4nOlxuLy8gICAgICAgICAgICAgICAgICAgICByZXR1cm4gc291cmNlID8gJ3RydWUnIDogJ2ZhbHNlJztcbi8vIFxuLy8gICAgICAgICAgICAgICAgIGNhc2UgJ29iamVjdCc6XG4vLyAgICAgICAgICAgICAgICAgICAgIGlmICghc291cmNlKSB7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbi8vICAgICAgICAgICAgICAgICAgICAgfVxuLy8gXG4vLyAgICAgICAgICAgICAgICAgICAgIGlmIChzb3VyY2UgaW5zdGFuY2VvZiBBcnJheSkge1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0cmluZ2lmaWVyLmFycihzb3VyY2UpO1xuLy8gICAgICAgICAgICAgICAgICAgICB9XG4vLyBcbi8vICAgICAgICAgICAgICAgICAgICAgaWYgKHNvdXJjZSBpbnN0YW5jZW9mIERhdGUpIHtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdHJpbmdpZmllci5kYXRlKHNvdXJjZSk7XG4vLyAgICAgICAgICAgICAgICAgICAgIH1cbi8vIFxuLy8gICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RyaW5naWZpZXIub2JqKHNvdXJjZSk7XG4vLyAgICAgICAgICAgICB9XG4vLyBcbi8vICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IFN0cmluZ2lmeTonICsgc291cmNlKTtcbi8vICAgICAgICAgfVxuLy8gICAgIH07XG4vLyB9XG4vLyAvKiBlc2xpbnQtZW5hYmxlIG5vLXVudXNlZC12YXJzICovXG4vLyAvKiBlc2xpbnQtZW5hYmxlIGZlY3MtY2FtZWxjYXNlICovXG4vLyBcbi8vIC8qKlxuLy8gICog5bCG57uE5Lu257yW6K+R5oiQIHJlbmRlciDmlrnms5XnmoQganMg5rqQ56CBXG4vLyAgKlxuLy8gICogQHBhcmFtIHtGdW5jdGlvbn0gQ29tcG9uZW50Q2xhc3Mg57uE5Lu257G7XG4vLyAgKiBAcmV0dXJuIHtzdHJpbmd9XG4vLyAgKi9cbi8vIGZ1bmN0aW9uIGNvbXBpbGVKU1NvdXJjZShDb21wb25lbnRDbGFzcykge1xuLy8gICAgIHZhciBzb3VyY2VCdWZmZXIgPSBuZXcgQ29tcGlsZVNvdXJjZUJ1ZmZlcigpO1xuLy8gXG4vLyAgICAgc291cmNlQnVmZmVyLmFkZFJlbmRlcmVyU3RhcnQoKTtcbi8vICAgICBzb3VyY2VCdWZmZXIuYWRkUmF3KFxuLy8gICAgICAgICBjb21wb25lbnRDb21waWxlUHJlQ29kZS50b1N0cmluZygpXG4vLyAgICAgICAgICAgICAuc3BsaXQoJ1xcbicpXG4vLyAgICAgICAgICAgICAuc2xpY2UoMSlcbi8vICAgICAgICAgICAgIC5qb2luKCdcXG4nKVxuLy8gICAgICAgICAgICAgLnJlcGxhY2UoL1xcfVxccyokLywgJycpXG4vLyAgICAgKTtcbi8vIFxuLy8gICAgIC8vIOWFiOWIneWni+WMluS4quWunuS+i++8jOiuqeaooeadv+e8luivkeaIkCBBTm9kZe+8jOW5tuS4lOiDveiOt+W+l+WIneWni+WMluaVsOaNrlxuLy8gICAgIHZhciBjb21wb25lbnQgPSBuZXcgQ29tcG9uZW50Q2xhc3MoKTtcbi8vIFxuLy8gICAgIGNvbXBpbGVDb21wb25lbnRTb3VyY2Uoc291cmNlQnVmZmVyLCBjb21wb25lbnQpO1xuLy8gICAgIHNvdXJjZUJ1ZmZlci5hZGRSZW5kZXJlckVuZCgpO1xuLy8gICAgIHJldHVybiBzb3VyY2VCdWZmZXIudG9Db2RlKCk7XG4vLyB9XG4vLyAjW2VuZF1cblxuLy8gZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gY29tcGlsZUpTU291cmNlO1xuXG4gICAgLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbi8vICAgICB2YXIgbmV4dFRpY2sgPSByZXF1aXJlKCcuL3V0aWwvbmV4dC10aWNrJyk7XG4vLyAgICAgdmFyIGluaGVyaXRzID0gcmVxdWlyZSgnLi91dGlsL2luaGVyaXRzJyk7XG4vLyAgICAgdmFyIHBhcnNlVGVtcGxhdGUgPSByZXF1aXJlKCcuL3BhcnNlci9wYXJzZS10ZW1wbGF0ZScpO1xuLy8gICAgIHZhciBwYXJzZUV4cHIgPSByZXF1aXJlKCcuL3BhcnNlci9wYXJzZS1leHByJyk7XG4vLyAgICAgdmFyIEV4cHJUeXBlID0gcmVxdWlyZSgnLi9wYXJzZXIvZXhwci10eXBlJyk7XG4vLyAgICAgdmFyIExpZmVDeWNsZSA9IHJlcXVpcmUoJy4vdmlldy9saWZlLWN5Y2xlJyk7XG4vLyAgICAgdmFyIE5vZGVUeXBlID0gcmVxdWlyZSgnLi92aWV3L25vZGUtdHlwZScpO1xuLy8gICAgIHZhciBDb21wb25lbnQgPSByZXF1aXJlKCcuL3ZpZXcvY29tcG9uZW50Jyk7XG4vLyAgICAgdmFyIGNvbXBpbGVDb21wb25lbnQgPSByZXF1aXJlKCcuL3ZpZXcvY29tcGlsZS1jb21wb25lbnQnKTtcbi8vICAgICB2YXIgZGVmaW5lQ29tcG9uZW50ID0gcmVxdWlyZSgnLi92aWV3L2RlZmluZS1jb21wb25lbnQnKTtcbi8vICAgICB2YXIgZW1pdERldnRvb2wgPSByZXF1aXJlKCcuL3V0aWwvZW1pdC1kZXZ0b29sJyk7XG4vLyAgICAgdmFyIGNvbXBpbGVKU1NvdXJjZSA9IHJlcXVpcmUoJy4vdmlldy9jb21waWxlLWpzLXNvdXJjZScpO1xuLy8gICAgIHZhciBEYXRhID0gcmVxdWlyZSgnLi9ydW50aW1lL2RhdGEnKTtcbi8vICAgICB2YXIgZXZhbEV4cHIgPSByZXF1aXJlKCcuL3J1bnRpbWUvZXZhbC1leHByJyk7XG4vLyAgICAgdmFyIERhdGFUeXBlcyA9IHJlcXVpcmUoJy4vdXRpbC9kYXRhLXR5cGVzJyk7XG5cblxuICAgIHZhciBzYW4gPSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBzYW7niYjmnKzlj7dcbiAgICAgICAgICpcbiAgICAgICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgICAgICovXG4gICAgICAgIHZlcnNpb246ICczLjUuNycsXG5cbiAgICAgICAgLy8gI1tiZWdpbl0gZGV2dG9vbFxuICAgICAgICAvKipcbiAgICAgICAgICog5piv5ZCm5byA5ZCv6LCD6K+V44CC5byA5ZCv6LCD6K+V5pe2IGRldnRvb2wg5Lya5bel5L2cXG4gICAgICAgICAqXG4gICAgICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAgICAgKi9cbiAgICAgICAgZGVidWc6IHRydWUsXG4gICAgICAgIC8vICNbZW5kXVxuXG4gICAgICAgIC8vICNbYmVnaW5dIHNzclxuLy8gICAgICAgICAvKipcbi8vICAgICAgICAgICog5bCG57uE5Lu257G757yW6K+R5oiQIHJlbmRlcmVyIOaWueazlVxuLy8gICAgICAgICAgKlxuLy8gICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBDb21wb25lbnRDbGFzcyDnu4Tku7bnsbtcbi8vICAgICAgICAgICogQHJldHVybiB7ZnVuY3Rpb24oT2JqZWN0KTpzdHJpbmd9XG4vLyAgICAgICAgICAqL1xuLy8gICAgICAgICBjb21waWxlVG9SZW5kZXJlcjogZnVuY3Rpb24gKENvbXBvbmVudENsYXNzKSB7XG4vLyAgICAgICAgICAgICB2YXIgcmVuZGVyZXIgPSBDb21wb25lbnRDbGFzcy5fX3NzclJlbmRlcmVyO1xuLy8gXG4vLyAgICAgICAgICAgICBpZiAoIXJlbmRlcmVyKSB7XG4vLyAgICAgICAgICAgICAgICAgdmFyIGNvZGUgPSBjb21waWxlSlNTb3VyY2UoQ29tcG9uZW50Q2xhc3MpO1xuLy8gICAgICAgICAgICAgICAgIHJlbmRlcmVyID0gKG5ldyBGdW5jdGlvbigncmV0dXJuICcgKyBjb2RlKSkoKTtcbi8vICAgICAgICAgICAgICAgICBDb21wb25lbnRDbGFzcy5fX3NzclJlbmRlcmVyID0gcmVuZGVyZXI7XG4vLyAgICAgICAgICAgICB9XG4vLyBcbi8vICAgICAgICAgICAgIHJldHVybiByZW5kZXJlcjtcbi8vICAgICAgICAgfSxcbi8vIFxuLy8gICAgICAgICAvKipcbi8vICAgICAgICAgICog5bCG57uE5Lu257G757yW6K+R5oiQIHJlbmRlcmVyIOaWueazleeahOa6kOaWh+S7tlxuLy8gICAgICAgICAgKlxuLy8gICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBDb21wb25lbnRDbGFzcyDnu4Tku7bnsbtcbi8vICAgICAgICAgICogQHJldHVybiB7c3RyaW5nfVxuLy8gICAgICAgICAgKi9cbi8vICAgICAgICAgY29tcGlsZVRvU291cmNlOiBjb21waWxlSlNTb3VyY2UsXG4gICAgICAgIC8vICNbZW5kXVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiDnu4Tku7bln7rnsbtcbiAgICAgICAgICpcbiAgICAgICAgICogQHR5cGUge0Z1bmN0aW9ufVxuICAgICAgICAgKi9cbiAgICAgICAgQ29tcG9uZW50OiBDb21wb25lbnQsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIOWIm+W7uue7hOS7tuexu1xuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gcHJvdG8g57uE5Lu257G755qE5pa55rOV6KGoXG4gICAgICAgICAqIEByZXR1cm4ge0Z1bmN0aW9ufVxuICAgICAgICAgKi9cbiAgICAgICAgZGVmaW5lQ29tcG9uZW50OiBkZWZpbmVDb21wb25lbnQsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIOe8luivkee7hOS7tuexu+OAgumihOino+aekHRlbXBsYXRl5ZKMY29tcG9uZW50c1xuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBDb21wb25lbnRDbGFzcyDnu4Tku7bnsbtcbiAgICAgICAgICovXG4gICAgICAgIGNvbXBpbGVDb21wb25lbnQ6IGNvbXBpbGVDb21wb25lbnQsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIOino+aekCB0ZW1wbGF0ZVxuICAgICAgICAgKlxuICAgICAgICAgKiBAaW5uZXJcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHNvdXJjZSB0ZW1wbGF0ZSDmupDnoIFcbiAgICAgICAgICogQHJldHVybiB7QU5vZGV9XG4gICAgICAgICAqL1xuICAgICAgICBwYXJzZVRlbXBsYXRlOiBwYXJzZVRlbXBsYXRlLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiDop6PmnpDooajovr7lvI9cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHNvdXJjZSDmupDnoIFcbiAgICAgICAgICogQHJldHVybiB7T2JqZWN0fVxuICAgICAgICAgKi9cbiAgICAgICAgcGFyc2VFeHByOiBwYXJzZUV4cHIsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIOihqOi+vuW8j+exu+Wei+aemuS4vlxuICAgICAgICAgKlxuICAgICAgICAgKiBAY29uc3RcbiAgICAgICAgICogQHR5cGUge09iamVjdH1cbiAgICAgICAgICovXG4gICAgICAgIEV4cHJUeXBlOiBFeHByVHlwZSxcblxuICAgICAgICAvKipcbiAgICAgICAgICog55Sf5ZG95ZGo5pyfXG4gICAgICAgICAqL1xuICAgICAgICBMaWZlQ3ljbGU6IExpZmVDeWNsZSxcblxuICAgICAgICAvKipcbiAgICAgICAgICog6IqC54K557G75Z6LXG4gICAgICAgICAqXG4gICAgICAgICAqIEBjb25zdFxuICAgICAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAgICAgKi9cbiAgICAgICAgTm9kZVR5cGU6IE5vZGVUeXBlLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiDlnKjkuIvkuIDkuKrmm7TmlrDlkajmnJ/ov5DooYzlh73mlbBcbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZm4g6KaB6L+Q6KGM55qE5Ye95pWwXG4gICAgICAgICAqL1xuICAgICAgICBuZXh0VGljazogbmV4dFRpY2ssXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIOaVsOaNruexu1xuICAgICAgICAgKlxuICAgICAgICAgKiBAY2xhc3NcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3Q/fSBkYXRhIOWIneWni+aVsOaNrlxuICAgICAgICAgKiBAcGFyYW0ge0RhdGE/fSBwYXJlbnQg54i257qn5pWw5o2u5a+56LGhXG4gICAgICAgICAqL1xuICAgICAgICBEYXRhOiBEYXRhLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiDorqHnrpfooajovr7lvI/nmoTlgLxcbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGV4cHIg6KGo6L6+5byP5a+56LGhXG4gICAgICAgICAqIEBwYXJhbSB7RGF0YX0gZGF0YSDmlbDmja7lr7nosaFcbiAgICAgICAgICogQHBhcmFtIHtDb21wb25lbnQ9fSBvd25lciDnu4Tku7blr7nosaHvvIznlKjkuo7ooajovr7lvI/kuK1maWx0ZXLnmoTmiafooYxcbiAgICAgICAgICogQHJldHVybiB7Kn1cbiAgICAgICAgICovXG4gICAgICAgIGV2YWxFeHByOiBldmFsRXhwcixcblxuICAgICAgICAvKipcbiAgICAgICAgICog5p6E5bu657G75LmL6Ze055qE57un5om/5YWz57O7XG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHN1YkNsYXNzIOWtkOexu+WHveaVsFxuICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzdXBlckNsYXNzIOeItuexu+WHveaVsFxuICAgICAgICAgKi9cbiAgICAgICAgaW5oZXJpdHM6IGluaGVyaXRzLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEYXRhVHlwZXNcbiAgICAgICAgICpcbiAgICAgICAgICogQHR5cGUge09iamVjdH1cbiAgICAgICAgICovXG4gICAgICAgIERhdGFUeXBlczogRGF0YVR5cGVzXG4gICAgfTtcblxuICAgIC8vIGV4cG9ydFxuICAgIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgLy8gRm9yIENvbW1vbkpTXG4gICAgICAgIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHNhbjtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgICAgIC8vIEZvciBBTURcbiAgICAgICAgZGVmaW5lKCdzYW4nLCBbXSwgc2FuKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIC8vIEZvciA8c2NyaXB0IHNyYz1cIi4uLlwiXG4gICAgICAgIHJvb3Quc2FuID0gc2FuO1xuICAgIH1cblxuICAgIC8vICNbYmVnaW5dIGRldnRvb2xcbiAgICBlbWl0RGV2dG9vbC5zdGFydChzYW4pO1xuICAgIC8vICNbZW5kXVxufSkodGhpcyk7XG4iLCJ2YXIgX19zYW5fc2NyaXB0X18sIF9fc2FuX3RlbXBsYXRlX19cbnZhciBfX3Nhbl9zdHlsZXNfXyA9IHt9XG5yZXF1aXJlKFwiISFzdHlsZS1sb2FkZXIhY3NzLWxvYWRlcj9zb3VyY2VNYXAhLi4vbm9kZV9tb2R1bGVzL3Nhbi1sb2FkZXIvbGliL3N0eWxlLXJld3JpdGVyLmpzIS4uL25vZGVfbW9kdWxlcy9zYW4tbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlJmluZGV4PTAhLi9hcHAuc2FuXCIpXG5fX3Nhbl9zY3JpcHRfXyA9IHJlcXVpcmUoXCIhISEuLi9ub2RlX21vZHVsZXMvc2FuLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL2FwcC5zYW5cIilcbmlmIChfX3Nhbl9zY3JpcHRfXyAmJlxuICAgIF9fc2FuX3NjcmlwdF9fLl9fZXNNb2R1bGUgJiZcbiAgICBPYmplY3Qua2V5cyhfX3Nhbl9zY3JpcHRfXykubGVuZ3RoID4gMSkge1xuICBjb25zb2xlLndhcm4oXCJbc2FuLWxvYWRlcl0gc3JjXFxcXGFwcC5zYW46IG5hbWVkIGV4cG9ydHMgaW4gKi5zYW4gZmlsZXMgYXJlIGlnbm9yZWQuXCIpfVxuX19zYW5fdGVtcGxhdGVfXyA9IHJlcXVpcmUoXCIhIWh0bWwtbG9hZGVyP21pbmltaXplPWZhbHNlIS4uL25vZGVfbW9kdWxlcy9zYW4tbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9hcHAuc2FuXCIpXG52YXIgX19zYW5fcHJvdG9fXyA9IHt9XG5pZiAoX19zYW5fc2NyaXB0X18pIHtcbiAgX19zYW5fcHJvdG9fXyA9IF9fc2FuX3NjcmlwdF9fLl9fZXNNb2R1bGVcbiAgICA/IF9fc2FuX3NjcmlwdF9fWydkZWZhdWx0J11cbiAgICA6IF9fc2FuX3NjcmlwdF9fXG59XG5pZiAoX19zYW5fdGVtcGxhdGVfXykge1xuICBfX3Nhbl9wcm90b19fLnRlbXBsYXRlID0gX19zYW5fdGVtcGxhdGVfX1xufVxudmFyIHNhbiA9IHJlcXVpcmUoXCJzYW5cIilcbnZhciBfX3Nhbl9leHBvcnRzX18gPSBzYW4uZGVmaW5lQ29tcG9uZW50KF9fc2FuX3Byb3RvX18pXG5tb2R1bGUuZXhwb3J0cyA9IF9fc2FuX2V4cG9ydHNfX1xuaWYgKG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUpIG1vZHVsZS5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHNbJ2RlZmF1bHQnXVxuaWYgKCFfX3Nhbl9leHBvcnRzX18uY29tcHV0ZWQpIF9fc2FuX2V4cG9ydHNfXy5jb21wdXRlZCA9IHt9XG5PYmplY3Qua2V5cyhfX3Nhbl9zdHlsZXNfXykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG52YXIgbW9kdWxlID0gX19zYW5fc3R5bGVzX19ba2V5XVxuX19zYW5fZXhwb3J0c19fLmNvbXB1dGVkW2tleV0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBtb2R1bGUgfVxufSlcbiIsIm1vZHVsZS5leHBvcnRzID0gXCJcXG48ZGl2IGNsYXNzPVxcXCJoZWxsb1xcXCI+e3ttc2d9fTwvZGl2PlxcblwiOyIsIjx0ZW1wbGF0ZT5cclxuICAgIDxkaXYgY2xhc3M9XCJoZWxsb1wiPnt7bXNnfX08L2Rpdj5cclxuPC90ZW1wbGF0ZT5cclxuXHJcbjxzY3JpcHQ+XHJcbiAgICBleHBvcnQgZGVmYXVsdCB7XHJcbiAgICAgICAgaW5pdERhdGEgKCkge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgbXNnOiAnaGVsbG8gd29ybGQnXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG48L3NjcmlwdD5cclxuXHJcbjxzdHlsZT5cclxuICAgIC5oZWxsbyB7XHJcbiAgICAgICAgY29sb3I6IGJsdWU7XHJcbiAgICB9XHJcbjwvc3R5bGU+IiwiXG4vKipcbiAqIFdoZW4gc291cmNlIG1hcHMgYXJlIGVuYWJsZWQsIGBzdHlsZS1sb2FkZXJgIHVzZXMgYSBsaW5rIGVsZW1lbnQgd2l0aCBhIGRhdGEtdXJpIHRvXG4gKiBlbWJlZCB0aGUgY3NzIG9uIHRoZSBwYWdlLiBUaGlzIGJyZWFrcyBhbGwgcmVsYXRpdmUgdXJscyBiZWNhdXNlIG5vdyB0aGV5IGFyZSByZWxhdGl2ZSB0byBhXG4gKiBidW5kbGUgaW5zdGVhZCBvZiB0aGUgY3VycmVudCBwYWdlLlxuICpcbiAqIE9uZSBzb2x1dGlvbiBpcyB0byBvbmx5IHVzZSBmdWxsIHVybHMsIGJ1dCB0aGF0IG1heSBiZSBpbXBvc3NpYmxlLlxuICpcbiAqIEluc3RlYWQsIHRoaXMgZnVuY3Rpb24gXCJmaXhlc1wiIHRoZSByZWxhdGl2ZSB1cmxzIHRvIGJlIGFic29sdXRlIGFjY29yZGluZyB0byB0aGUgY3VycmVudCBwYWdlIGxvY2F0aW9uLlxuICpcbiAqIEEgcnVkaW1lbnRhcnkgdGVzdCBzdWl0ZSBpcyBsb2NhdGVkIGF0IGB0ZXN0L2ZpeFVybHMuanNgIGFuZCBjYW4gYmUgcnVuIHZpYSB0aGUgYG5wbSB0ZXN0YCBjb21tYW5kLlxuICpcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3MpIHtcbiAgLy8gZ2V0IGN1cnJlbnQgbG9jYXRpb25cbiAgdmFyIGxvY2F0aW9uID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB3aW5kb3cubG9jYXRpb247XG5cbiAgaWYgKCFsb2NhdGlvbikge1xuICAgIHRocm93IG5ldyBFcnJvcihcImZpeFVybHMgcmVxdWlyZXMgd2luZG93LmxvY2F0aW9uXCIpO1xuICB9XG5cblx0Ly8gYmxhbmsgb3IgbnVsbD9cblx0aWYgKCFjc3MgfHwgdHlwZW9mIGNzcyAhPT0gXCJzdHJpbmdcIikge1xuXHQgIHJldHVybiBjc3M7XG4gIH1cblxuICB2YXIgYmFzZVVybCA9IGxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiICsgbG9jYXRpb24uaG9zdDtcbiAgdmFyIGN1cnJlbnREaXIgPSBiYXNlVXJsICsgbG9jYXRpb24ucGF0aG5hbWUucmVwbGFjZSgvXFwvW15cXC9dKiQvLCBcIi9cIik7XG5cblx0Ly8gY29udmVydCBlYWNoIHVybCguLi4pXG5cdC8qXG5cdFRoaXMgcmVndWxhciBleHByZXNzaW9uIGlzIGp1c3QgYSB3YXkgdG8gcmVjdXJzaXZlbHkgbWF0Y2ggYnJhY2tldHMgd2l0aGluXG5cdGEgc3RyaW5nLlxuXG5cdCAvdXJsXFxzKlxcKCAgPSBNYXRjaCBvbiB0aGUgd29yZCBcInVybFwiIHdpdGggYW55IHdoaXRlc3BhY2UgYWZ0ZXIgaXQgYW5kIHRoZW4gYSBwYXJlbnNcblx0ICAgKCAgPSBTdGFydCBhIGNhcHR1cmluZyBncm91cFxuXHQgICAgICg/OiAgPSBTdGFydCBhIG5vbi1jYXB0dXJpbmcgZ3JvdXBcblx0ICAgICAgICAgW14pKF0gID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgIHwgID0gT1Jcblx0ICAgICAgICAgXFwoICA9IE1hdGNoIGEgc3RhcnQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICg/OiAgPSBTdGFydCBhbm90aGVyIG5vbi1jYXB0dXJpbmcgZ3JvdXBzXG5cdCAgICAgICAgICAgICAgICAgW14pKF0rICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgIHwgID0gT1Jcblx0ICAgICAgICAgICAgICAgICBcXCggID0gTWF0Y2ggYSBzdGFydCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgICAgICBbXikoXSogID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgXFwpICA9IE1hdGNoIGEgZW5kIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICApICA9IEVuZCBHcm91cFxuICAgICAgICAgICAgICAqXFwpID0gTWF0Y2ggYW55dGhpbmcgYW5kIHRoZW4gYSBjbG9zZSBwYXJlbnNcbiAgICAgICAgICApICA9IENsb3NlIG5vbi1jYXB0dXJpbmcgZ3JvdXBcbiAgICAgICAgICAqICA9IE1hdGNoIGFueXRoaW5nXG4gICAgICAgKSAgPSBDbG9zZSBjYXB0dXJpbmcgZ3JvdXBcblx0IFxcKSAgPSBNYXRjaCBhIGNsb3NlIHBhcmVuc1xuXG5cdCAvZ2kgID0gR2V0IGFsbCBtYXRjaGVzLCBub3QgdGhlIGZpcnN0LiAgQmUgY2FzZSBpbnNlbnNpdGl2ZS5cblx0ICovXG5cdHZhciBmaXhlZENzcyA9IGNzcy5yZXBsYWNlKC91cmxcXHMqXFwoKCg/OlteKShdfFxcKCg/OlteKShdK3xcXChbXikoXSpcXCkpKlxcKSkqKVxcKS9naSwgZnVuY3Rpb24oZnVsbE1hdGNoLCBvcmlnVXJsKSB7XG5cdFx0Ly8gc3RyaXAgcXVvdGVzIChpZiB0aGV5IGV4aXN0KVxuXHRcdHZhciB1bnF1b3RlZE9yaWdVcmwgPSBvcmlnVXJsXG5cdFx0XHQudHJpbSgpXG5cdFx0XHQucmVwbGFjZSgvXlwiKC4qKVwiJC8sIGZ1bmN0aW9uKG8sICQxKXsgcmV0dXJuICQxOyB9KVxuXHRcdFx0LnJlcGxhY2UoL14nKC4qKSckLywgZnVuY3Rpb24obywgJDEpeyByZXR1cm4gJDE7IH0pO1xuXG5cdFx0Ly8gYWxyZWFkeSBhIGZ1bGwgdXJsPyBubyBjaGFuZ2Vcblx0XHRpZiAoL14oI3xkYXRhOnxodHRwOlxcL1xcL3xodHRwczpcXC9cXC98ZmlsZTpcXC9cXC9cXC98XFxzKiQpL2kudGVzdCh1bnF1b3RlZE9yaWdVcmwpKSB7XG5cdFx0ICByZXR1cm4gZnVsbE1hdGNoO1xuXHRcdH1cblxuXHRcdC8vIGNvbnZlcnQgdGhlIHVybCB0byBhIGZ1bGwgdXJsXG5cdFx0dmFyIG5ld1VybDtcblxuXHRcdGlmICh1bnF1b3RlZE9yaWdVcmwuaW5kZXhPZihcIi8vXCIpID09PSAwKSB7XG5cdFx0ICBcdC8vVE9ETzogc2hvdWxkIHdlIGFkZCBwcm90b2NvbD9cblx0XHRcdG5ld1VybCA9IHVucXVvdGVkT3JpZ1VybDtcblx0XHR9IGVsc2UgaWYgKHVucXVvdGVkT3JpZ1VybC5pbmRleE9mKFwiL1wiKSA9PT0gMCkge1xuXHRcdFx0Ly8gcGF0aCBzaG91bGQgYmUgcmVsYXRpdmUgdG8gdGhlIGJhc2UgdXJsXG5cdFx0XHRuZXdVcmwgPSBiYXNlVXJsICsgdW5xdW90ZWRPcmlnVXJsOyAvLyBhbHJlYWR5IHN0YXJ0cyB3aXRoICcvJ1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBwYXRoIHNob3VsZCBiZSByZWxhdGl2ZSB0byBjdXJyZW50IGRpcmVjdG9yeVxuXHRcdFx0bmV3VXJsID0gY3VycmVudERpciArIHVucXVvdGVkT3JpZ1VybC5yZXBsYWNlKC9eXFwuXFwvLywgXCJcIik7IC8vIFN0cmlwIGxlYWRpbmcgJy4vJ1xuXHRcdH1cblxuXHRcdC8vIHNlbmQgYmFjayB0aGUgZml4ZWQgdXJsKC4uLilcblx0XHRyZXR1cm4gXCJ1cmwoXCIgKyBKU09OLnN0cmluZ2lmeShuZXdVcmwpICsgXCIpXCI7XG5cdH0pO1xuXG5cdC8vIHNlbmQgYmFjayB0aGUgZml4ZWQgY3NzXG5cdHJldHVybiBmaXhlZENzcztcbn07XG4iLCIvKlxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuXG52YXIgc3R5bGVzSW5Eb20gPSB7fTtcblxudmFyXHRtZW1vaXplID0gZnVuY3Rpb24gKGZuKSB7XG5cdHZhciBtZW1vO1xuXG5cdHJldHVybiBmdW5jdGlvbiAoKSB7XG5cdFx0aWYgKHR5cGVvZiBtZW1vID09PSBcInVuZGVmaW5lZFwiKSBtZW1vID0gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0XHRyZXR1cm4gbWVtbztcblx0fTtcbn07XG5cbnZhciBpc09sZElFID0gbWVtb2l6ZShmdW5jdGlvbiAoKSB7XG5cdC8vIFRlc3QgZm9yIElFIDw9IDkgYXMgcHJvcG9zZWQgYnkgQnJvd3NlcmhhY2tzXG5cdC8vIEBzZWUgaHR0cDovL2Jyb3dzZXJoYWNrcy5jb20vI2hhY2stZTcxZDg2OTJmNjUzMzQxNzNmZWU3MTVjMjIyY2I4MDVcblx0Ly8gVGVzdHMgZm9yIGV4aXN0ZW5jZSBvZiBzdGFuZGFyZCBnbG9iYWxzIGlzIHRvIGFsbG93IHN0eWxlLWxvYWRlclxuXHQvLyB0byBvcGVyYXRlIGNvcnJlY3RseSBpbnRvIG5vbi1zdGFuZGFyZCBlbnZpcm9ubWVudHNcblx0Ly8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlci9pc3N1ZXMvMTc3XG5cdHJldHVybiB3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYjtcbn0pO1xuXG52YXIgZ2V0VGFyZ2V0ID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xufTtcblxudmFyIGdldEVsZW1lbnQgPSAoZnVuY3Rpb24gKGZuKSB7XG5cdHZhciBtZW1vID0ge307XG5cblx0cmV0dXJuIGZ1bmN0aW9uKHRhcmdldCkge1xuICAgICAgICAgICAgICAgIC8vIElmIHBhc3NpbmcgZnVuY3Rpb24gaW4gb3B0aW9ucywgdGhlbiB1c2UgaXQgZm9yIHJlc29sdmUgXCJoZWFkXCIgZWxlbWVudC5cbiAgICAgICAgICAgICAgICAvLyBVc2VmdWwgZm9yIFNoYWRvdyBSb290IHN0eWxlIGkuZVxuICAgICAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICAgICAgICAvLyAgIGluc2VydEludG86IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjZm9vXCIpLnNoYWRvd1Jvb3QgfVxuICAgICAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRhcmdldCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdFx0dmFyIHN0eWxlVGFyZ2V0ID0gZ2V0VGFyZ2V0LmNhbGwodGhpcywgdGFyZ2V0KTtcblx0XHRcdC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cdFx0XHRpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Ly8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcblx0XHRcdFx0XHQvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuXHRcdFx0XHRcdHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG5cdFx0XHRcdH0gY2F0Y2goZSkge1xuXHRcdFx0XHRcdHN0eWxlVGFyZ2V0ID0gbnVsbDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0bWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG5cdFx0fVxuXHRcdHJldHVybiBtZW1vW3RhcmdldF1cblx0fTtcbn0pKCk7XG5cbnZhciBzaW5nbGV0b24gPSBudWxsO1xudmFyXHRzaW5nbGV0b25Db3VudGVyID0gMDtcbnZhclx0c3R5bGVzSW5zZXJ0ZWRBdFRvcCA9IFtdO1xuXG52YXJcdGZpeFVybHMgPSByZXF1aXJlKFwiLi91cmxzXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGxpc3QsIG9wdGlvbnMpIHtcblx0aWYgKHR5cGVvZiBERUJVRyAhPT0gXCJ1bmRlZmluZWRcIiAmJiBERUJVRykge1xuXHRcdGlmICh0eXBlb2YgZG9jdW1lbnQgIT09IFwib2JqZWN0XCIpIHRocm93IG5ldyBFcnJvcihcIlRoZSBzdHlsZS1sb2FkZXIgY2Fubm90IGJlIHVzZWQgaW4gYSBub24tYnJvd3NlciBlbnZpcm9ubWVudFwiKTtcblx0fVxuXG5cdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdG9wdGlvbnMuYXR0cnMgPSB0eXBlb2Ygb3B0aW9ucy5hdHRycyA9PT0gXCJvYmplY3RcIiA/IG9wdGlvbnMuYXR0cnMgOiB7fTtcblxuXHQvLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFNi05LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cblx0Ly8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxuXHRpZiAoIW9wdGlvbnMuc2luZ2xldG9uICYmIHR5cGVvZiBvcHRpb25zLnNpbmdsZXRvbiAhPT0gXCJib29sZWFuXCIpIG9wdGlvbnMuc2luZ2xldG9uID0gaXNPbGRJRSgpO1xuXG5cdC8vIEJ5IGRlZmF1bHQsIGFkZCA8c3R5bGU+IHRhZ3MgdG8gdGhlIDxoZWFkPiBlbGVtZW50XG4gICAgICAgIGlmICghb3B0aW9ucy5pbnNlcnRJbnRvKSBvcHRpb25zLmluc2VydEludG8gPSBcImhlYWRcIjtcblxuXHQvLyBCeSBkZWZhdWx0LCBhZGQgPHN0eWxlPiB0YWdzIHRvIHRoZSBib3R0b20gb2YgdGhlIHRhcmdldFxuXHRpZiAoIW9wdGlvbnMuaW5zZXJ0QXQpIG9wdGlvbnMuaW5zZXJ0QXQgPSBcImJvdHRvbVwiO1xuXG5cdHZhciBzdHlsZXMgPSBsaXN0VG9TdHlsZXMobGlzdCwgb3B0aW9ucyk7XG5cblx0YWRkU3R5bGVzVG9Eb20oc3R5bGVzLCBvcHRpb25zKTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlIChuZXdMaXN0KSB7XG5cdFx0dmFyIG1heVJlbW92ZSA9IFtdO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpdGVtID0gc3R5bGVzW2ldO1xuXHRcdFx0dmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XG5cblx0XHRcdGRvbVN0eWxlLnJlZnMtLTtcblx0XHRcdG1heVJlbW92ZS5wdXNoKGRvbVN0eWxlKTtcblx0XHR9XG5cblx0XHRpZihuZXdMaXN0KSB7XG5cdFx0XHR2YXIgbmV3U3R5bGVzID0gbGlzdFRvU3R5bGVzKG5ld0xpc3QsIG9wdGlvbnMpO1xuXHRcdFx0YWRkU3R5bGVzVG9Eb20obmV3U3R5bGVzLCBvcHRpb25zKTtcblx0XHR9XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG1heVJlbW92ZS5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGRvbVN0eWxlID0gbWF5UmVtb3ZlW2ldO1xuXG5cdFx0XHRpZihkb21TdHlsZS5yZWZzID09PSAwKSB7XG5cdFx0XHRcdGZvciAodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIGRvbVN0eWxlLnBhcnRzW2pdKCk7XG5cblx0XHRcdFx0ZGVsZXRlIHN0eWxlc0luRG9tW2RvbVN0eWxlLmlkXTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG59O1xuXG5mdW5jdGlvbiBhZGRTdHlsZXNUb0RvbSAoc3R5bGVzLCBvcHRpb25zKSB7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIGl0ZW0gPSBzdHlsZXNbaV07XG5cdFx0dmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XG5cblx0XHRpZihkb21TdHlsZSkge1xuXHRcdFx0ZG9tU3R5bGUucmVmcysrO1xuXG5cdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0ZG9tU3R5bGUucGFydHNbal0oaXRlbS5wYXJ0c1tqXSk7XG5cdFx0XHR9XG5cblx0XHRcdGZvcig7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdGRvbVN0eWxlLnBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YXIgcGFydHMgPSBbXTtcblxuXHRcdFx0Zm9yKHZhciBqID0gMDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0cGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XG5cdFx0XHR9XG5cblx0XHRcdHN0eWxlc0luRG9tW2l0ZW0uaWRdID0ge2lkOiBpdGVtLmlkLCByZWZzOiAxLCBwYXJ0czogcGFydHN9O1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBsaXN0VG9TdHlsZXMgKGxpc3QsIG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlcyA9IFtdO1xuXHR2YXIgbmV3U3R5bGVzID0ge307XG5cblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIGl0ZW0gPSBsaXN0W2ldO1xuXHRcdHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuXHRcdHZhciBjc3MgPSBpdGVtWzFdO1xuXHRcdHZhciBtZWRpYSA9IGl0ZW1bMl07XG5cdFx0dmFyIHNvdXJjZU1hcCA9IGl0ZW1bM107XG5cdFx0dmFyIHBhcnQgPSB7Y3NzOiBjc3MsIG1lZGlhOiBtZWRpYSwgc291cmNlTWFwOiBzb3VyY2VNYXB9O1xuXG5cdFx0aWYoIW5ld1N0eWxlc1tpZF0pIHN0eWxlcy5wdXNoKG5ld1N0eWxlc1tpZF0gPSB7aWQ6IGlkLCBwYXJ0czogW3BhcnRdfSk7XG5cdFx0ZWxzZSBuZXdTdHlsZXNbaWRdLnBhcnRzLnB1c2gocGFydCk7XG5cdH1cblxuXHRyZXR1cm4gc3R5bGVzO1xufVxuXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQgKG9wdGlvbnMsIHN0eWxlKSB7XG5cdHZhciB0YXJnZXQgPSBnZXRFbGVtZW50KG9wdGlvbnMuaW5zZXJ0SW50bylcblxuXHRpZiAoIXRhcmdldCkge1xuXHRcdHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0SW50bycgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuXHR9XG5cblx0dmFyIGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wID0gc3R5bGVzSW5zZXJ0ZWRBdFRvcFtzdHlsZXNJbnNlcnRlZEF0VG9wLmxlbmd0aCAtIDFdO1xuXG5cdGlmIChvcHRpb25zLmluc2VydEF0ID09PSBcInRvcFwiKSB7XG5cdFx0aWYgKCFsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCkge1xuXHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgdGFyZ2V0LmZpcnN0Q2hpbGQpO1xuXHRcdH0gZWxzZSBpZiAobGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AubmV4dFNpYmxpbmcpIHtcblx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wLm5leHRTaWJsaW5nKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcblx0XHR9XG5cdFx0c3R5bGVzSW5zZXJ0ZWRBdFRvcC5wdXNoKHN0eWxlKTtcblx0fSBlbHNlIGlmIChvcHRpb25zLmluc2VydEF0ID09PSBcImJvdHRvbVwiKSB7XG5cdFx0dGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcblx0fSBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJvYmplY3RcIiAmJiBvcHRpb25zLmluc2VydEF0LmJlZm9yZSkge1xuXHRcdHZhciBuZXh0U2libGluZyA9IGdldEVsZW1lbnQob3B0aW9ucy5pbnNlcnRJbnRvICsgXCIgXCIgKyBvcHRpb25zLmluc2VydEF0LmJlZm9yZSk7XG5cdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgbmV4dFNpYmxpbmcpO1xuXHR9IGVsc2Uge1xuXHRcdHRocm93IG5ldyBFcnJvcihcIltTdHlsZSBMb2FkZXJdXFxuXFxuIEludmFsaWQgdmFsdWUgZm9yIHBhcmFtZXRlciAnaW5zZXJ0QXQnICgnb3B0aW9ucy5pbnNlcnRBdCcpIGZvdW5kLlxcbiBNdXN0IGJlICd0b3AnLCAnYm90dG9tJywgb3IgT2JqZWN0LlxcbiAoaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIjaW5zZXJ0YXQpXFxuXCIpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudCAoc3R5bGUpIHtcblx0aWYgKHN0eWxlLnBhcmVudE5vZGUgPT09IG51bGwpIHJldHVybiBmYWxzZTtcblx0c3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG5cblx0dmFyIGlkeCA9IHN0eWxlc0luc2VydGVkQXRUb3AuaW5kZXhPZihzdHlsZSk7XG5cdGlmKGlkeCA+PSAwKSB7XG5cdFx0c3R5bGVzSW5zZXJ0ZWRBdFRvcC5zcGxpY2UoaWR4LCAxKTtcblx0fVxufVxuXG5mdW5jdGlvbiBjcmVhdGVTdHlsZUVsZW1lbnQgKG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuXG5cdGlmKG9wdGlvbnMuYXR0cnMudHlwZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0b3B0aW9ucy5hdHRycy50eXBlID0gXCJ0ZXh0L2Nzc1wiO1xuXHR9XG5cblx0YWRkQXR0cnMoc3R5bGUsIG9wdGlvbnMuYXR0cnMpO1xuXHRpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgc3R5bGUpO1xuXG5cdHJldHVybiBzdHlsZTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTGlua0VsZW1lbnQgKG9wdGlvbnMpIHtcblx0dmFyIGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlua1wiKTtcblxuXHRpZihvcHRpb25zLmF0dHJzLnR5cGUgPT09IHVuZGVmaW5lZCkge1xuXHRcdG9wdGlvbnMuYXR0cnMudHlwZSA9IFwidGV4dC9jc3NcIjtcblx0fVxuXHRvcHRpb25zLmF0dHJzLnJlbCA9IFwic3R5bGVzaGVldFwiO1xuXG5cdGFkZEF0dHJzKGxpbmssIG9wdGlvbnMuYXR0cnMpO1xuXHRpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgbGluayk7XG5cblx0cmV0dXJuIGxpbms7XG59XG5cbmZ1bmN0aW9uIGFkZEF0dHJzIChlbCwgYXR0cnMpIHtcblx0T2JqZWN0LmtleXMoYXR0cnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuXHRcdGVsLnNldEF0dHJpYnV0ZShrZXksIGF0dHJzW2tleV0pO1xuXHR9KTtcbn1cblxuZnVuY3Rpb24gYWRkU3R5bGUgKG9iaiwgb3B0aW9ucykge1xuXHR2YXIgc3R5bGUsIHVwZGF0ZSwgcmVtb3ZlLCByZXN1bHQ7XG5cblx0Ly8gSWYgYSB0cmFuc2Zvcm0gZnVuY3Rpb24gd2FzIGRlZmluZWQsIHJ1biBpdCBvbiB0aGUgY3NzXG5cdGlmIChvcHRpb25zLnRyYW5zZm9ybSAmJiBvYmouY3NzKSB7XG5cdCAgICByZXN1bHQgPSBvcHRpb25zLnRyYW5zZm9ybShvYmouY3NzKTtcblxuXHQgICAgaWYgKHJlc3VsdCkge1xuXHQgICAgXHQvLyBJZiB0cmFuc2Zvcm0gcmV0dXJucyBhIHZhbHVlLCB1c2UgdGhhdCBpbnN0ZWFkIG9mIHRoZSBvcmlnaW5hbCBjc3MuXG5cdCAgICBcdC8vIFRoaXMgYWxsb3dzIHJ1bm5pbmcgcnVudGltZSB0cmFuc2Zvcm1hdGlvbnMgb24gdGhlIGNzcy5cblx0ICAgIFx0b2JqLmNzcyA9IHJlc3VsdDtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICBcdC8vIElmIHRoZSB0cmFuc2Zvcm0gZnVuY3Rpb24gcmV0dXJucyBhIGZhbHN5IHZhbHVlLCBkb24ndCBhZGQgdGhpcyBjc3MuXG5cdCAgICBcdC8vIFRoaXMgYWxsb3dzIGNvbmRpdGlvbmFsIGxvYWRpbmcgb2YgY3NzXG5cdCAgICBcdHJldHVybiBmdW5jdGlvbigpIHtcblx0ICAgIFx0XHQvLyBub29wXG5cdCAgICBcdH07XG5cdCAgICB9XG5cdH1cblxuXHRpZiAob3B0aW9ucy5zaW5nbGV0b24pIHtcblx0XHR2YXIgc3R5bGVJbmRleCA9IHNpbmdsZXRvbkNvdW50ZXIrKztcblxuXHRcdHN0eWxlID0gc2luZ2xldG9uIHx8IChzaW5nbGV0b24gPSBjcmVhdGVTdHlsZUVsZW1lbnQob3B0aW9ucykpO1xuXG5cdFx0dXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCBmYWxzZSk7XG5cdFx0cmVtb3ZlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCB0cnVlKTtcblxuXHR9IGVsc2UgaWYgKFxuXHRcdG9iai5zb3VyY2VNYXAgJiZcblx0XHR0eXBlb2YgVVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgVVJMLmNyZWF0ZU9iamVjdFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIFVSTC5yZXZva2VPYmplY3RVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBCbG9iID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiXG5cdCkge1xuXHRcdHN0eWxlID0gY3JlYXRlTGlua0VsZW1lbnQob3B0aW9ucyk7XG5cdFx0dXBkYXRlID0gdXBkYXRlTGluay5iaW5kKG51bGwsIHN0eWxlLCBvcHRpb25zKTtcblx0XHRyZW1vdmUgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuXG5cdFx0XHRpZihzdHlsZS5ocmVmKSBVUkwucmV2b2tlT2JqZWN0VVJMKHN0eWxlLmhyZWYpO1xuXHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0c3R5bGUgPSBjcmVhdGVTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG5cdFx0dXBkYXRlID0gYXBwbHlUb1RhZy5iaW5kKG51bGwsIHN0eWxlKTtcblx0XHRyZW1vdmUgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuXHRcdH07XG5cdH1cblxuXHR1cGRhdGUob2JqKTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUgKG5ld09iaikge1xuXHRcdGlmIChuZXdPYmopIHtcblx0XHRcdGlmIChcblx0XHRcdFx0bmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJlxuXHRcdFx0XHRuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJlxuXHRcdFx0XHRuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwXG5cdFx0XHQpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHR1cGRhdGUob2JqID0gbmV3T2JqKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmVtb3ZlKCk7XG5cdFx0fVxuXHR9O1xufVxuXG52YXIgcmVwbGFjZVRleHQgPSAoZnVuY3Rpb24gKCkge1xuXHR2YXIgdGV4dFN0b3JlID0gW107XG5cblx0cmV0dXJuIGZ1bmN0aW9uIChpbmRleCwgcmVwbGFjZW1lbnQpIHtcblx0XHR0ZXh0U3RvcmVbaW5kZXhdID0gcmVwbGFjZW1lbnQ7XG5cblx0XHRyZXR1cm4gdGV4dFN0b3JlLmZpbHRlcihCb29sZWFuKS5qb2luKCdcXG4nKTtcblx0fTtcbn0pKCk7XG5cbmZ1bmN0aW9uIGFwcGx5VG9TaW5nbGV0b25UYWcgKHN0eWxlLCBpbmRleCwgcmVtb3ZlLCBvYmopIHtcblx0dmFyIGNzcyA9IHJlbW92ZSA/IFwiXCIgOiBvYmouY3NzO1xuXG5cdGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG5cdFx0c3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoaW5kZXgsIGNzcyk7XG5cdH0gZWxzZSB7XG5cdFx0dmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpO1xuXHRcdHZhciBjaGlsZE5vZGVzID0gc3R5bGUuY2hpbGROb2RlcztcblxuXHRcdGlmIChjaGlsZE5vZGVzW2luZGV4XSkgc3R5bGUucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pO1xuXG5cdFx0aWYgKGNoaWxkTm9kZXMubGVuZ3RoKSB7XG5cdFx0XHRzdHlsZS5pbnNlcnRCZWZvcmUoY3NzTm9kZSwgY2hpbGROb2Rlc1tpbmRleF0pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRzdHlsZS5hcHBlbmRDaGlsZChjc3NOb2RlKTtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gYXBwbHlUb1RhZyAoc3R5bGUsIG9iaikge1xuXHR2YXIgY3NzID0gb2JqLmNzcztcblx0dmFyIG1lZGlhID0gb2JqLm1lZGlhO1xuXG5cdGlmKG1lZGlhKSB7XG5cdFx0c3R5bGUuc2V0QXR0cmlidXRlKFwibWVkaWFcIiwgbWVkaWEpXG5cdH1cblxuXHRpZihzdHlsZS5zdHlsZVNoZWV0KSB7XG5cdFx0c3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuXHR9IGVsc2Uge1xuXHRcdHdoaWxlKHN0eWxlLmZpcnN0Q2hpbGQpIHtcblx0XHRcdHN0eWxlLnJlbW92ZUNoaWxkKHN0eWxlLmZpcnN0Q2hpbGQpO1xuXHRcdH1cblxuXHRcdHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUxpbmsgKGxpbmssIG9wdGlvbnMsIG9iaikge1xuXHR2YXIgY3NzID0gb2JqLmNzcztcblx0dmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cblx0Lypcblx0XHRJZiBjb252ZXJ0VG9BYnNvbHV0ZVVybHMgaXNuJ3QgZGVmaW5lZCwgYnV0IHNvdXJjZW1hcHMgYXJlIGVuYWJsZWRcblx0XHRhbmQgdGhlcmUgaXMgbm8gcHVibGljUGF0aCBkZWZpbmVkIHRoZW4gbGV0cyB0dXJuIGNvbnZlcnRUb0Fic29sdXRlVXJsc1xuXHRcdG9uIGJ5IGRlZmF1bHQuICBPdGhlcndpc2UgZGVmYXVsdCB0byB0aGUgY29udmVydFRvQWJzb2x1dGVVcmxzIG9wdGlvblxuXHRcdGRpcmVjdGx5XG5cdCovXG5cdHZhciBhdXRvRml4VXJscyA9IG9wdGlvbnMuY29udmVydFRvQWJzb2x1dGVVcmxzID09PSB1bmRlZmluZWQgJiYgc291cmNlTWFwO1xuXG5cdGlmIChvcHRpb25zLmNvbnZlcnRUb0Fic29sdXRlVXJscyB8fCBhdXRvRml4VXJscykge1xuXHRcdGNzcyA9IGZpeFVybHMoY3NzKTtcblx0fVxuXG5cdGlmIChzb3VyY2VNYXApIHtcblx0XHQvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yNjYwMzg3NVxuXHRcdGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIgKyBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpICsgXCIgKi9cIjtcblx0fVxuXG5cdHZhciBibG9iID0gbmV3IEJsb2IoW2Nzc10sIHsgdHlwZTogXCJ0ZXh0L2Nzc1wiIH0pO1xuXG5cdHZhciBvbGRTcmMgPSBsaW5rLmhyZWY7XG5cblx0bGluay5ocmVmID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcblxuXHRpZihvbGRTcmMpIFVSTC5yZXZva2VPYmplY3RVUkwob2xkU3JjKTtcbn1cbiIsIi8qXG5cdE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG4vLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih1c2VTb3VyY2VNYXApIHtcblx0dmFyIGxpc3QgPSBbXTtcblxuXHQvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cdGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcblx0XHRcdHZhciBjb250ZW50ID0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApO1xuXHRcdFx0aWYoaXRlbVsyXSkge1xuXHRcdFx0XHRyZXR1cm4gXCJAbWVkaWEgXCIgKyBpdGVtWzJdICsgXCJ7XCIgKyBjb250ZW50ICsgXCJ9XCI7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gY29udGVudDtcblx0XHRcdH1cblx0XHR9KS5qb2luKFwiXCIpO1xuXHR9O1xuXG5cdC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG5cdGxpc3QuaSA9IGZ1bmN0aW9uKG1vZHVsZXMsIG1lZGlhUXVlcnkpIHtcblx0XHRpZih0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIilcblx0XHRcdG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIFwiXCJdXTtcblx0XHR2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaWQgPSB0aGlzW2ldWzBdO1xuXHRcdFx0aWYodHlwZW9mIGlkID09PSBcIm51bWJlclwiKVxuXHRcdFx0XHRhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG5cdFx0fVxuXHRcdGZvcihpID0gMDsgaSA8IG1vZHVsZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpdGVtID0gbW9kdWxlc1tpXTtcblx0XHRcdC8vIHNraXAgYWxyZWFkeSBpbXBvcnRlZCBtb2R1bGVcblx0XHRcdC8vIHRoaXMgaW1wbGVtZW50YXRpb24gaXMgbm90IDEwMCUgcGVyZmVjdCBmb3Igd2VpcmQgbWVkaWEgcXVlcnkgY29tYmluYXRpb25zXG5cdFx0XHQvLyAgd2hlbiBhIG1vZHVsZSBpcyBpbXBvcnRlZCBtdWx0aXBsZSB0aW1lcyB3aXRoIGRpZmZlcmVudCBtZWRpYSBxdWVyaWVzLlxuXHRcdFx0Ly8gIEkgaG9wZSB0aGlzIHdpbGwgbmV2ZXIgb2NjdXIgKEhleSB0aGlzIHdheSB3ZSBoYXZlIHNtYWxsZXIgYnVuZGxlcylcblx0XHRcdGlmKHR5cGVvZiBpdGVtWzBdICE9PSBcIm51bWJlclwiIHx8ICFhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG5cdFx0XHRcdGlmKG1lZGlhUXVlcnkgJiYgIWl0ZW1bMl0pIHtcblx0XHRcdFx0XHRpdGVtWzJdID0gbWVkaWFRdWVyeTtcblx0XHRcdFx0fSBlbHNlIGlmKG1lZGlhUXVlcnkpIHtcblx0XHRcdFx0XHRpdGVtWzJdID0gXCIoXCIgKyBpdGVtWzJdICsgXCIpIGFuZCAoXCIgKyBtZWRpYVF1ZXJ5ICsgXCIpXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0bGlzdC5wdXNoKGl0ZW0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0cmV0dXJuIGxpc3Q7XG59O1xuXG5mdW5jdGlvbiBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCkge1xuXHR2YXIgY29udGVudCA9IGl0ZW1bMV0gfHwgJyc7XG5cdHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblx0aWYgKCFjc3NNYXBwaW5nKSB7XG5cdFx0cmV0dXJuIGNvbnRlbnQ7XG5cdH1cblxuXHRpZiAodXNlU291cmNlTWFwICYmIHR5cGVvZiBidG9hID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0dmFyIHNvdXJjZU1hcHBpbmcgPSB0b0NvbW1lbnQoY3NzTWFwcGluZyk7XG5cdFx0dmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcblx0XHRcdHJldHVybiAnLyojIHNvdXJjZVVSTD0nICsgY3NzTWFwcGluZy5zb3VyY2VSb290ICsgc291cmNlICsgJyAqLydcblx0XHR9KTtcblxuXHRcdHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oJ1xcbicpO1xuXHR9XG5cblx0cmV0dXJuIFtjb250ZW50XS5qb2luKCdcXG4nKTtcbn1cblxuLy8gQWRhcHRlZCBmcm9tIGNvbnZlcnQtc291cmNlLW1hcCAoTUlUKVxuZnVuY3Rpb24gdG9Db21tZW50KHNvdXJjZU1hcCkge1xuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcblx0dmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSk7XG5cdHZhciBkYXRhID0gJ3NvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LCcgKyBiYXNlNjQ7XG5cblx0cmV0dXJuICcvKiMgJyArIGRhdGEgKyAnICovJztcbn1cbiIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikodHJ1ZSk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJcXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG4uaGVsbG8ge1xcbiAgICBjb2xvcjogYmx1ZTtcXG59XFxuXCIsIFwiXCIsIHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIkY6L2lmZS9tdnZtL3NyYy9hcHAuc2FuPzdiZDY0MWJhXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCI7Ozs7Ozs7Ozs7Ozs7OztBQWVBO0lBQ0EsWUFBQTtDQUNBXCIsXCJmaWxlXCI6XCJhcHAuc2FuXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIjx0ZW1wbGF0ZT5cXHJcXG4gICAgPGRpdiBjbGFzcz1cXFwiaGVsbG9cXFwiPnt7bXNnfX08L2Rpdj5cXHJcXG48L3RlbXBsYXRlPlxcclxcblxcclxcbjxzY3JpcHQ+XFxyXFxuICAgIGV4cG9ydCBkZWZhdWx0IHtcXHJcXG4gICAgICAgIGluaXREYXRhICgpIHtcXHJcXG4gICAgICAgICAgICByZXR1cm4ge1xcclxcbiAgICAgICAgICAgICAgICBtc2c6ICdoZWxsbyB3b3JsZCdcXHJcXG4gICAgICAgICAgICB9O1xcclxcbiAgICAgICAgfVxcclxcbiAgICB9XFxyXFxuPC9zY3JpcHQ+XFxyXFxuXFxyXFxuPHN0eWxlPlxcclxcbiAgICAuaGVsbG8ge1xcclxcbiAgICAgICAgY29sb3I6IGJsdWU7XFxyXFxuICAgIH1cXHJcXG48L3N0eWxlPlwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuXG4vLyBleHBvcnRzXG4iLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/c291cmNlTWFwIS4uL25vZGVfbW9kdWxlcy9zYW4tbG9hZGVyL2xpYi9zdHlsZS1yZXdyaXRlci5qcyEuLi9ub2RlX21vZHVsZXMvc2FuLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZSZpbmRleD0wIS4vYXBwLnNhblwiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/c291cmNlTWFwIS4uL25vZGVfbW9kdWxlcy9zYW4tbG9hZGVyL2xpYi9zdHlsZS1yZXdyaXRlci5qcyEuLi9ub2RlX21vZHVsZXMvc2FuLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZSZpbmRleD0wIS4vYXBwLnNhblwiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzP3NvdXJjZU1hcCEuLi9ub2RlX21vZHVsZXMvc2FuLWxvYWRlci9saWIvc3R5bGUtcmV3cml0ZXIuanMhLi4vbm9kZV9tb2R1bGVzL3Nhbi1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGUmaW5kZXg9MCEuL2FwcC5zYW5cIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuIiwiKGZ1bmN0aW9uIChnbG9iYWwsIHVuZGVmaW5lZCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgaWYgKGdsb2JhbC5zZXRJbW1lZGlhdGUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBuZXh0SGFuZGxlID0gMTsgLy8gU3BlYyBzYXlzIGdyZWF0ZXIgdGhhbiB6ZXJvXG4gICAgdmFyIHRhc2tzQnlIYW5kbGUgPSB7fTtcbiAgICB2YXIgY3VycmVudGx5UnVubmluZ0FUYXNrID0gZmFsc2U7XG4gICAgdmFyIGRvYyA9IGdsb2JhbC5kb2N1bWVudDtcbiAgICB2YXIgcmVnaXN0ZXJJbW1lZGlhdGU7XG5cbiAgICBmdW5jdGlvbiBzZXRJbW1lZGlhdGUoY2FsbGJhY2spIHtcbiAgICAgIC8vIENhbGxiYWNrIGNhbiBlaXRoZXIgYmUgYSBmdW5jdGlvbiBvciBhIHN0cmluZ1xuICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGNhbGxiYWNrID0gbmV3IEZ1bmN0aW9uKFwiXCIgKyBjYWxsYmFjayk7XG4gICAgICB9XG4gICAgICAvLyBDb3B5IGZ1bmN0aW9uIGFyZ3VtZW50c1xuICAgICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpICsgMV07XG4gICAgICB9XG4gICAgICAvLyBTdG9yZSBhbmQgcmVnaXN0ZXIgdGhlIHRhc2tcbiAgICAgIHZhciB0YXNrID0geyBjYWxsYmFjazogY2FsbGJhY2ssIGFyZ3M6IGFyZ3MgfTtcbiAgICAgIHRhc2tzQnlIYW5kbGVbbmV4dEhhbmRsZV0gPSB0YXNrO1xuICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUobmV4dEhhbmRsZSk7XG4gICAgICByZXR1cm4gbmV4dEhhbmRsZSsrO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsZWFySW1tZWRpYXRlKGhhbmRsZSkge1xuICAgICAgICBkZWxldGUgdGFza3NCeUhhbmRsZVtoYW5kbGVdO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJ1bih0YXNrKSB7XG4gICAgICAgIHZhciBjYWxsYmFjayA9IHRhc2suY2FsbGJhY2s7XG4gICAgICAgIHZhciBhcmdzID0gdGFzay5hcmdzO1xuICAgICAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgY2FsbGJhY2soYXJnc1swXSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgY2FsbGJhY2soYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgY2FsbGJhY2soYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGNhbGxiYWNrLmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJ1bklmUHJlc2VudChoYW5kbGUpIHtcbiAgICAgICAgLy8gRnJvbSB0aGUgc3BlYzogXCJXYWl0IHVudGlsIGFueSBpbnZvY2F0aW9ucyBvZiB0aGlzIGFsZ29yaXRobSBzdGFydGVkIGJlZm9yZSB0aGlzIG9uZSBoYXZlIGNvbXBsZXRlZC5cIlxuICAgICAgICAvLyBTbyBpZiB3ZSdyZSBjdXJyZW50bHkgcnVubmluZyBhIHRhc2ssIHdlJ2xsIG5lZWQgdG8gZGVsYXkgdGhpcyBpbnZvY2F0aW9uLlxuICAgICAgICBpZiAoY3VycmVudGx5UnVubmluZ0FUYXNrKSB7XG4gICAgICAgICAgICAvLyBEZWxheSBieSBkb2luZyBhIHNldFRpbWVvdXQuIHNldEltbWVkaWF0ZSB3YXMgdHJpZWQgaW5zdGVhZCwgYnV0IGluIEZpcmVmb3ggNyBpdCBnZW5lcmF0ZWQgYVxuICAgICAgICAgICAgLy8gXCJ0b28gbXVjaCByZWN1cnNpb25cIiBlcnJvci5cbiAgICAgICAgICAgIHNldFRpbWVvdXQocnVuSWZQcmVzZW50LCAwLCBoYW5kbGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIHRhc2sgPSB0YXNrc0J5SGFuZGxlW2hhbmRsZV07XG4gICAgICAgICAgICBpZiAodGFzaykge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRseVJ1bm5pbmdBVGFzayA9IHRydWU7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgcnVuKHRhc2spO1xuICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIGNsZWFySW1tZWRpYXRlKGhhbmRsZSk7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRseVJ1bm5pbmdBVGFzayA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxOZXh0VGlja0ltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiAoKSB7IHJ1bklmUHJlc2VudChoYW5kbGUpOyB9KTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjYW5Vc2VQb3N0TWVzc2FnZSgpIHtcbiAgICAgICAgLy8gVGhlIHRlc3QgYWdhaW5zdCBgaW1wb3J0U2NyaXB0c2AgcHJldmVudHMgdGhpcyBpbXBsZW1lbnRhdGlvbiBmcm9tIGJlaW5nIGluc3RhbGxlZCBpbnNpZGUgYSB3ZWIgd29ya2VyLFxuICAgICAgICAvLyB3aGVyZSBgZ2xvYmFsLnBvc3RNZXNzYWdlYCBtZWFucyBzb21ldGhpbmcgY29tcGxldGVseSBkaWZmZXJlbnQgYW5kIGNhbid0IGJlIHVzZWQgZm9yIHRoaXMgcHVycG9zZS5cbiAgICAgICAgaWYgKGdsb2JhbC5wb3N0TWVzc2FnZSAmJiAhZ2xvYmFsLmltcG9ydFNjcmlwdHMpIHtcbiAgICAgICAgICAgIHZhciBwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhciBvbGRPbk1lc3NhZ2UgPSBnbG9iYWwub25tZXNzYWdlO1xuICAgICAgICAgICAgZ2xvYmFsLm9ubWVzc2FnZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXMgPSBmYWxzZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBnbG9iYWwucG9zdE1lc3NhZ2UoXCJcIiwgXCIqXCIpO1xuICAgICAgICAgICAgZ2xvYmFsLm9ubWVzc2FnZSA9IG9sZE9uTWVzc2FnZTtcbiAgICAgICAgICAgIHJldHVybiBwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbFBvc3RNZXNzYWdlSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIC8vIEluc3RhbGxzIGFuIGV2ZW50IGhhbmRsZXIgb24gYGdsb2JhbGAgZm9yIHRoZSBgbWVzc2FnZWAgZXZlbnQ6IHNlZVxuICAgICAgICAvLyAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL0RPTS93aW5kb3cucG9zdE1lc3NhZ2VcbiAgICAgICAgLy8gKiBodHRwOi8vd3d3LndoYXR3Zy5vcmcvc3BlY3Mvd2ViLWFwcHMvY3VycmVudC13b3JrL211bHRpcGFnZS9jb21tcy5odG1sI2Nyb3NzRG9jdW1lbnRNZXNzYWdlc1xuXG4gICAgICAgIHZhciBtZXNzYWdlUHJlZml4ID0gXCJzZXRJbW1lZGlhdGUkXCIgKyBNYXRoLnJhbmRvbSgpICsgXCIkXCI7XG4gICAgICAgIHZhciBvbkdsb2JhbE1lc3NhZ2UgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgaWYgKGV2ZW50LnNvdXJjZSA9PT0gZ2xvYmFsICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIGV2ZW50LmRhdGEgPT09IFwic3RyaW5nXCIgJiZcbiAgICAgICAgICAgICAgICBldmVudC5kYXRhLmluZGV4T2YobWVzc2FnZVByZWZpeCkgPT09IDApIHtcbiAgICAgICAgICAgICAgICBydW5JZlByZXNlbnQoK2V2ZW50LmRhdGEuc2xpY2UobWVzc2FnZVByZWZpeC5sZW5ndGgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgICAgICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCBvbkdsb2JhbE1lc3NhZ2UsIGZhbHNlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGdsb2JhbC5hdHRhY2hFdmVudChcIm9ubWVzc2FnZVwiLCBvbkdsb2JhbE1lc3NhZ2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShtZXNzYWdlUHJlZml4ICsgaGFuZGxlLCBcIipcIik7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbE1lc3NhZ2VDaGFubmVsSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHZhciBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsKCk7XG4gICAgICAgIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIHZhciBoYW5kbGUgPSBldmVudC5kYXRhO1xuICAgICAgICAgICAgcnVuSWZQcmVzZW50KGhhbmRsZSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIGNoYW5uZWwucG9ydDIucG9zdE1lc3NhZ2UoaGFuZGxlKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsUmVhZHlTdGF0ZUNoYW5nZUltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICB2YXIgaHRtbCA9IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICAvLyBDcmVhdGUgYSA8c2NyaXB0PiBlbGVtZW50OyBpdHMgcmVhZHlzdGF0ZWNoYW5nZSBldmVudCB3aWxsIGJlIGZpcmVkIGFzeW5jaHJvbm91c2x5IG9uY2UgaXQgaXMgaW5zZXJ0ZWRcbiAgICAgICAgICAgIC8vIGludG8gdGhlIGRvY3VtZW50LiBEbyBzbywgdGh1cyBxdWV1aW5nIHVwIHRoZSB0YXNrLiBSZW1lbWJlciB0byBjbGVhbiB1cCBvbmNlIGl0J3MgYmVlbiBjYWxsZWQuXG4gICAgICAgICAgICB2YXIgc2NyaXB0ID0gZG9jLmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7XG4gICAgICAgICAgICBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJ1bklmUHJlc2VudChoYW5kbGUpO1xuICAgICAgICAgICAgICAgIHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsO1xuICAgICAgICAgICAgICAgIGh0bWwucmVtb3ZlQ2hpbGQoc2NyaXB0KTtcbiAgICAgICAgICAgICAgICBzY3JpcHQgPSBudWxsO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGh0bWwuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsU2V0VGltZW91dEltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgc2V0VGltZW91dChydW5JZlByZXNlbnQsIDAsIGhhbmRsZSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gSWYgc3VwcG9ydGVkLCB3ZSBzaG91bGQgYXR0YWNoIHRvIHRoZSBwcm90b3R5cGUgb2YgZ2xvYmFsLCBzaW5jZSB0aGF0IGlzIHdoZXJlIHNldFRpbWVvdXQgZXQgYWwuIGxpdmUuXG4gICAgdmFyIGF0dGFjaFRvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mICYmIE9iamVjdC5nZXRQcm90b3R5cGVPZihnbG9iYWwpO1xuICAgIGF0dGFjaFRvID0gYXR0YWNoVG8gJiYgYXR0YWNoVG8uc2V0VGltZW91dCA/IGF0dGFjaFRvIDogZ2xvYmFsO1xuXG4gICAgLy8gRG9uJ3QgZ2V0IGZvb2xlZCBieSBlLmcuIGJyb3dzZXJpZnkgZW52aXJvbm1lbnRzLlxuICAgIGlmICh7fS50b1N0cmluZy5jYWxsKGdsb2JhbC5wcm9jZXNzKSA9PT0gXCJbb2JqZWN0IHByb2Nlc3NdXCIpIHtcbiAgICAgICAgLy8gRm9yIE5vZGUuanMgYmVmb3JlIDAuOVxuICAgICAgICBpbnN0YWxsTmV4dFRpY2tJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIGlmIChjYW5Vc2VQb3N0TWVzc2FnZSgpKSB7XG4gICAgICAgIC8vIEZvciBub24tSUUxMCBtb2Rlcm4gYnJvd3NlcnNcbiAgICAgICAgaW5zdGFsbFBvc3RNZXNzYWdlSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSBpZiAoZ2xvYmFsLk1lc3NhZ2VDaGFubmVsKSB7XG4gICAgICAgIC8vIEZvciB3ZWIgd29ya2Vycywgd2hlcmUgc3VwcG9ydGVkXG4gICAgICAgIGluc3RhbGxNZXNzYWdlQ2hhbm5lbEltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2UgaWYgKGRvYyAmJiBcIm9ucmVhZHlzdGF0ZWNoYW5nZVwiIGluIGRvYy5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpKSB7XG4gICAgICAgIC8vIEZvciBJRSA24oCTOFxuICAgICAgICBpbnN0YWxsUmVhZHlTdGF0ZUNoYW5nZUltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBGb3Igb2xkZXIgYnJvd3NlcnNcbiAgICAgICAgaW5zdGFsbFNldFRpbWVvdXRJbXBsZW1lbnRhdGlvbigpO1xuICAgIH1cblxuICAgIGF0dGFjaFRvLnNldEltbWVkaWF0ZSA9IHNldEltbWVkaWF0ZTtcbiAgICBhdHRhY2hUby5jbGVhckltbWVkaWF0ZSA9IGNsZWFySW1tZWRpYXRlO1xufSh0eXBlb2Ygc2VsZiA9PT0gXCJ1bmRlZmluZWRcIiA/IHR5cGVvZiBnbG9iYWwgPT09IFwidW5kZWZpbmVkXCIgPyB0aGlzIDogZ2xvYmFsIDogc2VsZikpO1xuIiwidmFyIHNjb3BlID0gKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsKSB8fFxuICAgICAgICAgICAgKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYpIHx8XG4gICAgICAgICAgICB3aW5kb3c7XG52YXIgYXBwbHkgPSBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHk7XG5cbi8vIERPTSBBUElzLCBmb3IgY29tcGxldGVuZXNzXG5cbmV4cG9ydHMuc2V0VGltZW91dCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFRpbWVvdXQoYXBwbHkuY2FsbChzZXRUaW1lb3V0LCBzY29wZSwgYXJndW1lbnRzKSwgY2xlYXJUaW1lb3V0KTtcbn07XG5leHBvcnRzLnNldEludGVydmFsID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgVGltZW91dChhcHBseS5jYWxsKHNldEludGVydmFsLCBzY29wZSwgYXJndW1lbnRzKSwgY2xlYXJJbnRlcnZhbCk7XG59O1xuZXhwb3J0cy5jbGVhclRpbWVvdXQgPVxuZXhwb3J0cy5jbGVhckludGVydmFsID0gZnVuY3Rpb24odGltZW91dCkge1xuICBpZiAodGltZW91dCkge1xuICAgIHRpbWVvdXQuY2xvc2UoKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gVGltZW91dChpZCwgY2xlYXJGbikge1xuICB0aGlzLl9pZCA9IGlkO1xuICB0aGlzLl9jbGVhckZuID0gY2xlYXJGbjtcbn1cblRpbWVvdXQucHJvdG90eXBlLnVucmVmID0gVGltZW91dC5wcm90b3R5cGUucmVmID0gZnVuY3Rpb24oKSB7fTtcblRpbWVvdXQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX2NsZWFyRm4uY2FsbChzY29wZSwgdGhpcy5faWQpO1xufTtcblxuLy8gRG9lcyBub3Qgc3RhcnQgdGhlIHRpbWUsIGp1c3Qgc2V0cyB1cCB0aGUgbWVtYmVycyBuZWVkZWQuXG5leHBvcnRzLmVucm9sbCA9IGZ1bmN0aW9uKGl0ZW0sIG1zZWNzKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcbiAgaXRlbS5faWRsZVRpbWVvdXQgPSBtc2Vjcztcbn07XG5cbmV4cG9ydHMudW5lbnJvbGwgPSBmdW5jdGlvbihpdGVtKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcbiAgaXRlbS5faWRsZVRpbWVvdXQgPSAtMTtcbn07XG5cbmV4cG9ydHMuX3VucmVmQWN0aXZlID0gZXhwb3J0cy5hY3RpdmUgPSBmdW5jdGlvbihpdGVtKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcblxuICB2YXIgbXNlY3MgPSBpdGVtLl9pZGxlVGltZW91dDtcbiAgaWYgKG1zZWNzID49IDApIHtcbiAgICBpdGVtLl9pZGxlVGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbiBvblRpbWVvdXQoKSB7XG4gICAgICBpZiAoaXRlbS5fb25UaW1lb3V0KVxuICAgICAgICBpdGVtLl9vblRpbWVvdXQoKTtcbiAgICB9LCBtc2Vjcyk7XG4gIH1cbn07XG5cbi8vIHNldGltbWVkaWF0ZSBhdHRhY2hlcyBpdHNlbGYgdG8gdGhlIGdsb2JhbCBvYmplY3RcbnJlcXVpcmUoXCJzZXRpbW1lZGlhdGVcIik7XG4vLyBPbiBzb21lIGV4b3RpYyBlbnZpcm9ubWVudHMsIGl0J3Mgbm90IGNsZWFyIHdoaWNoIG9iamVjdCBgc2V0aW1tZWRpYXRlYCB3YXNcbi8vIGFibGUgdG8gaW5zdGFsbCBvbnRvLiAgU2VhcmNoIGVhY2ggcG9zc2liaWxpdHkgaW4gdGhlIHNhbWUgb3JkZXIgYXMgdGhlXG4vLyBgc2V0aW1tZWRpYXRlYCBsaWJyYXJ5LlxuZXhwb3J0cy5zZXRJbW1lZGlhdGUgPSAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZi5zZXRJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbC5zZXRJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICh0aGlzICYmIHRoaXMuc2V0SW1tZWRpYXRlKTtcbmV4cG9ydHMuY2xlYXJJbW1lZGlhdGUgPSAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZi5jbGVhckltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwuY2xlYXJJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMgJiYgdGhpcy5jbGVhckltbWVkaWF0ZSk7XG4iLCIvLyBpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xyXG4vLyBpbXBvcnQgJy4vc3R5bGUuY3NzJztcclxuXHJcbi8vIGZ1bmN0aW9uIGNvbXBvbmVudCgpIHtcclxuLy8gICAgIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgXHJcbi8vICAgICAvLyBMb2Rhc2jvvIjnm67liY3pgJrov4fkuIDkuKogc2NyaXB0IOiEmuacrOW8leWFpe+8ieWvueS6juaJp+ihjOi/meS4gOihjOaYr+W/hemcgOeahFxyXG4vLyAgICAgLy8gTG9kYXNoLCBub3cgaW1wb3J0ZWQgYnkgdGhpcyBzY3JpcHRcclxuLy8gICAgIGVsZW1lbnQuaW5uZXJIVE1MID0gXy5qb2luKFsnSGVsbG8nLCAnd2VicGFjayddLCAnICcpO1xyXG4vLyAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdoZWxsbycpO1xyXG5cclxuLy8gICAgIHZhciBidG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcclxuLy8gICAgIHJldHVybiBlbGVtZW50O1xyXG4vLyB9XHJcbiAgXHJcbi8vIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoY29tcG9uZW50KCkpO1xyXG4vL2NvbnNvbGUubG9nKCdoZWxsbyB3b3JsZCcpO1xyXG5cclxuaW1wb3J0IHNhbiBmcm9tICdzYW4nO1xyXG5pbXBvcnQge3JvdXRlcn0gZnJvbSAnc2FuLXJvdXRlcic7XHJcbmltcG9ydCBTYW4gZnJvbSAnLi9hcHAuc2FuJztcclxuXHJcbmNvbnNvbGUubG9nKCdoZWxsbyB3ZWJwYWNrICBTYW4nKTtcclxuXHJcbi8v6L+Z5piv5o6n5Yi26Lev55Sx77yM5byV5YWlU2Fu57uE5Lu2ICDkuI3opoHpl67miJHmgI7kuYjnn6XpgZPvvIznnIvlrpjmlrlkZW1v5a2m5p2l55qE44CC6L+Z5Liq5Lic6KW/5Z2R5LqG5oiR5aW95LmFXHJcbnJvdXRlci5hZGQoe3J1bGU6ICcvJywgQ29tcG9uZW50OiBTYW4sIHRhcmdldDogJyNhcHAnfSk7XHJcblxyXG4vLyDkuIDlrpropoHorrDlvpflkK/liqhcclxucm91dGVyLnN0YXJ0KCk7Il0sInNvdXJjZVJvb3QiOiIifQ==